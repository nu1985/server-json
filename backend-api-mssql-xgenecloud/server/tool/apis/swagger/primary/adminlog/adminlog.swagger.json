{
  "tags": [{
    "name": "adminlog",
    "description": "Everything about your adminlog"
  }],
  "paths": {
    "/api/v1/adminlog": {
      "post": {
        "tags": [
          "adminlog"
        ],
        "summary": "Add a new adminlog",
        "description": "",
        "operationId": "addadminlog",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "adminlog object that needs to add",
          "required": true,
          "schema": {
            "$ref": "#/definitions/adminlog"
          }
        }],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "adminlog"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getadminlog",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }

        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/adminlog/{adminlogId}": {
      "get": {
        "tags": [
          "adminlog"
        ],
        "summary": "Find adminlog by ID",
        "description": "Returns a single adminlog",
        "operationId": "getadminlogById",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "adminlogId",
          "in": "path",
          "description": "ID of adminlog to return",
          "required": true,
          "type": "integer",
          "format": "int64"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/adminlog"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "adminlog not found"
          }
        }
      },
      "put": {
        "tags": [
          "adminlog"
        ],
        "summary": "Updates a adminlog",
        "description": "",
        "operationId": "updateadminlog",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "adminlogId",
            "in": "path",
            "description": "ID of adminlog to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "adminlog object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/adminlog"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "adminlog"
        ],
        "summary": "Deletes a adminlog",
        "description": "",
        "operationId": "deleteadminlog",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "adminlogId",
          "in": "path",
          "description": "ID of adminlog to return",
          "required": true,
          "type": "integer",
          "format": "int64"
        }],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "adminlog not found"
          }
        }
      }
    },


    "/api/v1/adminlog/bulk": {
      "post": {
        "tags": [
          "adminlog"
        ],
        "summary": "Bulk adminlog insert",
        "description": "",
        "operationId": "bulkadminlogInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "adminlog objects",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/adminlog"
            }
          }
        }],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "adminlog"
        ],
        "summary": "Updates a adminlog",
        "description": "",
        "operationId": "updateadminlog",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "adminlog objects with id",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/adminlog"
            }
          }
        }],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "adminlog"
        ],
        "summary": "Deletes a adminlog",
        "description": "",
        "operationId": "deleteadminlog",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "adminlog objects contains id",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/adminlog"
            }
          }
        }],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "adminlog not found"
          }
        }
      }
    },
    "/api/v1/adminlog/findOne": {
      "get": {
        "tags": [
          "adminlog"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneadminlog",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/adminlog"
            }
          }
        }
      }
    },
    "/api/v1/adminlog/{adminlogId}/exists": {
      "get": {
        "tags": [
          "adminlog"
        ],
        "summary": "Check adminlog with provided ID exists",
        "description": "Returns a single adminlog",
        "operationId": "checkadminlogExists",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "adminlogId",
          "in": "path",
          "description": "ID of adminlog",
          "required": true,
          "type": "integer",
          "format": "int64"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/adminlog/count": {
      "get": {
        "tags": [
          "adminlog"
        ],
        "summary": "Get adminlog count",
        "operationId": "getadminlogCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "query",
          "name": "where",
          "type": "String",
          "description": "Where expression"
        }],
        "responses": {
          "405": {
            "description": "Invalid input"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/adminlog/groupby/{columnName}": {
      "get": {
        "tags": [
          "adminlog"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "adminlogGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/adminlog"
            }
          }
        }
      }
    },
    "/api/v1/adminlog/distribution/{columnName}": {
      "get": {
        "tags": [
          "adminlog"
        ],
        "summary": "",
        "description": "",
        "operationId": "adminlogDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "path",
          "name": "columnName",
          "type": "String",
          "description": "Column name"
        }, {
          "in": "query",
          "name": "min",
          "description": "min value",
          "type": "integer",
          "format": "int64"
        }, {
          "in": "query",
          "name": "max",
          "description": "max value",
          "type": "integer",
          "format": "int64"
        }, {
          "in": "query",
          "name": "step",
          "description": "step value",
          "type": "integer",
          "format": "int64"
        }, {
          "in": "query",
          "name": "steps",
          "description": "steps value",
          "type": "integer",
          "format": "int64"
        }, {
          "in": "query",
          "name": "func",
          "description": "comma separated aggregation functions",
          "type": "string"
        }],
        "responses": {
          "405": {
            "description": "Invalid input"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/adminlog/distinct/{columnName}": {
      "get": {
        "tags": [
          "adminlog"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "adminlogDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/adminlog/aggregate/{columnName}": {
      "get": {
        "tags": [
          "adminlog"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "adminlogAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/adminlog"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "adminlog": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "admin_name": {
          "type": "string"
        },
        "computer_name": {
          "type": "string"
        },
        "sIPAddress": {
          "type": "string"
        },
        "timelog": {
          "type": "string"
        },
        "Dlog": {
          "type": "integer"
        },
        "Mlog": {
          "type": "integer"
        },
        "Ylog": {
          "type": "integer"
        },
        "time1": {
          "type": "string"
        },
        "sumrecord": {
          "type": "integer"
        },
        "menu_id": {
          "type": "string"
        },
        "menu_name": {
          "type": "string"
        }
      }
    }
  }
}