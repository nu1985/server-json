{
  "tags": [{
    "name": "bank_name",
    "description": "Everything about your bank_name"
  }],
  "paths": {
    "/api/v1/bank_name": {
      "post": {
        "tags": [
          "bank_name"
        ],
        "summary": "Add a new bank_name",
        "description": "",
        "operationId": "addbank_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "bank_name object that needs to add",
          "required": true,
          "schema": {
            "$ref": "#/definitions/bank_name"
          }
        }],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "bank_name"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getbank_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }

        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bank_name/{bank_nameId}": {
      "get": {
        "tags": [
          "bank_name"
        ],
        "summary": "Find bank_name by ID",
        "description": "Returns a single bank_name",
        "operationId": "getbank_nameById",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "bank_nameId",
          "in": "path",
          "description": "ID of bank_name to return",
          "required": true,
          "type": "integer",
          "format": "int64"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/bank_name"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "bank_name not found"
          }
        }
      },
      "put": {
        "tags": [
          "bank_name"
        ],
        "summary": "Updates a bank_name",
        "description": "",
        "operationId": "updatebank_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "bank_nameId",
            "in": "path",
            "description": "ID of bank_name to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "bank_name object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bank_name"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "bank_name"
        ],
        "summary": "Deletes a bank_name",
        "description": "",
        "operationId": "deletebank_name",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "bank_nameId",
          "in": "path",
          "description": "ID of bank_name to return",
          "required": true,
          "type": "integer",
          "format": "int64"
        }],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "bank_name not found"
          }
        }
      }
    },


    "/api/v1/bank_name/bulk": {
      "post": {
        "tags": [
          "bank_name"
        ],
        "summary": "Bulk bank_name insert",
        "description": "",
        "operationId": "bulkbank_nameInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "bank_name objects",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/bank_name"
            }
          }
        }],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "bank_name"
        ],
        "summary": "Updates a bank_name",
        "description": "",
        "operationId": "updatebank_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "bank_name objects with id",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/bank_name"
            }
          }
        }],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "bank_name"
        ],
        "summary": "Deletes a bank_name",
        "description": "",
        "operationId": "deletebank_name",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "bank_name objects contains id",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/bank_name"
            }
          }
        }],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "bank_name not found"
          }
        }
      }
    },
    "/api/v1/bank_name/findOne": {
      "get": {
        "tags": [
          "bank_name"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnebank_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/bank_name"
            }
          }
        }
      }
    },
    "/api/v1/bank_name/{bank_nameId}/exists": {
      "get": {
        "tags": [
          "bank_name"
        ],
        "summary": "Check bank_name with provided ID exists",
        "description": "Returns a single bank_name",
        "operationId": "checkbank_nameExists",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "bank_nameId",
          "in": "path",
          "description": "ID of bank_name",
          "required": true,
          "type": "integer",
          "format": "int64"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/bank_name/count": {
      "get": {
        "tags": [
          "bank_name"
        ],
        "summary": "Get bank_name count",
        "operationId": "getbank_nameCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "query",
          "name": "where",
          "type": "String",
          "description": "Where expression"
        }],
        "responses": {
          "405": {
            "description": "Invalid input"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/bank_name/groupby/{columnName}": {
      "get": {
        "tags": [
          "bank_name"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "bank_nameGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/bank_name"
            }
          }
        }
      }
    },
    "/api/v1/bank_name/distribution/{columnName}": {
      "get": {
        "tags": [
          "bank_name"
        ],
        "summary": "",
        "description": "",
        "operationId": "bank_nameDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "path",
          "name": "columnName",
          "type": "String",
          "description": "Column name"
        }, {
          "in": "query",
          "name": "min",
          "description": "min value",
          "type": "integer",
          "format": "int64"
        }, {
          "in": "query",
          "name": "max",
          "description": "max value",
          "type": "integer",
          "format": "int64"
        }, {
          "in": "query",
          "name": "step",
          "description": "step value",
          "type": "integer",
          "format": "int64"
        }, {
          "in": "query",
          "name": "steps",
          "description": "steps value",
          "type": "integer",
          "format": "int64"
        }, {
          "in": "query",
          "name": "func",
          "description": "comma separated aggregation functions",
          "type": "string"
        }],
        "responses": {
          "405": {
            "description": "Invalid input"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/bank_name/distinct/{columnName}": {
      "get": {
        "tags": [
          "bank_name"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "bank_nameDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/bank_name/aggregate/{columnName}": {
      "get": {
        "tags": [
          "bank_name"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "bank_nameAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/bank_name"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "bank_name": {
      "type": "object",
      "properties": {
        "bank_id": {
          "type": "integer"
        },
        "bank_name": {
          "type": "string"
        },
        "bank": {
          "type": "string"
        }
      }
    }
  }
}