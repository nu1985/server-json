{
  "tags": [{
    "name": "member",
    "description": "Everything about your member"
  }],
  "paths": {
    "/api/v1/member": {
      "post": {
        "tags": [
          "member"
        ],
        "summary": "Add a new member",
        "description": "",
        "operationId": "addmember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "member object that needs to add",
          "required": true,
          "schema": {
            "$ref": "#/definitions/member"
          }
        }],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "member"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getmember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }

        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/member/{memberId}": {
      "get": {
        "tags": [
          "member"
        ],
        "summary": "Find member by ID",
        "description": "Returns a single member",
        "operationId": "getmemberById",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "memberId",
          "in": "path",
          "description": "ID of member to return",
          "required": true,
          "type": "integer",
          "format": "int64"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/member"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "member not found"
          }
        }
      },
      "put": {
        "tags": [
          "member"
        ],
        "summary": "Updates a member",
        "description": "",
        "operationId": "updatemember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "memberId",
            "in": "path",
            "description": "ID of member to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "member object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/member"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "member"
        ],
        "summary": "Deletes a member",
        "description": "",
        "operationId": "deletemember",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "memberId",
          "in": "path",
          "description": "ID of member to return",
          "required": true,
          "type": "integer",
          "format": "int64"
        }],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "member not found"
          }
        }
      }
    },


    "/api/v1/member/bulk": {
      "post": {
        "tags": [
          "member"
        ],
        "summary": "Bulk member insert",
        "description": "",
        "operationId": "bulkmemberInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "member objects",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/member"
            }
          }
        }],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "member"
        ],
        "summary": "Updates a member",
        "description": "",
        "operationId": "updatemember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "member objects with id",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/member"
            }
          }
        }],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "member"
        ],
        "summary": "Deletes a member",
        "description": "",
        "operationId": "deletemember",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "member objects contains id",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/member"
            }
          }
        }],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "member not found"
          }
        }
      }
    },
    "/api/v1/member/findOne": {
      "get": {
        "tags": [
          "member"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnemember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/member"
            }
          }
        }
      }
    },
    "/api/v1/member/{memberId}/exists": {
      "get": {
        "tags": [
          "member"
        ],
        "summary": "Check member with provided ID exists",
        "description": "Returns a single member",
        "operationId": "checkmemberExists",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "memberId",
          "in": "path",
          "description": "ID of member",
          "required": true,
          "type": "integer",
          "format": "int64"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/member/count": {
      "get": {
        "tags": [
          "member"
        ],
        "summary": "Get member count",
        "operationId": "getmemberCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "query",
          "name": "where",
          "type": "String",
          "description": "Where expression"
        }],
        "responses": {
          "405": {
            "description": "Invalid input"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/member/groupby/{columnName}": {
      "get": {
        "tags": [
          "member"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "memberGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/member"
            }
          }
        }
      }
    },
    "/api/v1/member/distribution/{columnName}": {
      "get": {
        "tags": [
          "member"
        ],
        "summary": "",
        "description": "",
        "operationId": "memberDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "path",
          "name": "columnName",
          "type": "String",
          "description": "Column name"
        }, {
          "in": "query",
          "name": "min",
          "description": "min value",
          "type": "integer",
          "format": "int64"
        }, {
          "in": "query",
          "name": "max",
          "description": "max value",
          "type": "integer",
          "format": "int64"
        }, {
          "in": "query",
          "name": "step",
          "description": "step value",
          "type": "integer",
          "format": "int64"
        }, {
          "in": "query",
          "name": "steps",
          "description": "steps value",
          "type": "integer",
          "format": "int64"
        }, {
          "in": "query",
          "name": "func",
          "description": "comma separated aggregation functions",
          "type": "string"
        }],
        "responses": {
          "405": {
            "description": "Invalid input"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/member/distinct/{columnName}": {
      "get": {
        "tags": [
          "member"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "memberDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/member/aggregate/{columnName}": {
      "get": {
        "tags": [
          "member"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "memberAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/member"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "member": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "member_id": {
          "type": "integer"
        },
        "rang_id": {
          "type": "integer"
        },
        "rang_name": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "name_old": {
          "type": "string"
        },
        "member_up": {
          "type": "integer"
        },
        "name_up_re": {
          "type": "string"
        },
        "pass_id": {
          "type": "string"
        },
        "group_id": {
          "type": "integer"
        },
        "id_13": {
          "type": "string"
        },
        "type_name_id": {
          "type": "integer"
        },
        "type_name222": {
          "type": "string"
        },
        "position": {
          "type": "string"
        },
        "kotobo": {
          "type": "integer"
        },
        "type_name_id_2": {
          "type": "integer"
        },
        "relation": {
          "type": "string"
        },
        "numdead_start": {
          "type": "string"
        },
        "bill_id_start": {
          "type": "integer"
        },
        "pay_check": {
          "type": "string"
        },
        "cause_not_id": {
          "type": "string"
        },
        "cause_out_id": {
          "type": "string"
        },
        "cause_out": {
          "type": "string"
        },
        "birth": {
          "type": "string"
        },
        "age": {
          "type": "string"
        },
        "tel": {
          "type": "string"
        },
        "add_num": {
          "type": "string"
        },
        "add_mu": {
          "type": "integer"
        },
        "ban": {
          "type": "string"
        },
        "road": {
          "type": "string"
        },
        "soi": {
          "type": "string"
        },
        "tumbon_id": {
          "type": "integer"
        },
        "tumbon_nameout": {
          "type": "string"
        },
        "ampher": {
          "type": "string"
        },
        "province": {
          "type": "string"
        },
        "post": {
          "type": "string"
        },
        "hus_wife": {
          "type": "string"
        },
        "child": {
          "type": "string"
        },
        "date_first": {
          "type": "string"
        },
        "Ddate_first": {
          "type": "integer"
        },
        "Mdate_first": {
          "type": "integer"
        },
        "Ydate_first": {
          "type": "integer"
        },
        "date_first1": {
          "type": "string"
        },
        "Ddate_first1": {
          "type": "integer"
        },
        "Mdate_first1": {
          "type": "integer"
        },
        "Ydate_first1": {
          "type": "integer"
        },
        "date_first2": {
          "type": "string"
        },
        "Ddate_first2": {
          "type": "integer"
        },
        "Mdate_first2": {
          "type": "integer"
        },
        "Ydate_first2": {
          "type": "integer"
        },
        "date_continue": {
          "type": "string"
        },
        "monney_fee": {
          "type": "integer"
        },
        "money_det": {
          "type": "integer"
        },
        "number_pay": {
          "type": "integer"
        },
        "money_before": {
          "type": "number",
          "format": "float"
        },
        "date_money_before": {
          "type": "string"
        },
        "money_before_dead": {
          "type": "number",
          "format": "float"
        },
        "numdead_update": {
          "type": "integer"
        },
        "dead_number1up": {
          "type": "string"
        },
        "dead_number2up": {
          "type": "string"
        },
        "pay_number_update": {
          "type": "string"
        },
        "years_up": {
          "type": "integer"
        },
        "remark1": {
          "type": "string"
        },
        "status_id": {
          "type": "integer"
        },
        "how_to_pay": {
          "type": "string"
        },
        "date_dead": {
          "type": "string"
        },
        "Ddate_dead": {
          "type": "integer"
        },
        "Mdate_dead": {
          "type": "integer"
        },
        "Ydate_dead": {
          "type": "integer"
        },
        "date_dead_inform": {
          "type": "string"
        },
        "num_dead": {
          "type": "integer"
        },
        "num_dead_month": {
          "type": "integer"
        },
        "cause": {
          "type": "integer"
        },
        "cause_dead": {
          "type": "string"
        },
        "pay_dead": {
          "type": "integer"
        },
        "pay_dead2": {
          "type": "number",
          "format": "float"
        },
        "pay_dead3": {
          "type": "number",
          "format": "float"
        },
        "pay_dead_center": {
          "type": "integer"
        },
        "pay_percen": {
          "type": "integer"
        },
        "pay_percen2": {
          "type": "number",
          "format": "float"
        },
        "pay_percen3": {
          "type": "number",
          "format": "float"
        },
        "pay_mark": {
          "type": "string"
        },
        "name_dead1": {
          "type": "string"
        },
        "name_dead1_id13": {
          "type": "string"
        },
        "add_name_dead1": {
          "type": "string"
        },
        "name_dead11": {
          "type": "string"
        },
        "name_dead2": {
          "type": "string"
        },
        "add_name_dead2": {
          "type": "string"
        },
        "name_dead2_id13": {
          "type": "string"
        },
        "name_dead22": {
          "type": "string"
        },
        "name_dead3": {
          "type": "string"
        },
        "name_dead3_id13": {
          "type": "string"
        },
        "add_name_dead3": {
          "type": "string"
        },
        "name_dead33": {
          "type": "string"
        },
        "name_dead4": {
          "type": "string"
        },
        "name_dead4_id13": {
          "type": "string"
        },
        "add_name_dead4": {
          "type": "string"
        },
        "name_dead44": {
          "type": "string"
        },
        "name_dead5": {
          "type": "string"
        },
        "name_dead5_id13": {
          "type": "string"
        },
        "add_name_dead5": {
          "type": "string"
        },
        "name_dead55": {
          "type": "string"
        },
        "name_manag": {
          "type": "string"
        },
        "date_pay": {
          "type": "string"
        },
        "Ddate_pay": {
          "type": "integer"
        },
        "Mdate_pay": {
          "type": "string"
        },
        "Ydate_pay": {
          "type": "string"
        },
        "date_pay2": {
          "type": "string"
        },
        "Ddate_pay2": {
          "type": "integer"
        },
        "Mdate_pay2": {
          "type": "string"
        },
        "Ydate_pay2": {
          "type": "string"
        },
        "date_pay3": {
          "type": "string"
        },
        "Ddate_pay3": {
          "type": "integer"
        },
        "Mdate_pay3": {
          "type": "string"
        },
        "Ydate_pay3": {
          "type": "string"
        },
        "remark2": {
          "type": "string"
        },
        "remark3": {
          "type": "string"
        },
        "file_pic": {
          "type": "string"
        },
        "file_pdf": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        },
        "timesend": {
          "type": "string"
        },
        "datesend": {
          "type": "string"
        },
        "reson_recive": {
          "type": "string"
        },
        "nation": {
          "type": "string"
        },
        "occu": {
          "type": "string"
        },
        "line": {
          "type": "integer"
        },
        "yokyod": {
          "type": "integer"
        },
        "dateKang52": {
          "type": "string"
        },
        "numD": {
          "type": "integer"
        },
        "yearsD": {
          "type": "string"
        },
        "line3": {
          "type": "integer"
        },
        "type_reg": {
          "type": "string"
        },
        "dead_pay1": {
          "type": "integer"
        },
        "dead_pay2": {
          "type": "integer"
        },
        "telhome": {
          "type": "string"
        },
        "re1": {
          "type": "string"
        },
        "re2": {
          "type": "string"
        },
        "re3": {
          "type": "string"
        },
        "re4": {
          "type": "string"
        },
        "re5": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "lineid": {
          "type": "string"
        },
        "status_marid": {
          "type": "string"
        },
        "per_1": {
          "type": "integer"
        },
        "per_2": {
          "type": "integer"
        },
        "per_3": {
          "type": "integer"
        },
        "per_4": {
          "type": "integer"
        },
        "per_5": {
          "type": "integer"
        },
        "Nbank_0": {
          "type": "string"
        },
        "Nbank_1": {
          "type": "string"
        },
        "Nbank_2": {
          "type": "string"
        },
        "Nbank_3": {
          "type": "string"
        },
        "Nbank_4": {
          "type": "string"
        },
        "Nbank_5": {
          "type": "string"
        },
        "bank_id_0": {
          "type": "string"
        },
        "brance_0": {
          "type": "string"
        },
        "bank_id_1": {
          "type": "string"
        },
        "bank_id_2": {
          "type": "string"
        },
        "bank_id_3": {
          "type": "string"
        },
        "bank_id_4": {
          "type": "string"
        },
        "bank_id_5": {
          "type": "string"
        },
        "number_bank_0": {
          "type": "string"
        },
        "number_bank_1": {
          "type": "string"
        },
        "number_bank_2": {
          "type": "string"
        },
        "number_bank_3": {
          "type": "string"
        },
        "number_bank_4": {
          "type": "string"
        },
        "number_bank_5": {
          "type": "string"
        },
        "Ydate_first_Num": {
          "type": "string"
        },
        "monkang01": {
          "type": "integer"
        },
        "monkang02": {
          "type": "integer"
        },
        "monkang03": {
          "type": "integer"
        },
        "monkang": {
          "type": "integer"
        },
        "datefirst_pay": {
          "type": "string"
        },
        "yearsfirst_pay": {
          "type": "string"
        },
        "meeting_01": {
          "type": "string"
        },
        "meeting_year": {
          "type": "string"
        },
        "tel2": {
          "type": "string"
        },
        "name_dead6": {
          "type": "string"
        },
        "name_dead_id136": {
          "type": "string"
        },
        "add_name_dead6": {
          "type": "string"
        },
        "re6": {
          "type": "string"
        },
        "name_dead7": {
          "type": "string"
        },
        "name_dead_id137": {
          "type": "string"
        },
        "add_name_dead7": {
          "type": "string"
        },
        "re7": {
          "type": "string"
        },
        "name_dead8": {
          "type": "string"
        },
        "name_dead_id138": {
          "type": "string"
        },
        "add_name_dead8": {
          "type": "string"
        },
        "re8": {
          "type": "string"
        },
        "name_dead9": {
          "type": "string"
        },
        "name_dead_id139": {
          "type": "string"
        },
        "add_name_dead9": {
          "type": "string"
        },
        "re9": {
          "type": "string"
        },
        "name_dead10": {
          "type": "string"
        },
        "name_dead_id1310": {
          "type": "string"
        },
        "add_name_dead10": {
          "type": "string"
        },
        "re10": {
          "type": "string"
        },
        "add01": {
          "type": "string"
        },
        "add_num2": {
          "type": "string"
        },
        "tumbon_nameout2": {
          "type": "string"
        },
        "ampher2": {
          "type": "string"
        },
        "province2": {
          "type": "string"
        },
        "post2": {
          "type": "string"
        }
      }
    }
  }
}