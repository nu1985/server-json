{
  "swagger": "2.0",
  "info": {
    "description": "Create APIs at the speed of your thoughts",
    "version": "1.0.0",
    "title": "XgeneCloud",
    "contact": {}
  },
  "host": "localhost:8080",
  "basePath": "/",
  "tags": [
    {
      "name": "common"
    },
    {
      "name": "Authentication",
      "description": "Everything about User Authentication"
    },
    {
      "name": "account",
      "description": "Everything about your account"
    },
    {
      "name": "accountdetail",
      "description": "Everything about your accountdetail"
    },
    {
      "name": "accountdetailNee",
      "description": "Everything about your accountdetailNee"
    },
    {
      "name": "accountNee",
      "description": "Everything about your accountNee"
    },
    {
      "name": "accountrec",
      "description": "Everything about your accountrec"
    },
    {
      "name": "adminlog",
      "description": "Everything about your adminlog"
    },
    {
      "name": "amphur",
      "description": "Everything about your amphur"
    },
    {
      "name": "ban",
      "description": "Everything about your ban"
    },
    {
      "name": "bank_name",
      "description": "Everything about your bank_name"
    },
    {
      "name": "bill_Group",
      "description": "Everything about your bill_Group"
    },
    {
      "name": "bill_update",
      "description": "Everything about your bill_update"
    },
    {
      "name": "cause",
      "description": "Everything about your cause"
    },
    {
      "name": "cause1",
      "description": "Everything about your cause1"
    },
    {
      "name": "chang_name",
      "description": "Everything about your chang_name"
    },
    {
      "name": "date_present",
      "description": "Everything about your date_present"
    },
    {
      "name": "detail_name",
      "description": "Everything about your detail_name"
    },
    {
      "name": "detail_pay",
      "description": "Everything about your detail_pay"
    },
    {
      "name": "district",
      "description": "Everything about your district"
    },
    {
      "name": "geography",
      "description": "Everything about your geography"
    },
    {
      "name": "mem1",
      "description": "Everything about your mem1"
    },
    {
      "name": "mem2",
      "description": "Everything about your mem2"
    },
    {
      "name": "mem3",
      "description": "Everything about your mem3"
    },
    {
      "name": "member_pay_2",
      "description": "Everything about your member_pay_2"
    },
    {
      "name": "member_pay",
      "description": "Everything about your member_pay"
    },
    {
      "name": "member",
      "description": "Everything about your member"
    },
    {
      "name": "memnew_id_update",
      "description": "Everything about your memnew_id_update"
    },
    {
      "name": "mon_before_start",
      "description": "Everything about your mon_before_start"
    },
    {
      "name": "mon",
      "description": "Everything about your mon"
    },
    {
      "name": "monBank1",
      "description": "Everything about your monBank1"
    },
    {
      "name": "monBank2",
      "description": "Everything about your monBank2"
    },
    {
      "name": "monBank3",
      "description": "Everything about your monBank3"
    },
    {
      "name": "monBank4",
      "description": "Everything about your monBank4"
    },
    {
      "name": "monhug",
      "description": "Everything about your monhug"
    },
    {
      "name": "monJay",
      "description": "Everything about your monJay"
    },
    {
      "name": "monluknee",
      "description": "Everything about your monluknee"
    },
    {
      "name": "monpay4",
      "description": "Everything about your monpay4"
    },
    {
      "name": "monRub",
      "description": "Everything about your monRub"
    },
    {
      "name": "monRubJay",
      "description": "Everything about your monRubJay"
    },
    {
      "name": "monsod_Day",
      "description": "Everything about your monsod_Day"
    },
    {
      "name": "monsod",
      "description": "Everything about your monsod"
    },
    {
      "name": "num_deadcheck",
      "description": "Everything about your num_deadcheck"
    },
    {
      "name": "numdead_up",
      "description": "Everything about your numdead_up"
    },
    {
      "name": "numnotpay",
      "description": "Everything about your numnotpay"
    },
    {
      "name": "numpay_memnew",
      "description": "Everything about your numpay_memnew"
    },
    {
      "name": "numpay_month",
      "description": "Everything about your numpay_month"
    },
    {
      "name": "numpay_years_02",
      "description": "Everything about your numpay_years_02"
    },
    {
      "name": "numpay_years",
      "description": "Everything about your numpay_years"
    },
    {
      "name": "numpay",
      "description": "Everything about your numpay"
    },
    {
      "name": "pay_other",
      "description": "Everything about your pay_other"
    },
    {
      "name": "pay",
      "description": "Everything about your pay"
    },
    {
      "name": "province",
      "description": "Everything about your province"
    },
    {
      "name": "rang",
      "description": "Everything about your rang"
    },
    {
      "name": "rub_other",
      "description": "Everything about your rub_other"
    },
    {
      "name": "rub",
      "description": "Everything about your rub"
    },
    {
      "name": "setup_money",
      "description": "Everything about your setup_money"
    },
    {
      "name": "sinpeemem",
      "description": "Everything about your sinpeemem"
    },
    {
      "name": "status",
      "description": "Everything about your status"
    },
    {
      "name": "sysdiagrams",
      "description": "Everything about your sysdiagrams"
    },
    {
      "name": "total_money",
      "description": "Everything about your total_money"
    },
    {
      "name": "tumbon_authoall",
      "description": "Everything about your tumbon_authoall"
    },
    {
      "name": "tumbon_chang",
      "description": "Everything about your tumbon_chang"
    },
    {
      "name": "tumbon",
      "description": "Everything about your tumbon"
    },
    {
      "name": "type_name_2",
      "description": "Everything about your type_name_2"
    },
    {
      "name": "type_name",
      "description": "Everything about your type_name"
    },
    {
      "name": "useradmin",
      "description": "Everything about your useradmin"
    },
    {
      "name": "userlog_all",
      "description": "Everything about your userlog_all"
    },
    {
      "name": "village",
      "description": "Everything about your village"
    },
    {
      "name": "yearsrecord",
      "description": "Everything about your yearsrecord"
    },
    {
      "name": "zipcode",
      "description": "Everything about your zipcode"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "common"
        ],
        "summary": "Get server health",
        "description": "",
        "operationId": "health",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "process_uptime": "282.6 Seconds",
                "process_memory_usage": {
                  "rss": "46.73 MB",
                  "heapTotal": "24.62 MB",
                  "heapUsed": "19.74 MB",
                  "external": "1.59 MB"
                },
                "os_total_memory": "16384.00 MB",
                "os_free_memory": "826.23 MB",
                "os_load_average": [
                  "3.51",
                  "3.36",
                  "3.24"
                ],
                "v8_heap_statistics": {
                  "total_heap_size": "24.62 MB",
                  "total_heap_size_executable": "0.80 MB",
                  "total_physical_size": "22.25 MB",
                  "total_available_size": "2075.67 MB",
                  "used_heap_size": "19.75 MB",
                  "heap_size_limit": "2096.00 MB",
                  "malloced_memory": "0.09 MB",
                  "peak_malloced_memory": "10.10 MB",
                  "does_zap_garbage": 0,
                  "number_of_native_contexts": 2,
                  "number_of_detached_contexts": 0
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/signin": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User login",
        "description": "",
        "operationId": "login",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Authentication user details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userAuth"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authenticated successfully",
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        }
      }
    },
    "/api/v1/auth/signup": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User signup",
        "description": "",
        "operationId": "signup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Signup user details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registration success",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/auth/signout": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "User logout",
        "description": "",
        "operationId": "logout",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logout success"
          }
        }
      }
    },
    "/api/v1/auth/password/forgot": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Password Forgot",
        "description": "",
        "operationId": "passwordForgot",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Signup user details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "required": true,
                  "example": "test@xgenecloud.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registration success",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/auth/email/validate/{tokenId}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Email validate link",
        "description": "",
        "operationId": "emailValidate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "random token id received",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Validated successfully"
          }
        }
      }
    },
    "/api/v1/auth/token/validate/{tokenId}": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Validate password reset token",
        "description": "",
        "operationId": "passwordResetTokenValidate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "random token id received",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Validated successfully"
          }
        }
      }
    },
    "/api/v1/auth/password/reset/": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Password reset",
        "description": "",
        "operationId": "passwordReset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "random token id received",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Reset password details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "type": "string",
                  "format": "password",
                  "example": "password",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset successfully"
          }
        }
      }
    },
    "/api/v1/user/me": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "USer details",
        "description": "",
        "operationId": "userDetails",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details"
          }
        }
      }
    },
    "/api/v1/user": {
      "put": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update user details",
        "description": "",
        "operationId": "updateUserDetails",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Updated user details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ]
      }
    },
    "/api/v1/user/password/change": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update user details",
        "description": "",
        "operationId": "passwordChange",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Current password and new password",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "currentPassword": {
                  "type": "string",
                  "format": "password",
                  "example": "password"
                },
                "newPassword": {
                  "type": "string",
                  "format": "password",
                  "example": "newPassword"
                }
              }
            }
          }
        ]
      }
    },
    "/api/v1/auth/google": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Google authentication url",
        "description": "",
        "operationId": "googleAuthentication"
      }
    },
    "/api/v1/auth/facebook": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Facebook authentication url",
        "description": "",
        "operationId": "facebookAuthentication"
      }
    },
    "/api/v1/auth/google/callback": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Google authentication callback url",
        "description": "",
        "operationId": "googleAuthenticationCallback"
      }
    },
    "/api/v1/auth/facebook/callback": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Facebook authentication callback url",
        "description": "",
        "operationId": "facebookAuthenticationCallback"
      }
    },
    "/api/v1/account": {
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Add a new account",
        "description": "",
        "operationId": "addaccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "account object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/account"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getaccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/account/{accountId}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Find account by ID",
        "description": "Returns a single account",
        "operationId": "getaccountById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "ID of account to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/account"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "account not found"
          }
        }
      },
      "put": {
        "tags": [
          "account"
        ],
        "summary": "Updates a account",
        "description": "",
        "operationId": "updateaccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "ID of account to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "account object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/account"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "account"
        ],
        "summary": "Deletes a account",
        "description": "",
        "operationId": "deleteaccount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "ID of account to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "account not found"
          }
        }
      }
    },
    "/api/v1/account/bulk": {
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Bulk account insert",
        "description": "",
        "operationId": "bulkaccountInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "account objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/account"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "account"
        ],
        "summary": "Updates a account",
        "description": "",
        "operationId": "updateaccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "account objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/account"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "account"
        ],
        "summary": "Deletes a account",
        "description": "",
        "operationId": "deleteaccount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "account objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/account"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "account not found"
          }
        }
      }
    },
    "/api/v1/account/findOne": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneaccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/account"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/account/{accountId}/exists": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Check account with provided ID exists",
        "description": "Returns a single account",
        "operationId": "checkaccountExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "ID of account",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/account/count": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get account count",
        "operationId": "getaccountCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/account/groupby/{columnName}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "accountGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/account"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/account/distribution/{columnName}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "",
        "description": "",
        "operationId": "accountDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/account/distinct/{columnName}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "accountDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/account/aggregate/{columnName}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "accountAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/account"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountdetail": {
      "post": {
        "tags": [
          "accountdetail"
        ],
        "summary": "Add a new accountdetail",
        "description": "",
        "operationId": "addaccountdetail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "accountdetail object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountdetail"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "accountdetail"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getaccountdetail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountdetail/{accountdetailId}": {
      "get": {
        "tags": [
          "accountdetail"
        ],
        "summary": "Find accountdetail by ID",
        "description": "Returns a single accountdetail",
        "operationId": "getaccountdetailById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountdetailId",
            "in": "path",
            "description": "ID of accountdetail to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/accountdetail"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "accountdetail not found"
          }
        }
      },
      "put": {
        "tags": [
          "accountdetail"
        ],
        "summary": "Updates a accountdetail",
        "description": "",
        "operationId": "updateaccountdetail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountdetailId",
            "in": "path",
            "description": "ID of accountdetail to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "accountdetail object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountdetail"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "accountdetail"
        ],
        "summary": "Deletes a accountdetail",
        "description": "",
        "operationId": "deleteaccountdetail",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountdetailId",
            "in": "path",
            "description": "ID of accountdetail to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "accountdetail not found"
          }
        }
      }
    },
    "/api/v1/accountdetail/bulk": {
      "post": {
        "tags": [
          "accountdetail"
        ],
        "summary": "Bulk accountdetail insert",
        "description": "",
        "operationId": "bulkaccountdetailInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "accountdetail objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accountdetail"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "accountdetail"
        ],
        "summary": "Updates a accountdetail",
        "description": "",
        "operationId": "updateaccountdetail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "accountdetail objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accountdetail"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "accountdetail"
        ],
        "summary": "Deletes a accountdetail",
        "description": "",
        "operationId": "deleteaccountdetail",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "accountdetail objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accountdetail"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "accountdetail not found"
          }
        }
      }
    },
    "/api/v1/accountdetail/findOne": {
      "get": {
        "tags": [
          "accountdetail"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneaccountdetail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/accountdetail"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountdetail/{accountdetailId}/exists": {
      "get": {
        "tags": [
          "accountdetail"
        ],
        "summary": "Check accountdetail with provided ID exists",
        "description": "Returns a single accountdetail",
        "operationId": "checkaccountdetailExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountdetailId",
            "in": "path",
            "description": "ID of accountdetail",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/accountdetail/count": {
      "get": {
        "tags": [
          "accountdetail"
        ],
        "summary": "Get accountdetail count",
        "operationId": "getaccountdetailCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountdetail/groupby/{columnName}": {
      "get": {
        "tags": [
          "accountdetail"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "accountdetailGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/accountdetail"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountdetail/distribution/{columnName}": {
      "get": {
        "tags": [
          "accountdetail"
        ],
        "summary": "",
        "description": "",
        "operationId": "accountdetailDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountdetail/distinct/{columnName}": {
      "get": {
        "tags": [
          "accountdetail"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "accountdetailDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountdetail/aggregate/{columnName}": {
      "get": {
        "tags": [
          "accountdetail"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "accountdetailAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/accountdetail"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountdetailNee": {
      "post": {
        "tags": [
          "accountdetailNee"
        ],
        "summary": "Add a new accountdetailNee",
        "description": "",
        "operationId": "addaccountdetailNee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "accountdetailNee object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountdetailNee"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "accountdetailNee"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getaccountdetailNee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountdetailNee/{accountdetailNeeId}": {
      "get": {
        "tags": [
          "accountdetailNee"
        ],
        "summary": "Find accountdetailNee by ID",
        "description": "Returns a single accountdetailNee",
        "operationId": "getaccountdetailNeeById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountdetailNeeId",
            "in": "path",
            "description": "ID of accountdetailNee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/accountdetailNee"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "accountdetailNee not found"
          }
        }
      },
      "put": {
        "tags": [
          "accountdetailNee"
        ],
        "summary": "Updates a accountdetailNee",
        "description": "",
        "operationId": "updateaccountdetailNee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountdetailNeeId",
            "in": "path",
            "description": "ID of accountdetailNee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "accountdetailNee object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountdetailNee"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "accountdetailNee"
        ],
        "summary": "Deletes a accountdetailNee",
        "description": "",
        "operationId": "deleteaccountdetailNee",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountdetailNeeId",
            "in": "path",
            "description": "ID of accountdetailNee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "accountdetailNee not found"
          }
        }
      }
    },
    "/api/v1/accountdetailNee/bulk": {
      "post": {
        "tags": [
          "accountdetailNee"
        ],
        "summary": "Bulk accountdetailNee insert",
        "description": "",
        "operationId": "bulkaccountdetailNeeInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "accountdetailNee objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accountdetailNee"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "accountdetailNee"
        ],
        "summary": "Updates a accountdetailNee",
        "description": "",
        "operationId": "updateaccountdetailNee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "accountdetailNee objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accountdetailNee"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "accountdetailNee"
        ],
        "summary": "Deletes a accountdetailNee",
        "description": "",
        "operationId": "deleteaccountdetailNee",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "accountdetailNee objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accountdetailNee"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "accountdetailNee not found"
          }
        }
      }
    },
    "/api/v1/accountdetailNee/findOne": {
      "get": {
        "tags": [
          "accountdetailNee"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneaccountdetailNee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/accountdetailNee"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountdetailNee/{accountdetailNeeId}/exists": {
      "get": {
        "tags": [
          "accountdetailNee"
        ],
        "summary": "Check accountdetailNee with provided ID exists",
        "description": "Returns a single accountdetailNee",
        "operationId": "checkaccountdetailNeeExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountdetailNeeId",
            "in": "path",
            "description": "ID of accountdetailNee",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/accountdetailNee/count": {
      "get": {
        "tags": [
          "accountdetailNee"
        ],
        "summary": "Get accountdetailNee count",
        "operationId": "getaccountdetailNeeCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountdetailNee/groupby/{columnName}": {
      "get": {
        "tags": [
          "accountdetailNee"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "accountdetailNeeGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/accountdetailNee"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountdetailNee/distribution/{columnName}": {
      "get": {
        "tags": [
          "accountdetailNee"
        ],
        "summary": "",
        "description": "",
        "operationId": "accountdetailNeeDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountdetailNee/distinct/{columnName}": {
      "get": {
        "tags": [
          "accountdetailNee"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "accountdetailNeeDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountdetailNee/aggregate/{columnName}": {
      "get": {
        "tags": [
          "accountdetailNee"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "accountdetailNeeAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/accountdetailNee"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountNee": {
      "post": {
        "tags": [
          "accountNee"
        ],
        "summary": "Add a new accountNee",
        "description": "",
        "operationId": "addaccountNee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "accountNee object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountNee"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "accountNee"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getaccountNee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountNee/{accountNeeId}": {
      "get": {
        "tags": [
          "accountNee"
        ],
        "summary": "Find accountNee by ID",
        "description": "Returns a single accountNee",
        "operationId": "getaccountNeeById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountNeeId",
            "in": "path",
            "description": "ID of accountNee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/accountNee"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "accountNee not found"
          }
        }
      },
      "put": {
        "tags": [
          "accountNee"
        ],
        "summary": "Updates a accountNee",
        "description": "",
        "operationId": "updateaccountNee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountNeeId",
            "in": "path",
            "description": "ID of accountNee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "accountNee object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountNee"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "accountNee"
        ],
        "summary": "Deletes a accountNee",
        "description": "",
        "operationId": "deleteaccountNee",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountNeeId",
            "in": "path",
            "description": "ID of accountNee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "accountNee not found"
          }
        }
      }
    },
    "/api/v1/accountNee/bulk": {
      "post": {
        "tags": [
          "accountNee"
        ],
        "summary": "Bulk accountNee insert",
        "description": "",
        "operationId": "bulkaccountNeeInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "accountNee objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accountNee"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "accountNee"
        ],
        "summary": "Updates a accountNee",
        "description": "",
        "operationId": "updateaccountNee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "accountNee objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accountNee"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "accountNee"
        ],
        "summary": "Deletes a accountNee",
        "description": "",
        "operationId": "deleteaccountNee",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "accountNee objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accountNee"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "accountNee not found"
          }
        }
      }
    },
    "/api/v1/accountNee/findOne": {
      "get": {
        "tags": [
          "accountNee"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneaccountNee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/accountNee"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountNee/{accountNeeId}/exists": {
      "get": {
        "tags": [
          "accountNee"
        ],
        "summary": "Check accountNee with provided ID exists",
        "description": "Returns a single accountNee",
        "operationId": "checkaccountNeeExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountNeeId",
            "in": "path",
            "description": "ID of accountNee",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/accountNee/count": {
      "get": {
        "tags": [
          "accountNee"
        ],
        "summary": "Get accountNee count",
        "operationId": "getaccountNeeCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountNee/groupby/{columnName}": {
      "get": {
        "tags": [
          "accountNee"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "accountNeeGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/accountNee"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountNee/distribution/{columnName}": {
      "get": {
        "tags": [
          "accountNee"
        ],
        "summary": "",
        "description": "",
        "operationId": "accountNeeDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountNee/distinct/{columnName}": {
      "get": {
        "tags": [
          "accountNee"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "accountNeeDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountNee/aggregate/{columnName}": {
      "get": {
        "tags": [
          "accountNee"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "accountNeeAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/accountNee"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountrec": {
      "post": {
        "tags": [
          "accountrec"
        ],
        "summary": "Add a new accountrec",
        "description": "",
        "operationId": "addaccountrec",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "accountrec object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountrec"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "accountrec"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getaccountrec",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountrec/{accountrecId}": {
      "get": {
        "tags": [
          "accountrec"
        ],
        "summary": "Find accountrec by ID",
        "description": "Returns a single accountrec",
        "operationId": "getaccountrecById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountrecId",
            "in": "path",
            "description": "ID of accountrec to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/accountrec"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "accountrec not found"
          }
        }
      },
      "put": {
        "tags": [
          "accountrec"
        ],
        "summary": "Updates a accountrec",
        "description": "",
        "operationId": "updateaccountrec",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountrecId",
            "in": "path",
            "description": "ID of accountrec to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "accountrec object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountrec"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "accountrec"
        ],
        "summary": "Deletes a accountrec",
        "description": "",
        "operationId": "deleteaccountrec",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountrecId",
            "in": "path",
            "description": "ID of accountrec to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "accountrec not found"
          }
        }
      }
    },
    "/api/v1/accountrec/bulk": {
      "post": {
        "tags": [
          "accountrec"
        ],
        "summary": "Bulk accountrec insert",
        "description": "",
        "operationId": "bulkaccountrecInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "accountrec objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accountrec"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "accountrec"
        ],
        "summary": "Updates a accountrec",
        "description": "",
        "operationId": "updateaccountrec",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "accountrec objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accountrec"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "accountrec"
        ],
        "summary": "Deletes a accountrec",
        "description": "",
        "operationId": "deleteaccountrec",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "accountrec objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accountrec"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "accountrec not found"
          }
        }
      }
    },
    "/api/v1/accountrec/findOne": {
      "get": {
        "tags": [
          "accountrec"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneaccountrec",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/accountrec"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountrec/{accountrecId}/exists": {
      "get": {
        "tags": [
          "accountrec"
        ],
        "summary": "Check accountrec with provided ID exists",
        "description": "Returns a single accountrec",
        "operationId": "checkaccountrecExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountrecId",
            "in": "path",
            "description": "ID of accountrec",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/accountrec/count": {
      "get": {
        "tags": [
          "accountrec"
        ],
        "summary": "Get accountrec count",
        "operationId": "getaccountrecCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountrec/groupby/{columnName}": {
      "get": {
        "tags": [
          "accountrec"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "accountrecGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/accountrec"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountrec/distribution/{columnName}": {
      "get": {
        "tags": [
          "accountrec"
        ],
        "summary": "",
        "description": "",
        "operationId": "accountrecDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountrec/distinct/{columnName}": {
      "get": {
        "tags": [
          "accountrec"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "accountrecDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/accountrec/aggregate/{columnName}": {
      "get": {
        "tags": [
          "accountrec"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "accountrecAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/accountrec"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/adminlog": {
      "post": {
        "tags": [
          "adminlog"
        ],
        "summary": "Add a new adminlog",
        "description": "",
        "operationId": "addadminlog",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "adminlog object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/adminlog"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "adminlog"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getadminlog",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/adminlog/{adminlogId}": {
      "get": {
        "tags": [
          "adminlog"
        ],
        "summary": "Find adminlog by ID",
        "description": "Returns a single adminlog",
        "operationId": "getadminlogById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "adminlogId",
            "in": "path",
            "description": "ID of adminlog to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/adminlog"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "adminlog not found"
          }
        }
      },
      "put": {
        "tags": [
          "adminlog"
        ],
        "summary": "Updates a adminlog",
        "description": "",
        "operationId": "updateadminlog",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "adminlogId",
            "in": "path",
            "description": "ID of adminlog to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "adminlog object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/adminlog"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "adminlog"
        ],
        "summary": "Deletes a adminlog",
        "description": "",
        "operationId": "deleteadminlog",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "adminlogId",
            "in": "path",
            "description": "ID of adminlog to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "adminlog not found"
          }
        }
      }
    },
    "/api/v1/adminlog/bulk": {
      "post": {
        "tags": [
          "adminlog"
        ],
        "summary": "Bulk adminlog insert",
        "description": "",
        "operationId": "bulkadminlogInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "adminlog objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/adminlog"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "adminlog"
        ],
        "summary": "Updates a adminlog",
        "description": "",
        "operationId": "updateadminlog",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "adminlog objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/adminlog"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "adminlog"
        ],
        "summary": "Deletes a adminlog",
        "description": "",
        "operationId": "deleteadminlog",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "adminlog objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/adminlog"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "adminlog not found"
          }
        }
      }
    },
    "/api/v1/adminlog/findOne": {
      "get": {
        "tags": [
          "adminlog"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneadminlog",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/adminlog"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/adminlog/{adminlogId}/exists": {
      "get": {
        "tags": [
          "adminlog"
        ],
        "summary": "Check adminlog with provided ID exists",
        "description": "Returns a single adminlog",
        "operationId": "checkadminlogExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "adminlogId",
            "in": "path",
            "description": "ID of adminlog",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/adminlog/count": {
      "get": {
        "tags": [
          "adminlog"
        ],
        "summary": "Get adminlog count",
        "operationId": "getadminlogCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/adminlog/groupby/{columnName}": {
      "get": {
        "tags": [
          "adminlog"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "adminlogGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/adminlog"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/adminlog/distribution/{columnName}": {
      "get": {
        "tags": [
          "adminlog"
        ],
        "summary": "",
        "description": "",
        "operationId": "adminlogDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/adminlog/distinct/{columnName}": {
      "get": {
        "tags": [
          "adminlog"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "adminlogDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/adminlog/aggregate/{columnName}": {
      "get": {
        "tags": [
          "adminlog"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "adminlogAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/adminlog"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/amphur": {
      "post": {
        "tags": [
          "amphur"
        ],
        "summary": "Add a new amphur",
        "description": "",
        "operationId": "addamphur",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "amphur object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/amphur"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "amphur"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getamphur",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/amphur/{amphurId}": {
      "get": {
        "tags": [
          "amphur"
        ],
        "summary": "Find amphur by ID",
        "description": "Returns a single amphur",
        "operationId": "getamphurById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "amphurId",
            "in": "path",
            "description": "ID of amphur to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/amphur"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "amphur not found"
          }
        }
      },
      "put": {
        "tags": [
          "amphur"
        ],
        "summary": "Updates a amphur",
        "description": "",
        "operationId": "updateamphur",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "amphurId",
            "in": "path",
            "description": "ID of amphur to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "amphur object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/amphur"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "amphur"
        ],
        "summary": "Deletes a amphur",
        "description": "",
        "operationId": "deleteamphur",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "amphurId",
            "in": "path",
            "description": "ID of amphur to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "amphur not found"
          }
        }
      }
    },
    "/api/v1/amphur/bulk": {
      "post": {
        "tags": [
          "amphur"
        ],
        "summary": "Bulk amphur insert",
        "description": "",
        "operationId": "bulkamphurInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "amphur objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/amphur"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "amphur"
        ],
        "summary": "Updates a amphur",
        "description": "",
        "operationId": "updateamphur",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "amphur objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/amphur"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "amphur"
        ],
        "summary": "Deletes a amphur",
        "description": "",
        "operationId": "deleteamphur",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "amphur objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/amphur"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "amphur not found"
          }
        }
      }
    },
    "/api/v1/amphur/findOne": {
      "get": {
        "tags": [
          "amphur"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneamphur",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/amphur"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/amphur/{amphurId}/exists": {
      "get": {
        "tags": [
          "amphur"
        ],
        "summary": "Check amphur with provided ID exists",
        "description": "Returns a single amphur",
        "operationId": "checkamphurExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "amphurId",
            "in": "path",
            "description": "ID of amphur",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/amphur/count": {
      "get": {
        "tags": [
          "amphur"
        ],
        "summary": "Get amphur count",
        "operationId": "getamphurCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/amphur/groupby/{columnName}": {
      "get": {
        "tags": [
          "amphur"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "amphurGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/amphur"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/amphur/distribution/{columnName}": {
      "get": {
        "tags": [
          "amphur"
        ],
        "summary": "",
        "description": "",
        "operationId": "amphurDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/amphur/distinct/{columnName}": {
      "get": {
        "tags": [
          "amphur"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "amphurDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/amphur/aggregate/{columnName}": {
      "get": {
        "tags": [
          "amphur"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "amphurAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/amphur"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ban": {
      "post": {
        "tags": [
          "ban"
        ],
        "summary": "Add a new ban",
        "description": "",
        "operationId": "addban",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ban object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ban"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "ban"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getban",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ban/{banId}": {
      "get": {
        "tags": [
          "ban"
        ],
        "summary": "Find ban by ID",
        "description": "Returns a single ban",
        "operationId": "getbanById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "banId",
            "in": "path",
            "description": "ID of ban to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ban"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ban not found"
          }
        }
      },
      "put": {
        "tags": [
          "ban"
        ],
        "summary": "Updates a ban",
        "description": "",
        "operationId": "updateban",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "banId",
            "in": "path",
            "description": "ID of ban to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "ban object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ban"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "ban"
        ],
        "summary": "Deletes a ban",
        "description": "",
        "operationId": "deleteban",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "banId",
            "in": "path",
            "description": "ID of ban to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ban not found"
          }
        }
      }
    },
    "/api/v1/ban/bulk": {
      "post": {
        "tags": [
          "ban"
        ],
        "summary": "Bulk ban insert",
        "description": "",
        "operationId": "bulkbanInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ban objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ban"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "ban"
        ],
        "summary": "Updates a ban",
        "description": "",
        "operationId": "updateban",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ban objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ban"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "ban"
        ],
        "summary": "Deletes a ban",
        "description": "",
        "operationId": "deleteban",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ban objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ban"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ban not found"
          }
        }
      }
    },
    "/api/v1/ban/findOne": {
      "get": {
        "tags": [
          "ban"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneban",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ban"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ban/{banId}/exists": {
      "get": {
        "tags": [
          "ban"
        ],
        "summary": "Check ban with provided ID exists",
        "description": "Returns a single ban",
        "operationId": "checkbanExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "banId",
            "in": "path",
            "description": "ID of ban",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/ban/count": {
      "get": {
        "tags": [
          "ban"
        ],
        "summary": "Get ban count",
        "operationId": "getbanCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ban/groupby/{columnName}": {
      "get": {
        "tags": [
          "ban"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "banGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ban"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ban/distribution/{columnName}": {
      "get": {
        "tags": [
          "ban"
        ],
        "summary": "",
        "description": "",
        "operationId": "banDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ban/distinct/{columnName}": {
      "get": {
        "tags": [
          "ban"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "banDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ban/aggregate/{columnName}": {
      "get": {
        "tags": [
          "ban"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "banAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ban"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bank_name": {
      "post": {
        "tags": [
          "bank_name"
        ],
        "summary": "Add a new bank_name",
        "description": "",
        "operationId": "addbank_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "bank_name object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bank_name"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "bank_name"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getbank_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bank_name/{bank_nameId}": {
      "get": {
        "tags": [
          "bank_name"
        ],
        "summary": "Find bank_name by ID",
        "description": "Returns a single bank_name",
        "operationId": "getbank_nameById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bank_nameId",
            "in": "path",
            "description": "ID of bank_name to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/bank_name"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "bank_name not found"
          }
        }
      },
      "put": {
        "tags": [
          "bank_name"
        ],
        "summary": "Updates a bank_name",
        "description": "",
        "operationId": "updatebank_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bank_nameId",
            "in": "path",
            "description": "ID of bank_name to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "bank_name object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bank_name"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "bank_name"
        ],
        "summary": "Deletes a bank_name",
        "description": "",
        "operationId": "deletebank_name",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bank_nameId",
            "in": "path",
            "description": "ID of bank_name to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "bank_name not found"
          }
        }
      }
    },
    "/api/v1/bank_name/bulk": {
      "post": {
        "tags": [
          "bank_name"
        ],
        "summary": "Bulk bank_name insert",
        "description": "",
        "operationId": "bulkbank_nameInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "bank_name objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bank_name"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "bank_name"
        ],
        "summary": "Updates a bank_name",
        "description": "",
        "operationId": "updatebank_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "bank_name objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bank_name"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "bank_name"
        ],
        "summary": "Deletes a bank_name",
        "description": "",
        "operationId": "deletebank_name",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "bank_name objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bank_name"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "bank_name not found"
          }
        }
      }
    },
    "/api/v1/bank_name/findOne": {
      "get": {
        "tags": [
          "bank_name"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnebank_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/bank_name"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bank_name/{bank_nameId}/exists": {
      "get": {
        "tags": [
          "bank_name"
        ],
        "summary": "Check bank_name with provided ID exists",
        "description": "Returns a single bank_name",
        "operationId": "checkbank_nameExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bank_nameId",
            "in": "path",
            "description": "ID of bank_name",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/bank_name/count": {
      "get": {
        "tags": [
          "bank_name"
        ],
        "summary": "Get bank_name count",
        "operationId": "getbank_nameCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bank_name/groupby/{columnName}": {
      "get": {
        "tags": [
          "bank_name"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "bank_nameGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/bank_name"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bank_name/distribution/{columnName}": {
      "get": {
        "tags": [
          "bank_name"
        ],
        "summary": "",
        "description": "",
        "operationId": "bank_nameDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bank_name/distinct/{columnName}": {
      "get": {
        "tags": [
          "bank_name"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "bank_nameDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bank_name/aggregate/{columnName}": {
      "get": {
        "tags": [
          "bank_name"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "bank_nameAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/bank_name"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bill_Group": {
      "post": {
        "tags": [
          "bill_Group"
        ],
        "summary": "Add a new bill_Group",
        "description": "",
        "operationId": "addbill_Group",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "bill_Group object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bill_Group"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "bill_Group"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getbill_Group",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bill_Group/{bill_GroupId}": {
      "get": {
        "tags": [
          "bill_Group"
        ],
        "summary": "Find bill_Group by ID",
        "description": "Returns a single bill_Group",
        "operationId": "getbill_GroupById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bill_GroupId",
            "in": "path",
            "description": "ID of bill_Group to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/bill_Group"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "bill_Group not found"
          }
        }
      },
      "put": {
        "tags": [
          "bill_Group"
        ],
        "summary": "Updates a bill_Group",
        "description": "",
        "operationId": "updatebill_Group",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bill_GroupId",
            "in": "path",
            "description": "ID of bill_Group to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "bill_Group object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bill_Group"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "bill_Group"
        ],
        "summary": "Deletes a bill_Group",
        "description": "",
        "operationId": "deletebill_Group",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bill_GroupId",
            "in": "path",
            "description": "ID of bill_Group to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "bill_Group not found"
          }
        }
      }
    },
    "/api/v1/bill_Group/bulk": {
      "post": {
        "tags": [
          "bill_Group"
        ],
        "summary": "Bulk bill_Group insert",
        "description": "",
        "operationId": "bulkbill_GroupInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "bill_Group objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bill_Group"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "bill_Group"
        ],
        "summary": "Updates a bill_Group",
        "description": "",
        "operationId": "updatebill_Group",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "bill_Group objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bill_Group"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "bill_Group"
        ],
        "summary": "Deletes a bill_Group",
        "description": "",
        "operationId": "deletebill_Group",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "bill_Group objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bill_Group"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "bill_Group not found"
          }
        }
      }
    },
    "/api/v1/bill_Group/findOne": {
      "get": {
        "tags": [
          "bill_Group"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnebill_Group",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/bill_Group"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bill_Group/{bill_GroupId}/exists": {
      "get": {
        "tags": [
          "bill_Group"
        ],
        "summary": "Check bill_Group with provided ID exists",
        "description": "Returns a single bill_Group",
        "operationId": "checkbill_GroupExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bill_GroupId",
            "in": "path",
            "description": "ID of bill_Group",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/bill_Group/count": {
      "get": {
        "tags": [
          "bill_Group"
        ],
        "summary": "Get bill_Group count",
        "operationId": "getbill_GroupCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bill_Group/groupby/{columnName}": {
      "get": {
        "tags": [
          "bill_Group"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "bill_GroupGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/bill_Group"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bill_Group/distribution/{columnName}": {
      "get": {
        "tags": [
          "bill_Group"
        ],
        "summary": "",
        "description": "",
        "operationId": "bill_GroupDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bill_Group/distinct/{columnName}": {
      "get": {
        "tags": [
          "bill_Group"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "bill_GroupDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bill_Group/aggregate/{columnName}": {
      "get": {
        "tags": [
          "bill_Group"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "bill_GroupAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/bill_Group"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bill_update": {
      "post": {
        "tags": [
          "bill_update"
        ],
        "summary": "Add a new bill_update",
        "description": "",
        "operationId": "addbill_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "bill_update object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bill_update"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "bill_update"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getbill_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bill_update/{bill_updateId}": {
      "get": {
        "tags": [
          "bill_update"
        ],
        "summary": "Find bill_update by ID",
        "description": "Returns a single bill_update",
        "operationId": "getbill_updateById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bill_updateId",
            "in": "path",
            "description": "ID of bill_update to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/bill_update"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "bill_update not found"
          }
        }
      },
      "put": {
        "tags": [
          "bill_update"
        ],
        "summary": "Updates a bill_update",
        "description": "",
        "operationId": "updatebill_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bill_updateId",
            "in": "path",
            "description": "ID of bill_update to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "bill_update object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bill_update"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "bill_update"
        ],
        "summary": "Deletes a bill_update",
        "description": "",
        "operationId": "deletebill_update",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bill_updateId",
            "in": "path",
            "description": "ID of bill_update to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "bill_update not found"
          }
        }
      }
    },
    "/api/v1/bill_update/bulk": {
      "post": {
        "tags": [
          "bill_update"
        ],
        "summary": "Bulk bill_update insert",
        "description": "",
        "operationId": "bulkbill_updateInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "bill_update objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bill_update"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "bill_update"
        ],
        "summary": "Updates a bill_update",
        "description": "",
        "operationId": "updatebill_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "bill_update objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bill_update"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "bill_update"
        ],
        "summary": "Deletes a bill_update",
        "description": "",
        "operationId": "deletebill_update",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "bill_update objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bill_update"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "bill_update not found"
          }
        }
      }
    },
    "/api/v1/bill_update/findOne": {
      "get": {
        "tags": [
          "bill_update"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnebill_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/bill_update"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bill_update/{bill_updateId}/exists": {
      "get": {
        "tags": [
          "bill_update"
        ],
        "summary": "Check bill_update with provided ID exists",
        "description": "Returns a single bill_update",
        "operationId": "checkbill_updateExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bill_updateId",
            "in": "path",
            "description": "ID of bill_update",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/bill_update/count": {
      "get": {
        "tags": [
          "bill_update"
        ],
        "summary": "Get bill_update count",
        "operationId": "getbill_updateCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bill_update/groupby/{columnName}": {
      "get": {
        "tags": [
          "bill_update"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "bill_updateGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/bill_update"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bill_update/distribution/{columnName}": {
      "get": {
        "tags": [
          "bill_update"
        ],
        "summary": "",
        "description": "",
        "operationId": "bill_updateDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bill_update/distinct/{columnName}": {
      "get": {
        "tags": [
          "bill_update"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "bill_updateDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/bill_update/aggregate/{columnName}": {
      "get": {
        "tags": [
          "bill_update"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "bill_updateAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/bill_update"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cause": {
      "post": {
        "tags": [
          "cause"
        ],
        "summary": "Add a new cause",
        "description": "",
        "operationId": "addcause",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "cause object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cause"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "cause"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getcause",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cause/{causeId}": {
      "get": {
        "tags": [
          "cause"
        ],
        "summary": "Find cause by ID",
        "description": "Returns a single cause",
        "operationId": "getcauseById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "causeId",
            "in": "path",
            "description": "ID of cause to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/cause"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "cause not found"
          }
        }
      },
      "put": {
        "tags": [
          "cause"
        ],
        "summary": "Updates a cause",
        "description": "",
        "operationId": "updatecause",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "causeId",
            "in": "path",
            "description": "ID of cause to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "cause object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cause"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "cause"
        ],
        "summary": "Deletes a cause",
        "description": "",
        "operationId": "deletecause",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "causeId",
            "in": "path",
            "description": "ID of cause to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "cause not found"
          }
        }
      }
    },
    "/api/v1/cause/bulk": {
      "post": {
        "tags": [
          "cause"
        ],
        "summary": "Bulk cause insert",
        "description": "",
        "operationId": "bulkcauseInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "cause objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cause"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "cause"
        ],
        "summary": "Updates a cause",
        "description": "",
        "operationId": "updatecause",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "cause objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cause"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "cause"
        ],
        "summary": "Deletes a cause",
        "description": "",
        "operationId": "deletecause",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "cause objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cause"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "cause not found"
          }
        }
      }
    },
    "/api/v1/cause/findOne": {
      "get": {
        "tags": [
          "cause"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnecause",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/cause"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cause/{causeId}/exists": {
      "get": {
        "tags": [
          "cause"
        ],
        "summary": "Check cause with provided ID exists",
        "description": "Returns a single cause",
        "operationId": "checkcauseExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "causeId",
            "in": "path",
            "description": "ID of cause",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/cause/count": {
      "get": {
        "tags": [
          "cause"
        ],
        "summary": "Get cause count",
        "operationId": "getcauseCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cause/groupby/{columnName}": {
      "get": {
        "tags": [
          "cause"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "causeGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/cause"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cause/distribution/{columnName}": {
      "get": {
        "tags": [
          "cause"
        ],
        "summary": "",
        "description": "",
        "operationId": "causeDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cause/distinct/{columnName}": {
      "get": {
        "tags": [
          "cause"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "causeDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cause/aggregate/{columnName}": {
      "get": {
        "tags": [
          "cause"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "causeAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/cause"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cause1": {
      "post": {
        "tags": [
          "cause1"
        ],
        "summary": "Add a new cause1",
        "description": "",
        "operationId": "addcause1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "cause1 object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cause1"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "cause1"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getcause1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cause1/{cause1Id}": {
      "get": {
        "tags": [
          "cause1"
        ],
        "summary": "Find cause1 by ID",
        "description": "Returns a single cause1",
        "operationId": "getcause1ById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cause1Id",
            "in": "path",
            "description": "ID of cause1 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/cause1"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "cause1 not found"
          }
        }
      },
      "put": {
        "tags": [
          "cause1"
        ],
        "summary": "Updates a cause1",
        "description": "",
        "operationId": "updatecause1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cause1Id",
            "in": "path",
            "description": "ID of cause1 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "cause1 object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cause1"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "cause1"
        ],
        "summary": "Deletes a cause1",
        "description": "",
        "operationId": "deletecause1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cause1Id",
            "in": "path",
            "description": "ID of cause1 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "cause1 not found"
          }
        }
      }
    },
    "/api/v1/cause1/bulk": {
      "post": {
        "tags": [
          "cause1"
        ],
        "summary": "Bulk cause1 insert",
        "description": "",
        "operationId": "bulkcause1Insert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "cause1 objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cause1"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "cause1"
        ],
        "summary": "Updates a cause1",
        "description": "",
        "operationId": "updatecause1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "cause1 objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cause1"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "cause1"
        ],
        "summary": "Deletes a cause1",
        "description": "",
        "operationId": "deletecause1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "cause1 objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cause1"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "cause1 not found"
          }
        }
      }
    },
    "/api/v1/cause1/findOne": {
      "get": {
        "tags": [
          "cause1"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnecause1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/cause1"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cause1/{cause1Id}/exists": {
      "get": {
        "tags": [
          "cause1"
        ],
        "summary": "Check cause1 with provided ID exists",
        "description": "Returns a single cause1",
        "operationId": "checkcause1Exists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cause1Id",
            "in": "path",
            "description": "ID of cause1",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/cause1/count": {
      "get": {
        "tags": [
          "cause1"
        ],
        "summary": "Get cause1 count",
        "operationId": "getcause1Count",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cause1/groupby/{columnName}": {
      "get": {
        "tags": [
          "cause1"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "cause1GroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/cause1"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cause1/distribution/{columnName}": {
      "get": {
        "tags": [
          "cause1"
        ],
        "summary": "",
        "description": "",
        "operationId": "cause1Distribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cause1/distinct/{columnName}": {
      "get": {
        "tags": [
          "cause1"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "cause1Distinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/cause1/aggregate/{columnName}": {
      "get": {
        "tags": [
          "cause1"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "cause1Aggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/cause1"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/chang_name": {
      "post": {
        "tags": [
          "chang_name"
        ],
        "summary": "Add a new chang_name",
        "description": "",
        "operationId": "addchang_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "chang_name object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chang_name"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "chang_name"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getchang_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/chang_name/{chang_nameId}": {
      "get": {
        "tags": [
          "chang_name"
        ],
        "summary": "Find chang_name by ID",
        "description": "Returns a single chang_name",
        "operationId": "getchang_nameById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "chang_nameId",
            "in": "path",
            "description": "ID of chang_name to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/chang_name"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "chang_name not found"
          }
        }
      },
      "put": {
        "tags": [
          "chang_name"
        ],
        "summary": "Updates a chang_name",
        "description": "",
        "operationId": "updatechang_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "chang_nameId",
            "in": "path",
            "description": "ID of chang_name to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "chang_name object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chang_name"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "chang_name"
        ],
        "summary": "Deletes a chang_name",
        "description": "",
        "operationId": "deletechang_name",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "chang_nameId",
            "in": "path",
            "description": "ID of chang_name to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "chang_name not found"
          }
        }
      }
    },
    "/api/v1/chang_name/bulk": {
      "post": {
        "tags": [
          "chang_name"
        ],
        "summary": "Bulk chang_name insert",
        "description": "",
        "operationId": "bulkchang_nameInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "chang_name objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/chang_name"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "chang_name"
        ],
        "summary": "Updates a chang_name",
        "description": "",
        "operationId": "updatechang_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "chang_name objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/chang_name"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "chang_name"
        ],
        "summary": "Deletes a chang_name",
        "description": "",
        "operationId": "deletechang_name",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "chang_name objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/chang_name"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "chang_name not found"
          }
        }
      }
    },
    "/api/v1/chang_name/findOne": {
      "get": {
        "tags": [
          "chang_name"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnechang_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/chang_name"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/chang_name/{chang_nameId}/exists": {
      "get": {
        "tags": [
          "chang_name"
        ],
        "summary": "Check chang_name with provided ID exists",
        "description": "Returns a single chang_name",
        "operationId": "checkchang_nameExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "chang_nameId",
            "in": "path",
            "description": "ID of chang_name",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/chang_name/count": {
      "get": {
        "tags": [
          "chang_name"
        ],
        "summary": "Get chang_name count",
        "operationId": "getchang_nameCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/chang_name/groupby/{columnName}": {
      "get": {
        "tags": [
          "chang_name"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "chang_nameGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/chang_name"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/chang_name/distribution/{columnName}": {
      "get": {
        "tags": [
          "chang_name"
        ],
        "summary": "",
        "description": "",
        "operationId": "chang_nameDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/chang_name/distinct/{columnName}": {
      "get": {
        "tags": [
          "chang_name"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "chang_nameDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/chang_name/aggregate/{columnName}": {
      "get": {
        "tags": [
          "chang_name"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "chang_nameAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/chang_name"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/date_present": {
      "post": {
        "tags": [
          "date_present"
        ],
        "summary": "Add a new date_present",
        "description": "",
        "operationId": "adddate_present",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "date_present object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/date_present"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "date_present"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getdate_present",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/date_present/{date_presentId}": {
      "get": {
        "tags": [
          "date_present"
        ],
        "summary": "Find date_present by ID",
        "description": "Returns a single date_present",
        "operationId": "getdate_presentById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "date_presentId",
            "in": "path",
            "description": "ID of date_present to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/date_present"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "date_present not found"
          }
        }
      },
      "put": {
        "tags": [
          "date_present"
        ],
        "summary": "Updates a date_present",
        "description": "",
        "operationId": "updatedate_present",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "date_presentId",
            "in": "path",
            "description": "ID of date_present to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "date_present object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/date_present"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "date_present"
        ],
        "summary": "Deletes a date_present",
        "description": "",
        "operationId": "deletedate_present",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "date_presentId",
            "in": "path",
            "description": "ID of date_present to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "date_present not found"
          }
        }
      }
    },
    "/api/v1/date_present/bulk": {
      "post": {
        "tags": [
          "date_present"
        ],
        "summary": "Bulk date_present insert",
        "description": "",
        "operationId": "bulkdate_presentInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "date_present objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/date_present"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "date_present"
        ],
        "summary": "Updates a date_present",
        "description": "",
        "operationId": "updatedate_present",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "date_present objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/date_present"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "date_present"
        ],
        "summary": "Deletes a date_present",
        "description": "",
        "operationId": "deletedate_present",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "date_present objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/date_present"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "date_present not found"
          }
        }
      }
    },
    "/api/v1/date_present/findOne": {
      "get": {
        "tags": [
          "date_present"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnedate_present",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/date_present"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/date_present/{date_presentId}/exists": {
      "get": {
        "tags": [
          "date_present"
        ],
        "summary": "Check date_present with provided ID exists",
        "description": "Returns a single date_present",
        "operationId": "checkdate_presentExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "date_presentId",
            "in": "path",
            "description": "ID of date_present",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/date_present/count": {
      "get": {
        "tags": [
          "date_present"
        ],
        "summary": "Get date_present count",
        "operationId": "getdate_presentCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/date_present/groupby/{columnName}": {
      "get": {
        "tags": [
          "date_present"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "date_presentGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/date_present"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/date_present/distribution/{columnName}": {
      "get": {
        "tags": [
          "date_present"
        ],
        "summary": "",
        "description": "",
        "operationId": "date_presentDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/date_present/distinct/{columnName}": {
      "get": {
        "tags": [
          "date_present"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "date_presentDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/date_present/aggregate/{columnName}": {
      "get": {
        "tags": [
          "date_present"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "date_presentAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/date_present"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/detail_name": {
      "post": {
        "tags": [
          "detail_name"
        ],
        "summary": "Add a new detail_name",
        "description": "",
        "operationId": "adddetail_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "detail_name object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/detail_name"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "detail_name"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getdetail_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/detail_name/{detail_nameId}": {
      "get": {
        "tags": [
          "detail_name"
        ],
        "summary": "Find detail_name by ID",
        "description": "Returns a single detail_name",
        "operationId": "getdetail_nameById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "detail_nameId",
            "in": "path",
            "description": "ID of detail_name to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/detail_name"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "detail_name not found"
          }
        }
      },
      "put": {
        "tags": [
          "detail_name"
        ],
        "summary": "Updates a detail_name",
        "description": "",
        "operationId": "updatedetail_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "detail_nameId",
            "in": "path",
            "description": "ID of detail_name to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "detail_name object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/detail_name"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "detail_name"
        ],
        "summary": "Deletes a detail_name",
        "description": "",
        "operationId": "deletedetail_name",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "detail_nameId",
            "in": "path",
            "description": "ID of detail_name to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "detail_name not found"
          }
        }
      }
    },
    "/api/v1/detail_name/bulk": {
      "post": {
        "tags": [
          "detail_name"
        ],
        "summary": "Bulk detail_name insert",
        "description": "",
        "operationId": "bulkdetail_nameInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "detail_name objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/detail_name"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "detail_name"
        ],
        "summary": "Updates a detail_name",
        "description": "",
        "operationId": "updatedetail_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "detail_name objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/detail_name"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "detail_name"
        ],
        "summary": "Deletes a detail_name",
        "description": "",
        "operationId": "deletedetail_name",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "detail_name objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/detail_name"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "detail_name not found"
          }
        }
      }
    },
    "/api/v1/detail_name/findOne": {
      "get": {
        "tags": [
          "detail_name"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnedetail_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/detail_name"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/detail_name/{detail_nameId}/exists": {
      "get": {
        "tags": [
          "detail_name"
        ],
        "summary": "Check detail_name with provided ID exists",
        "description": "Returns a single detail_name",
        "operationId": "checkdetail_nameExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "detail_nameId",
            "in": "path",
            "description": "ID of detail_name",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/detail_name/count": {
      "get": {
        "tags": [
          "detail_name"
        ],
        "summary": "Get detail_name count",
        "operationId": "getdetail_nameCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/detail_name/groupby/{columnName}": {
      "get": {
        "tags": [
          "detail_name"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "detail_nameGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/detail_name"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/detail_name/distribution/{columnName}": {
      "get": {
        "tags": [
          "detail_name"
        ],
        "summary": "",
        "description": "",
        "operationId": "detail_nameDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/detail_name/distinct/{columnName}": {
      "get": {
        "tags": [
          "detail_name"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "detail_nameDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/detail_name/aggregate/{columnName}": {
      "get": {
        "tags": [
          "detail_name"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "detail_nameAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/detail_name"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/detail_pay": {
      "post": {
        "tags": [
          "detail_pay"
        ],
        "summary": "Add a new detail_pay",
        "description": "",
        "operationId": "adddetail_pay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "detail_pay object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/detail_pay"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "detail_pay"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getdetail_pay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/detail_pay/{detail_payId}": {
      "get": {
        "tags": [
          "detail_pay"
        ],
        "summary": "Find detail_pay by ID",
        "description": "Returns a single detail_pay",
        "operationId": "getdetail_payById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "detail_payId",
            "in": "path",
            "description": "ID of detail_pay to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/detail_pay"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "detail_pay not found"
          }
        }
      },
      "put": {
        "tags": [
          "detail_pay"
        ],
        "summary": "Updates a detail_pay",
        "description": "",
        "operationId": "updatedetail_pay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "detail_payId",
            "in": "path",
            "description": "ID of detail_pay to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "detail_pay object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/detail_pay"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "detail_pay"
        ],
        "summary": "Deletes a detail_pay",
        "description": "",
        "operationId": "deletedetail_pay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "detail_payId",
            "in": "path",
            "description": "ID of detail_pay to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "detail_pay not found"
          }
        }
      }
    },
    "/api/v1/detail_pay/bulk": {
      "post": {
        "tags": [
          "detail_pay"
        ],
        "summary": "Bulk detail_pay insert",
        "description": "",
        "operationId": "bulkdetail_payInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "detail_pay objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/detail_pay"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "detail_pay"
        ],
        "summary": "Updates a detail_pay",
        "description": "",
        "operationId": "updatedetail_pay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "detail_pay objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/detail_pay"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "detail_pay"
        ],
        "summary": "Deletes a detail_pay",
        "description": "",
        "operationId": "deletedetail_pay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "detail_pay objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/detail_pay"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "detail_pay not found"
          }
        }
      }
    },
    "/api/v1/detail_pay/findOne": {
      "get": {
        "tags": [
          "detail_pay"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnedetail_pay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/detail_pay"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/detail_pay/{detail_payId}/exists": {
      "get": {
        "tags": [
          "detail_pay"
        ],
        "summary": "Check detail_pay with provided ID exists",
        "description": "Returns a single detail_pay",
        "operationId": "checkdetail_payExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "detail_payId",
            "in": "path",
            "description": "ID of detail_pay",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/detail_pay/count": {
      "get": {
        "tags": [
          "detail_pay"
        ],
        "summary": "Get detail_pay count",
        "operationId": "getdetail_payCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/detail_pay/groupby/{columnName}": {
      "get": {
        "tags": [
          "detail_pay"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "detail_payGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/detail_pay"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/detail_pay/distribution/{columnName}": {
      "get": {
        "tags": [
          "detail_pay"
        ],
        "summary": "",
        "description": "",
        "operationId": "detail_payDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/detail_pay/distinct/{columnName}": {
      "get": {
        "tags": [
          "detail_pay"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "detail_payDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/detail_pay/aggregate/{columnName}": {
      "get": {
        "tags": [
          "detail_pay"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "detail_payAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/detail_pay"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/district": {
      "post": {
        "tags": [
          "district"
        ],
        "summary": "Add a new district",
        "description": "",
        "operationId": "adddistrict",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "district object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/district"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "district"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getdistrict",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/district/{districtId}": {
      "get": {
        "tags": [
          "district"
        ],
        "summary": "Find district by ID",
        "description": "Returns a single district",
        "operationId": "getdistrictById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "districtId",
            "in": "path",
            "description": "ID of district to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/district"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "district not found"
          }
        }
      },
      "put": {
        "tags": [
          "district"
        ],
        "summary": "Updates a district",
        "description": "",
        "operationId": "updatedistrict",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "districtId",
            "in": "path",
            "description": "ID of district to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "district object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/district"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "district"
        ],
        "summary": "Deletes a district",
        "description": "",
        "operationId": "deletedistrict",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "districtId",
            "in": "path",
            "description": "ID of district to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "district not found"
          }
        }
      }
    },
    "/api/v1/district/bulk": {
      "post": {
        "tags": [
          "district"
        ],
        "summary": "Bulk district insert",
        "description": "",
        "operationId": "bulkdistrictInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "district objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/district"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "district"
        ],
        "summary": "Updates a district",
        "description": "",
        "operationId": "updatedistrict",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "district objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/district"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "district"
        ],
        "summary": "Deletes a district",
        "description": "",
        "operationId": "deletedistrict",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "district objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/district"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "district not found"
          }
        }
      }
    },
    "/api/v1/district/findOne": {
      "get": {
        "tags": [
          "district"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnedistrict",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/district"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/district/{districtId}/exists": {
      "get": {
        "tags": [
          "district"
        ],
        "summary": "Check district with provided ID exists",
        "description": "Returns a single district",
        "operationId": "checkdistrictExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "districtId",
            "in": "path",
            "description": "ID of district",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/district/count": {
      "get": {
        "tags": [
          "district"
        ],
        "summary": "Get district count",
        "operationId": "getdistrictCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/district/groupby/{columnName}": {
      "get": {
        "tags": [
          "district"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "districtGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/district"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/district/distribution/{columnName}": {
      "get": {
        "tags": [
          "district"
        ],
        "summary": "",
        "description": "",
        "operationId": "districtDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/district/distinct/{columnName}": {
      "get": {
        "tags": [
          "district"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "districtDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/district/aggregate/{columnName}": {
      "get": {
        "tags": [
          "district"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "districtAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/district"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/geography": {
      "post": {
        "tags": [
          "geography"
        ],
        "summary": "Add a new geography",
        "description": "",
        "operationId": "addgeography",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "geography object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/geography"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "geography"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getgeography",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/geography/{geographyId}": {
      "get": {
        "tags": [
          "geography"
        ],
        "summary": "Find geography by ID",
        "description": "Returns a single geography",
        "operationId": "getgeographyById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "geographyId",
            "in": "path",
            "description": "ID of geography to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/geography"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "geography not found"
          }
        }
      },
      "put": {
        "tags": [
          "geography"
        ],
        "summary": "Updates a geography",
        "description": "",
        "operationId": "updategeography",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "geographyId",
            "in": "path",
            "description": "ID of geography to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "geography object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/geography"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "geography"
        ],
        "summary": "Deletes a geography",
        "description": "",
        "operationId": "deletegeography",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "geographyId",
            "in": "path",
            "description": "ID of geography to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "geography not found"
          }
        }
      }
    },
    "/api/v1/geography/bulk": {
      "post": {
        "tags": [
          "geography"
        ],
        "summary": "Bulk geography insert",
        "description": "",
        "operationId": "bulkgeographyInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "geography objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/geography"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "geography"
        ],
        "summary": "Updates a geography",
        "description": "",
        "operationId": "updategeography",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "geography objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/geography"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "geography"
        ],
        "summary": "Deletes a geography",
        "description": "",
        "operationId": "deletegeography",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "geography objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/geography"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "geography not found"
          }
        }
      }
    },
    "/api/v1/geography/findOne": {
      "get": {
        "tags": [
          "geography"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnegeography",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/geography"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/geography/{geographyId}/exists": {
      "get": {
        "tags": [
          "geography"
        ],
        "summary": "Check geography with provided ID exists",
        "description": "Returns a single geography",
        "operationId": "checkgeographyExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "geographyId",
            "in": "path",
            "description": "ID of geography",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/geography/count": {
      "get": {
        "tags": [
          "geography"
        ],
        "summary": "Get geography count",
        "operationId": "getgeographyCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/geography/groupby/{columnName}": {
      "get": {
        "tags": [
          "geography"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "geographyGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/geography"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/geography/distribution/{columnName}": {
      "get": {
        "tags": [
          "geography"
        ],
        "summary": "",
        "description": "",
        "operationId": "geographyDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/geography/distinct/{columnName}": {
      "get": {
        "tags": [
          "geography"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "geographyDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/geography/aggregate/{columnName}": {
      "get": {
        "tags": [
          "geography"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "geographyAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/geography"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mem1": {
      "post": {
        "tags": [
          "mem1"
        ],
        "summary": "Add a new mem1",
        "description": "",
        "operationId": "addmem1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "mem1 object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mem1"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "mem1"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getmem1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mem1/{mem1Id}": {
      "get": {
        "tags": [
          "mem1"
        ],
        "summary": "Find mem1 by ID",
        "description": "Returns a single mem1",
        "operationId": "getmem1ById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mem1Id",
            "in": "path",
            "description": "ID of mem1 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/mem1"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "mem1 not found"
          }
        }
      },
      "put": {
        "tags": [
          "mem1"
        ],
        "summary": "Updates a mem1",
        "description": "",
        "operationId": "updatemem1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mem1Id",
            "in": "path",
            "description": "ID of mem1 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "mem1 object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mem1"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "mem1"
        ],
        "summary": "Deletes a mem1",
        "description": "",
        "operationId": "deletemem1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mem1Id",
            "in": "path",
            "description": "ID of mem1 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "mem1 not found"
          }
        }
      }
    },
    "/api/v1/mem1/bulk": {
      "post": {
        "tags": [
          "mem1"
        ],
        "summary": "Bulk mem1 insert",
        "description": "",
        "operationId": "bulkmem1Insert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "mem1 objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mem1"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "mem1"
        ],
        "summary": "Updates a mem1",
        "description": "",
        "operationId": "updatemem1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "mem1 objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mem1"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "mem1"
        ],
        "summary": "Deletes a mem1",
        "description": "",
        "operationId": "deletemem1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "mem1 objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mem1"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "mem1 not found"
          }
        }
      }
    },
    "/api/v1/mem1/findOne": {
      "get": {
        "tags": [
          "mem1"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnemem1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/mem1"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mem1/{mem1Id}/exists": {
      "get": {
        "tags": [
          "mem1"
        ],
        "summary": "Check mem1 with provided ID exists",
        "description": "Returns a single mem1",
        "operationId": "checkmem1Exists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mem1Id",
            "in": "path",
            "description": "ID of mem1",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/mem1/count": {
      "get": {
        "tags": [
          "mem1"
        ],
        "summary": "Get mem1 count",
        "operationId": "getmem1Count",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mem1/groupby/{columnName}": {
      "get": {
        "tags": [
          "mem1"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "mem1GroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/mem1"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mem1/distribution/{columnName}": {
      "get": {
        "tags": [
          "mem1"
        ],
        "summary": "",
        "description": "",
        "operationId": "mem1Distribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mem1/distinct/{columnName}": {
      "get": {
        "tags": [
          "mem1"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "mem1Distinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mem1/aggregate/{columnName}": {
      "get": {
        "tags": [
          "mem1"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "mem1Aggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/mem1"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mem2": {
      "post": {
        "tags": [
          "mem2"
        ],
        "summary": "Add a new mem2",
        "description": "",
        "operationId": "addmem2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "mem2 object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mem2"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "mem2"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getmem2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mem2/{mem2Id}": {
      "get": {
        "tags": [
          "mem2"
        ],
        "summary": "Find mem2 by ID",
        "description": "Returns a single mem2",
        "operationId": "getmem2ById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mem2Id",
            "in": "path",
            "description": "ID of mem2 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/mem2"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "mem2 not found"
          }
        }
      },
      "put": {
        "tags": [
          "mem2"
        ],
        "summary": "Updates a mem2",
        "description": "",
        "operationId": "updatemem2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mem2Id",
            "in": "path",
            "description": "ID of mem2 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "mem2 object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mem2"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "mem2"
        ],
        "summary": "Deletes a mem2",
        "description": "",
        "operationId": "deletemem2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mem2Id",
            "in": "path",
            "description": "ID of mem2 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "mem2 not found"
          }
        }
      }
    },
    "/api/v1/mem2/bulk": {
      "post": {
        "tags": [
          "mem2"
        ],
        "summary": "Bulk mem2 insert",
        "description": "",
        "operationId": "bulkmem2Insert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "mem2 objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mem2"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "mem2"
        ],
        "summary": "Updates a mem2",
        "description": "",
        "operationId": "updatemem2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "mem2 objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mem2"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "mem2"
        ],
        "summary": "Deletes a mem2",
        "description": "",
        "operationId": "deletemem2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "mem2 objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mem2"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "mem2 not found"
          }
        }
      }
    },
    "/api/v1/mem2/findOne": {
      "get": {
        "tags": [
          "mem2"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnemem2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/mem2"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mem2/{mem2Id}/exists": {
      "get": {
        "tags": [
          "mem2"
        ],
        "summary": "Check mem2 with provided ID exists",
        "description": "Returns a single mem2",
        "operationId": "checkmem2Exists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mem2Id",
            "in": "path",
            "description": "ID of mem2",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/mem2/count": {
      "get": {
        "tags": [
          "mem2"
        ],
        "summary": "Get mem2 count",
        "operationId": "getmem2Count",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mem2/groupby/{columnName}": {
      "get": {
        "tags": [
          "mem2"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "mem2GroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/mem2"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mem2/distribution/{columnName}": {
      "get": {
        "tags": [
          "mem2"
        ],
        "summary": "",
        "description": "",
        "operationId": "mem2Distribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mem2/distinct/{columnName}": {
      "get": {
        "tags": [
          "mem2"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "mem2Distinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mem2/aggregate/{columnName}": {
      "get": {
        "tags": [
          "mem2"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "mem2Aggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/mem2"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mem3": {
      "post": {
        "tags": [
          "mem3"
        ],
        "summary": "Add a new mem3",
        "description": "",
        "operationId": "addmem3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "mem3 object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mem3"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "mem3"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getmem3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mem3/{mem3Id}": {
      "get": {
        "tags": [
          "mem3"
        ],
        "summary": "Find mem3 by ID",
        "description": "Returns a single mem3",
        "operationId": "getmem3ById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mem3Id",
            "in": "path",
            "description": "ID of mem3 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/mem3"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "mem3 not found"
          }
        }
      },
      "put": {
        "tags": [
          "mem3"
        ],
        "summary": "Updates a mem3",
        "description": "",
        "operationId": "updatemem3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mem3Id",
            "in": "path",
            "description": "ID of mem3 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "mem3 object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mem3"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "mem3"
        ],
        "summary": "Deletes a mem3",
        "description": "",
        "operationId": "deletemem3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mem3Id",
            "in": "path",
            "description": "ID of mem3 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "mem3 not found"
          }
        }
      }
    },
    "/api/v1/mem3/bulk": {
      "post": {
        "tags": [
          "mem3"
        ],
        "summary": "Bulk mem3 insert",
        "description": "",
        "operationId": "bulkmem3Insert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "mem3 objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mem3"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "mem3"
        ],
        "summary": "Updates a mem3",
        "description": "",
        "operationId": "updatemem3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "mem3 objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mem3"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "mem3"
        ],
        "summary": "Deletes a mem3",
        "description": "",
        "operationId": "deletemem3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "mem3 objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mem3"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "mem3 not found"
          }
        }
      }
    },
    "/api/v1/mem3/findOne": {
      "get": {
        "tags": [
          "mem3"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnemem3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/mem3"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mem3/{mem3Id}/exists": {
      "get": {
        "tags": [
          "mem3"
        ],
        "summary": "Check mem3 with provided ID exists",
        "description": "Returns a single mem3",
        "operationId": "checkmem3Exists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mem3Id",
            "in": "path",
            "description": "ID of mem3",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/mem3/count": {
      "get": {
        "tags": [
          "mem3"
        ],
        "summary": "Get mem3 count",
        "operationId": "getmem3Count",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mem3/groupby/{columnName}": {
      "get": {
        "tags": [
          "mem3"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "mem3GroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/mem3"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mem3/distribution/{columnName}": {
      "get": {
        "tags": [
          "mem3"
        ],
        "summary": "",
        "description": "",
        "operationId": "mem3Distribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mem3/distinct/{columnName}": {
      "get": {
        "tags": [
          "mem3"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "mem3Distinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mem3/aggregate/{columnName}": {
      "get": {
        "tags": [
          "mem3"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "mem3Aggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/mem3"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/member_pay_2": {
      "post": {
        "tags": [
          "member_pay_2"
        ],
        "summary": "Add a new member_pay_2",
        "description": "",
        "operationId": "addmember_pay_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "member_pay_2 object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/member_pay_2"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "member_pay_2"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getmember_pay_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/member_pay_2/{member_pay_2Id}": {
      "get": {
        "tags": [
          "member_pay_2"
        ],
        "summary": "Find member_pay_2 by ID",
        "description": "Returns a single member_pay_2",
        "operationId": "getmember_pay_2ById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "member_pay_2Id",
            "in": "path",
            "description": "ID of member_pay_2 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/member_pay_2"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "member_pay_2 not found"
          }
        }
      },
      "put": {
        "tags": [
          "member_pay_2"
        ],
        "summary": "Updates a member_pay_2",
        "description": "",
        "operationId": "updatemember_pay_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "member_pay_2Id",
            "in": "path",
            "description": "ID of member_pay_2 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "member_pay_2 object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/member_pay_2"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "member_pay_2"
        ],
        "summary": "Deletes a member_pay_2",
        "description": "",
        "operationId": "deletemember_pay_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "member_pay_2Id",
            "in": "path",
            "description": "ID of member_pay_2 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "member_pay_2 not found"
          }
        }
      }
    },
    "/api/v1/member_pay_2/bulk": {
      "post": {
        "tags": [
          "member_pay_2"
        ],
        "summary": "Bulk member_pay_2 insert",
        "description": "",
        "operationId": "bulkmember_pay_2Insert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "member_pay_2 objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/member_pay_2"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "member_pay_2"
        ],
        "summary": "Updates a member_pay_2",
        "description": "",
        "operationId": "updatemember_pay_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "member_pay_2 objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/member_pay_2"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "member_pay_2"
        ],
        "summary": "Deletes a member_pay_2",
        "description": "",
        "operationId": "deletemember_pay_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "member_pay_2 objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/member_pay_2"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "member_pay_2 not found"
          }
        }
      }
    },
    "/api/v1/member_pay_2/findOne": {
      "get": {
        "tags": [
          "member_pay_2"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnemember_pay_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/member_pay_2"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/member_pay_2/{member_pay_2Id}/exists": {
      "get": {
        "tags": [
          "member_pay_2"
        ],
        "summary": "Check member_pay_2 with provided ID exists",
        "description": "Returns a single member_pay_2",
        "operationId": "checkmember_pay_2Exists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "member_pay_2Id",
            "in": "path",
            "description": "ID of member_pay_2",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/member_pay_2/count": {
      "get": {
        "tags": [
          "member_pay_2"
        ],
        "summary": "Get member_pay_2 count",
        "operationId": "getmember_pay_2Count",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/member_pay_2/groupby/{columnName}": {
      "get": {
        "tags": [
          "member_pay_2"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "member_pay_2GroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/member_pay_2"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/member_pay_2/distribution/{columnName}": {
      "get": {
        "tags": [
          "member_pay_2"
        ],
        "summary": "",
        "description": "",
        "operationId": "member_pay_2Distribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/member_pay_2/distinct/{columnName}": {
      "get": {
        "tags": [
          "member_pay_2"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "member_pay_2Distinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/member_pay_2/aggregate/{columnName}": {
      "get": {
        "tags": [
          "member_pay_2"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "member_pay_2Aggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/member_pay_2"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/member_pay": {
      "post": {
        "tags": [
          "member_pay"
        ],
        "summary": "Add a new member_pay",
        "description": "",
        "operationId": "addmember_pay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "member_pay object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/member_pay"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "member_pay"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getmember_pay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/member_pay/{member_payId}": {
      "get": {
        "tags": [
          "member_pay"
        ],
        "summary": "Find member_pay by ID",
        "description": "Returns a single member_pay",
        "operationId": "getmember_payById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "member_payId",
            "in": "path",
            "description": "ID of member_pay to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/member_pay"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "member_pay not found"
          }
        }
      },
      "put": {
        "tags": [
          "member_pay"
        ],
        "summary": "Updates a member_pay",
        "description": "",
        "operationId": "updatemember_pay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "member_payId",
            "in": "path",
            "description": "ID of member_pay to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "member_pay object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/member_pay"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "member_pay"
        ],
        "summary": "Deletes a member_pay",
        "description": "",
        "operationId": "deletemember_pay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "member_payId",
            "in": "path",
            "description": "ID of member_pay to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "member_pay not found"
          }
        }
      }
    },
    "/api/v1/member_pay/bulk": {
      "post": {
        "tags": [
          "member_pay"
        ],
        "summary": "Bulk member_pay insert",
        "description": "",
        "operationId": "bulkmember_payInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "member_pay objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/member_pay"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "member_pay"
        ],
        "summary": "Updates a member_pay",
        "description": "",
        "operationId": "updatemember_pay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "member_pay objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/member_pay"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "member_pay"
        ],
        "summary": "Deletes a member_pay",
        "description": "",
        "operationId": "deletemember_pay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "member_pay objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/member_pay"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "member_pay not found"
          }
        }
      }
    },
    "/api/v1/member_pay/findOne": {
      "get": {
        "tags": [
          "member_pay"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnemember_pay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/member_pay"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/member_pay/{member_payId}/exists": {
      "get": {
        "tags": [
          "member_pay"
        ],
        "summary": "Check member_pay with provided ID exists",
        "description": "Returns a single member_pay",
        "operationId": "checkmember_payExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "member_payId",
            "in": "path",
            "description": "ID of member_pay",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/member_pay/count": {
      "get": {
        "tags": [
          "member_pay"
        ],
        "summary": "Get member_pay count",
        "operationId": "getmember_payCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/member_pay/groupby/{columnName}": {
      "get": {
        "tags": [
          "member_pay"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "member_payGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/member_pay"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/member_pay/distribution/{columnName}": {
      "get": {
        "tags": [
          "member_pay"
        ],
        "summary": "",
        "description": "",
        "operationId": "member_payDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/member_pay/distinct/{columnName}": {
      "get": {
        "tags": [
          "member_pay"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "member_payDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/member_pay/aggregate/{columnName}": {
      "get": {
        "tags": [
          "member_pay"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "member_payAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/member_pay"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/member": {
      "post": {
        "tags": [
          "member"
        ],
        "summary": "Add a new member",
        "description": "",
        "operationId": "addmember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "member object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/member"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "member"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getmember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/member/{memberId}": {
      "get": {
        "tags": [
          "member"
        ],
        "summary": "Find member by ID",
        "description": "Returns a single member",
        "operationId": "getmemberById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "description": "ID of member to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/member"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "member not found"
          }
        }
      },
      "put": {
        "tags": [
          "member"
        ],
        "summary": "Updates a member",
        "description": "",
        "operationId": "updatemember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "description": "ID of member to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "member object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/member"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "member"
        ],
        "summary": "Deletes a member",
        "description": "",
        "operationId": "deletemember",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "description": "ID of member to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "member not found"
          }
        }
      }
    },
    "/api/v1/member/bulk": {
      "post": {
        "tags": [
          "member"
        ],
        "summary": "Bulk member insert",
        "description": "",
        "operationId": "bulkmemberInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "member objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/member"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "member"
        ],
        "summary": "Updates a member",
        "description": "",
        "operationId": "updatemember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "member objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/member"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "member"
        ],
        "summary": "Deletes a member",
        "description": "",
        "operationId": "deletemember",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "member objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/member"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "member not found"
          }
        }
      }
    },
    "/api/v1/member/findOne": {
      "get": {
        "tags": [
          "member"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnemember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/member"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/member/{memberId}/exists": {
      "get": {
        "tags": [
          "member"
        ],
        "summary": "Check member with provided ID exists",
        "description": "Returns a single member",
        "operationId": "checkmemberExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "description": "ID of member",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/member/count": {
      "get": {
        "tags": [
          "member"
        ],
        "summary": "Get member count",
        "operationId": "getmemberCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/member/groupby/{columnName}": {
      "get": {
        "tags": [
          "member"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "memberGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/member"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/member/distribution/{columnName}": {
      "get": {
        "tags": [
          "member"
        ],
        "summary": "",
        "description": "",
        "operationId": "memberDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/member/distinct/{columnName}": {
      "get": {
        "tags": [
          "member"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "memberDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/member/aggregate/{columnName}": {
      "get": {
        "tags": [
          "member"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "memberAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/member"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/memnew_id_update": {
      "post": {
        "tags": [
          "memnew_id_update"
        ],
        "summary": "Add a new memnew_id_update",
        "description": "",
        "operationId": "addmemnew_id_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "memnew_id_update object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/memnew_id_update"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "memnew_id_update"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getmemnew_id_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/memnew_id_update/{memnew_id_updateId}": {
      "get": {
        "tags": [
          "memnew_id_update"
        ],
        "summary": "Find memnew_id_update by ID",
        "description": "Returns a single memnew_id_update",
        "operationId": "getmemnew_id_updateById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "memnew_id_updateId",
            "in": "path",
            "description": "ID of memnew_id_update to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/memnew_id_update"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "memnew_id_update not found"
          }
        }
      },
      "put": {
        "tags": [
          "memnew_id_update"
        ],
        "summary": "Updates a memnew_id_update",
        "description": "",
        "operationId": "updatememnew_id_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "memnew_id_updateId",
            "in": "path",
            "description": "ID of memnew_id_update to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "memnew_id_update object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/memnew_id_update"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "memnew_id_update"
        ],
        "summary": "Deletes a memnew_id_update",
        "description": "",
        "operationId": "deletememnew_id_update",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "memnew_id_updateId",
            "in": "path",
            "description": "ID of memnew_id_update to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "memnew_id_update not found"
          }
        }
      }
    },
    "/api/v1/memnew_id_update/bulk": {
      "post": {
        "tags": [
          "memnew_id_update"
        ],
        "summary": "Bulk memnew_id_update insert",
        "description": "",
        "operationId": "bulkmemnew_id_updateInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "memnew_id_update objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/memnew_id_update"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "memnew_id_update"
        ],
        "summary": "Updates a memnew_id_update",
        "description": "",
        "operationId": "updatememnew_id_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "memnew_id_update objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/memnew_id_update"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "memnew_id_update"
        ],
        "summary": "Deletes a memnew_id_update",
        "description": "",
        "operationId": "deletememnew_id_update",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "memnew_id_update objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/memnew_id_update"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "memnew_id_update not found"
          }
        }
      }
    },
    "/api/v1/memnew_id_update/findOne": {
      "get": {
        "tags": [
          "memnew_id_update"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnememnew_id_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/memnew_id_update"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/memnew_id_update/{memnew_id_updateId}/exists": {
      "get": {
        "tags": [
          "memnew_id_update"
        ],
        "summary": "Check memnew_id_update with provided ID exists",
        "description": "Returns a single memnew_id_update",
        "operationId": "checkmemnew_id_updateExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "memnew_id_updateId",
            "in": "path",
            "description": "ID of memnew_id_update",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/memnew_id_update/count": {
      "get": {
        "tags": [
          "memnew_id_update"
        ],
        "summary": "Get memnew_id_update count",
        "operationId": "getmemnew_id_updateCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/memnew_id_update/groupby/{columnName}": {
      "get": {
        "tags": [
          "memnew_id_update"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "memnew_id_updateGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/memnew_id_update"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/memnew_id_update/distribution/{columnName}": {
      "get": {
        "tags": [
          "memnew_id_update"
        ],
        "summary": "",
        "description": "",
        "operationId": "memnew_id_updateDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/memnew_id_update/distinct/{columnName}": {
      "get": {
        "tags": [
          "memnew_id_update"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "memnew_id_updateDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/memnew_id_update/aggregate/{columnName}": {
      "get": {
        "tags": [
          "memnew_id_update"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "memnew_id_updateAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/memnew_id_update"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mon_before_start": {
      "post": {
        "tags": [
          "mon_before_start"
        ],
        "summary": "Add a new mon_before_start",
        "description": "",
        "operationId": "addmon_before_start",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "mon_before_start object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mon_before_start"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "mon_before_start"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getmon_before_start",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mon_before_start/{mon_before_startId}": {
      "get": {
        "tags": [
          "mon_before_start"
        ],
        "summary": "Find mon_before_start by ID",
        "description": "Returns a single mon_before_start",
        "operationId": "getmon_before_startById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mon_before_startId",
            "in": "path",
            "description": "ID of mon_before_start to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/mon_before_start"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "mon_before_start not found"
          }
        }
      },
      "put": {
        "tags": [
          "mon_before_start"
        ],
        "summary": "Updates a mon_before_start",
        "description": "",
        "operationId": "updatemon_before_start",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mon_before_startId",
            "in": "path",
            "description": "ID of mon_before_start to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "mon_before_start object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mon_before_start"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "mon_before_start"
        ],
        "summary": "Deletes a mon_before_start",
        "description": "",
        "operationId": "deletemon_before_start",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mon_before_startId",
            "in": "path",
            "description": "ID of mon_before_start to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "mon_before_start not found"
          }
        }
      }
    },
    "/api/v1/mon_before_start/bulk": {
      "post": {
        "tags": [
          "mon_before_start"
        ],
        "summary": "Bulk mon_before_start insert",
        "description": "",
        "operationId": "bulkmon_before_startInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "mon_before_start objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mon_before_start"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "mon_before_start"
        ],
        "summary": "Updates a mon_before_start",
        "description": "",
        "operationId": "updatemon_before_start",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "mon_before_start objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mon_before_start"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "mon_before_start"
        ],
        "summary": "Deletes a mon_before_start",
        "description": "",
        "operationId": "deletemon_before_start",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "mon_before_start objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mon_before_start"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "mon_before_start not found"
          }
        }
      }
    },
    "/api/v1/mon_before_start/findOne": {
      "get": {
        "tags": [
          "mon_before_start"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnemon_before_start",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/mon_before_start"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mon_before_start/{mon_before_startId}/exists": {
      "get": {
        "tags": [
          "mon_before_start"
        ],
        "summary": "Check mon_before_start with provided ID exists",
        "description": "Returns a single mon_before_start",
        "operationId": "checkmon_before_startExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mon_before_startId",
            "in": "path",
            "description": "ID of mon_before_start",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/mon_before_start/count": {
      "get": {
        "tags": [
          "mon_before_start"
        ],
        "summary": "Get mon_before_start count",
        "operationId": "getmon_before_startCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mon_before_start/groupby/{columnName}": {
      "get": {
        "tags": [
          "mon_before_start"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "mon_before_startGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/mon_before_start"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mon_before_start/distribution/{columnName}": {
      "get": {
        "tags": [
          "mon_before_start"
        ],
        "summary": "",
        "description": "",
        "operationId": "mon_before_startDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mon_before_start/distinct/{columnName}": {
      "get": {
        "tags": [
          "mon_before_start"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "mon_before_startDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mon_before_start/aggregate/{columnName}": {
      "get": {
        "tags": [
          "mon_before_start"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "mon_before_startAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/mon_before_start"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mon": {
      "post": {
        "tags": [
          "mon"
        ],
        "summary": "Add a new mon",
        "description": "",
        "operationId": "addmon",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "mon object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mon"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "mon"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getmon",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mon/{monId}": {
      "get": {
        "tags": [
          "mon"
        ],
        "summary": "Find mon by ID",
        "description": "Returns a single mon",
        "operationId": "getmonById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monId",
            "in": "path",
            "description": "ID of mon to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/mon"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "mon not found"
          }
        }
      },
      "put": {
        "tags": [
          "mon"
        ],
        "summary": "Updates a mon",
        "description": "",
        "operationId": "updatemon",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monId",
            "in": "path",
            "description": "ID of mon to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "mon object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mon"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "mon"
        ],
        "summary": "Deletes a mon",
        "description": "",
        "operationId": "deletemon",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monId",
            "in": "path",
            "description": "ID of mon to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "mon not found"
          }
        }
      }
    },
    "/api/v1/mon/bulk": {
      "post": {
        "tags": [
          "mon"
        ],
        "summary": "Bulk mon insert",
        "description": "",
        "operationId": "bulkmonInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "mon objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mon"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "mon"
        ],
        "summary": "Updates a mon",
        "description": "",
        "operationId": "updatemon",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "mon objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mon"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "mon"
        ],
        "summary": "Deletes a mon",
        "description": "",
        "operationId": "deletemon",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "mon objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mon"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "mon not found"
          }
        }
      }
    },
    "/api/v1/mon/findOne": {
      "get": {
        "tags": [
          "mon"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnemon",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/mon"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mon/{monId}/exists": {
      "get": {
        "tags": [
          "mon"
        ],
        "summary": "Check mon with provided ID exists",
        "description": "Returns a single mon",
        "operationId": "checkmonExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monId",
            "in": "path",
            "description": "ID of mon",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/mon/count": {
      "get": {
        "tags": [
          "mon"
        ],
        "summary": "Get mon count",
        "operationId": "getmonCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mon/groupby/{columnName}": {
      "get": {
        "tags": [
          "mon"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "monGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/mon"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mon/distribution/{columnName}": {
      "get": {
        "tags": [
          "mon"
        ],
        "summary": "",
        "description": "",
        "operationId": "monDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mon/distinct/{columnName}": {
      "get": {
        "tags": [
          "mon"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/mon/aggregate/{columnName}": {
      "get": {
        "tags": [
          "mon"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/mon"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank1": {
      "post": {
        "tags": [
          "monBank1"
        ],
        "summary": "Add a new monBank1",
        "description": "",
        "operationId": "addmonBank1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monBank1 object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monBank1"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "monBank1"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getmonBank1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank1/{monBank1Id}": {
      "get": {
        "tags": [
          "monBank1"
        ],
        "summary": "Find monBank1 by ID",
        "description": "Returns a single monBank1",
        "operationId": "getmonBank1ById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monBank1Id",
            "in": "path",
            "description": "ID of monBank1 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monBank1"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monBank1 not found"
          }
        }
      },
      "put": {
        "tags": [
          "monBank1"
        ],
        "summary": "Updates a monBank1",
        "description": "",
        "operationId": "updatemonBank1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monBank1Id",
            "in": "path",
            "description": "ID of monBank1 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "monBank1 object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monBank1"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monBank1"
        ],
        "summary": "Deletes a monBank1",
        "description": "",
        "operationId": "deletemonBank1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monBank1Id",
            "in": "path",
            "description": "ID of monBank1 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monBank1 not found"
          }
        }
      }
    },
    "/api/v1/monBank1/bulk": {
      "post": {
        "tags": [
          "monBank1"
        ],
        "summary": "Bulk monBank1 insert",
        "description": "",
        "operationId": "bulkmonBank1Insert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monBank1 objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monBank1"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "monBank1"
        ],
        "summary": "Updates a monBank1",
        "description": "",
        "operationId": "updatemonBank1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monBank1 objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monBank1"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monBank1"
        ],
        "summary": "Deletes a monBank1",
        "description": "",
        "operationId": "deletemonBank1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monBank1 objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monBank1"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monBank1 not found"
          }
        }
      }
    },
    "/api/v1/monBank1/findOne": {
      "get": {
        "tags": [
          "monBank1"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnemonBank1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monBank1"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank1/{monBank1Id}/exists": {
      "get": {
        "tags": [
          "monBank1"
        ],
        "summary": "Check monBank1 with provided ID exists",
        "description": "Returns a single monBank1",
        "operationId": "checkmonBank1Exists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monBank1Id",
            "in": "path",
            "description": "ID of monBank1",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/monBank1/count": {
      "get": {
        "tags": [
          "monBank1"
        ],
        "summary": "Get monBank1 count",
        "operationId": "getmonBank1Count",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank1/groupby/{columnName}": {
      "get": {
        "tags": [
          "monBank1"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "monBank1GroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monBank1"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank1/distribution/{columnName}": {
      "get": {
        "tags": [
          "monBank1"
        ],
        "summary": "",
        "description": "",
        "operationId": "monBank1Distribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank1/distinct/{columnName}": {
      "get": {
        "tags": [
          "monBank1"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monBank1Distinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank1/aggregate/{columnName}": {
      "get": {
        "tags": [
          "monBank1"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monBank1Aggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monBank1"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank2": {
      "post": {
        "tags": [
          "monBank2"
        ],
        "summary": "Add a new monBank2",
        "description": "",
        "operationId": "addmonBank2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monBank2 object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monBank2"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "monBank2"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getmonBank2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank2/{monBank2Id}": {
      "get": {
        "tags": [
          "monBank2"
        ],
        "summary": "Find monBank2 by ID",
        "description": "Returns a single monBank2",
        "operationId": "getmonBank2ById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monBank2Id",
            "in": "path",
            "description": "ID of monBank2 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monBank2"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monBank2 not found"
          }
        }
      },
      "put": {
        "tags": [
          "monBank2"
        ],
        "summary": "Updates a monBank2",
        "description": "",
        "operationId": "updatemonBank2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monBank2Id",
            "in": "path",
            "description": "ID of monBank2 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "monBank2 object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monBank2"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monBank2"
        ],
        "summary": "Deletes a monBank2",
        "description": "",
        "operationId": "deletemonBank2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monBank2Id",
            "in": "path",
            "description": "ID of monBank2 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monBank2 not found"
          }
        }
      }
    },
    "/api/v1/monBank2/bulk": {
      "post": {
        "tags": [
          "monBank2"
        ],
        "summary": "Bulk monBank2 insert",
        "description": "",
        "operationId": "bulkmonBank2Insert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monBank2 objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monBank2"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "monBank2"
        ],
        "summary": "Updates a monBank2",
        "description": "",
        "operationId": "updatemonBank2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monBank2 objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monBank2"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monBank2"
        ],
        "summary": "Deletes a monBank2",
        "description": "",
        "operationId": "deletemonBank2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monBank2 objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monBank2"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monBank2 not found"
          }
        }
      }
    },
    "/api/v1/monBank2/findOne": {
      "get": {
        "tags": [
          "monBank2"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnemonBank2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monBank2"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank2/{monBank2Id}/exists": {
      "get": {
        "tags": [
          "monBank2"
        ],
        "summary": "Check monBank2 with provided ID exists",
        "description": "Returns a single monBank2",
        "operationId": "checkmonBank2Exists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monBank2Id",
            "in": "path",
            "description": "ID of monBank2",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/monBank2/count": {
      "get": {
        "tags": [
          "monBank2"
        ],
        "summary": "Get monBank2 count",
        "operationId": "getmonBank2Count",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank2/groupby/{columnName}": {
      "get": {
        "tags": [
          "monBank2"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "monBank2GroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monBank2"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank2/distribution/{columnName}": {
      "get": {
        "tags": [
          "monBank2"
        ],
        "summary": "",
        "description": "",
        "operationId": "monBank2Distribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank2/distinct/{columnName}": {
      "get": {
        "tags": [
          "monBank2"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monBank2Distinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank2/aggregate/{columnName}": {
      "get": {
        "tags": [
          "monBank2"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monBank2Aggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monBank2"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank3": {
      "post": {
        "tags": [
          "monBank3"
        ],
        "summary": "Add a new monBank3",
        "description": "",
        "operationId": "addmonBank3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monBank3 object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monBank3"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "monBank3"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getmonBank3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank3/{monBank3Id}": {
      "get": {
        "tags": [
          "monBank3"
        ],
        "summary": "Find monBank3 by ID",
        "description": "Returns a single monBank3",
        "operationId": "getmonBank3ById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monBank3Id",
            "in": "path",
            "description": "ID of monBank3 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monBank3"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monBank3 not found"
          }
        }
      },
      "put": {
        "tags": [
          "monBank3"
        ],
        "summary": "Updates a monBank3",
        "description": "",
        "operationId": "updatemonBank3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monBank3Id",
            "in": "path",
            "description": "ID of monBank3 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "monBank3 object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monBank3"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monBank3"
        ],
        "summary": "Deletes a monBank3",
        "description": "",
        "operationId": "deletemonBank3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monBank3Id",
            "in": "path",
            "description": "ID of monBank3 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monBank3 not found"
          }
        }
      }
    },
    "/api/v1/monBank3/bulk": {
      "post": {
        "tags": [
          "monBank3"
        ],
        "summary": "Bulk monBank3 insert",
        "description": "",
        "operationId": "bulkmonBank3Insert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monBank3 objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monBank3"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "monBank3"
        ],
        "summary": "Updates a monBank3",
        "description": "",
        "operationId": "updatemonBank3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monBank3 objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monBank3"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monBank3"
        ],
        "summary": "Deletes a monBank3",
        "description": "",
        "operationId": "deletemonBank3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monBank3 objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monBank3"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monBank3 not found"
          }
        }
      }
    },
    "/api/v1/monBank3/findOne": {
      "get": {
        "tags": [
          "monBank3"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnemonBank3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monBank3"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank3/{monBank3Id}/exists": {
      "get": {
        "tags": [
          "monBank3"
        ],
        "summary": "Check monBank3 with provided ID exists",
        "description": "Returns a single monBank3",
        "operationId": "checkmonBank3Exists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monBank3Id",
            "in": "path",
            "description": "ID of monBank3",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/monBank3/count": {
      "get": {
        "tags": [
          "monBank3"
        ],
        "summary": "Get monBank3 count",
        "operationId": "getmonBank3Count",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank3/groupby/{columnName}": {
      "get": {
        "tags": [
          "monBank3"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "monBank3GroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monBank3"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank3/distribution/{columnName}": {
      "get": {
        "tags": [
          "monBank3"
        ],
        "summary": "",
        "description": "",
        "operationId": "monBank3Distribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank3/distinct/{columnName}": {
      "get": {
        "tags": [
          "monBank3"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monBank3Distinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank3/aggregate/{columnName}": {
      "get": {
        "tags": [
          "monBank3"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monBank3Aggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monBank3"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank4": {
      "post": {
        "tags": [
          "monBank4"
        ],
        "summary": "Add a new monBank4",
        "description": "",
        "operationId": "addmonBank4",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monBank4 object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monBank4"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "monBank4"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getmonBank4",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank4/{monBank4Id}": {
      "get": {
        "tags": [
          "monBank4"
        ],
        "summary": "Find monBank4 by ID",
        "description": "Returns a single monBank4",
        "operationId": "getmonBank4ById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monBank4Id",
            "in": "path",
            "description": "ID of monBank4 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monBank4"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monBank4 not found"
          }
        }
      },
      "put": {
        "tags": [
          "monBank4"
        ],
        "summary": "Updates a monBank4",
        "description": "",
        "operationId": "updatemonBank4",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monBank4Id",
            "in": "path",
            "description": "ID of monBank4 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "monBank4 object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monBank4"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monBank4"
        ],
        "summary": "Deletes a monBank4",
        "description": "",
        "operationId": "deletemonBank4",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monBank4Id",
            "in": "path",
            "description": "ID of monBank4 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monBank4 not found"
          }
        }
      }
    },
    "/api/v1/monBank4/bulk": {
      "post": {
        "tags": [
          "monBank4"
        ],
        "summary": "Bulk monBank4 insert",
        "description": "",
        "operationId": "bulkmonBank4Insert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monBank4 objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monBank4"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "monBank4"
        ],
        "summary": "Updates a monBank4",
        "description": "",
        "operationId": "updatemonBank4",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monBank4 objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monBank4"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monBank4"
        ],
        "summary": "Deletes a monBank4",
        "description": "",
        "operationId": "deletemonBank4",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monBank4 objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monBank4"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monBank4 not found"
          }
        }
      }
    },
    "/api/v1/monBank4/findOne": {
      "get": {
        "tags": [
          "monBank4"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnemonBank4",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monBank4"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank4/{monBank4Id}/exists": {
      "get": {
        "tags": [
          "monBank4"
        ],
        "summary": "Check monBank4 with provided ID exists",
        "description": "Returns a single monBank4",
        "operationId": "checkmonBank4Exists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monBank4Id",
            "in": "path",
            "description": "ID of monBank4",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/monBank4/count": {
      "get": {
        "tags": [
          "monBank4"
        ],
        "summary": "Get monBank4 count",
        "operationId": "getmonBank4Count",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank4/groupby/{columnName}": {
      "get": {
        "tags": [
          "monBank4"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "monBank4GroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monBank4"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank4/distribution/{columnName}": {
      "get": {
        "tags": [
          "monBank4"
        ],
        "summary": "",
        "description": "",
        "operationId": "monBank4Distribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank4/distinct/{columnName}": {
      "get": {
        "tags": [
          "monBank4"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monBank4Distinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monBank4/aggregate/{columnName}": {
      "get": {
        "tags": [
          "monBank4"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monBank4Aggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monBank4"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monhug": {
      "post": {
        "tags": [
          "monhug"
        ],
        "summary": "Add a new monhug",
        "description": "",
        "operationId": "addmonhug",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monhug object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monhug"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "monhug"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getmonhug",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monhug/{monhugId}": {
      "get": {
        "tags": [
          "monhug"
        ],
        "summary": "Find monhug by ID",
        "description": "Returns a single monhug",
        "operationId": "getmonhugById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monhugId",
            "in": "path",
            "description": "ID of monhug to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monhug"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monhug not found"
          }
        }
      },
      "put": {
        "tags": [
          "monhug"
        ],
        "summary": "Updates a monhug",
        "description": "",
        "operationId": "updatemonhug",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monhugId",
            "in": "path",
            "description": "ID of monhug to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "monhug object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monhug"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monhug"
        ],
        "summary": "Deletes a monhug",
        "description": "",
        "operationId": "deletemonhug",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monhugId",
            "in": "path",
            "description": "ID of monhug to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monhug not found"
          }
        }
      }
    },
    "/api/v1/monhug/bulk": {
      "post": {
        "tags": [
          "monhug"
        ],
        "summary": "Bulk monhug insert",
        "description": "",
        "operationId": "bulkmonhugInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monhug objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monhug"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "monhug"
        ],
        "summary": "Updates a monhug",
        "description": "",
        "operationId": "updatemonhug",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monhug objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monhug"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monhug"
        ],
        "summary": "Deletes a monhug",
        "description": "",
        "operationId": "deletemonhug",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monhug objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monhug"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monhug not found"
          }
        }
      }
    },
    "/api/v1/monhug/findOne": {
      "get": {
        "tags": [
          "monhug"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnemonhug",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monhug"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monhug/{monhugId}/exists": {
      "get": {
        "tags": [
          "monhug"
        ],
        "summary": "Check monhug with provided ID exists",
        "description": "Returns a single monhug",
        "operationId": "checkmonhugExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monhugId",
            "in": "path",
            "description": "ID of monhug",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/monhug/count": {
      "get": {
        "tags": [
          "monhug"
        ],
        "summary": "Get monhug count",
        "operationId": "getmonhugCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monhug/groupby/{columnName}": {
      "get": {
        "tags": [
          "monhug"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "monhugGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monhug"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monhug/distribution/{columnName}": {
      "get": {
        "tags": [
          "monhug"
        ],
        "summary": "",
        "description": "",
        "operationId": "monhugDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monhug/distinct/{columnName}": {
      "get": {
        "tags": [
          "monhug"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monhugDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monhug/aggregate/{columnName}": {
      "get": {
        "tags": [
          "monhug"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monhugAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monhug"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monJay": {
      "post": {
        "tags": [
          "monJay"
        ],
        "summary": "Add a new monJay",
        "description": "",
        "operationId": "addmonJay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monJay object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monJay"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "monJay"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getmonJay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monJay/{monJayId}": {
      "get": {
        "tags": [
          "monJay"
        ],
        "summary": "Find monJay by ID",
        "description": "Returns a single monJay",
        "operationId": "getmonJayById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monJayId",
            "in": "path",
            "description": "ID of monJay to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monJay"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monJay not found"
          }
        }
      },
      "put": {
        "tags": [
          "monJay"
        ],
        "summary": "Updates a monJay",
        "description": "",
        "operationId": "updatemonJay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monJayId",
            "in": "path",
            "description": "ID of monJay to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "monJay object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monJay"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monJay"
        ],
        "summary": "Deletes a monJay",
        "description": "",
        "operationId": "deletemonJay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monJayId",
            "in": "path",
            "description": "ID of monJay to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monJay not found"
          }
        }
      }
    },
    "/api/v1/monJay/bulk": {
      "post": {
        "tags": [
          "monJay"
        ],
        "summary": "Bulk monJay insert",
        "description": "",
        "operationId": "bulkmonJayInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monJay objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monJay"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "monJay"
        ],
        "summary": "Updates a monJay",
        "description": "",
        "operationId": "updatemonJay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monJay objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monJay"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monJay"
        ],
        "summary": "Deletes a monJay",
        "description": "",
        "operationId": "deletemonJay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monJay objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monJay"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monJay not found"
          }
        }
      }
    },
    "/api/v1/monJay/findOne": {
      "get": {
        "tags": [
          "monJay"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnemonJay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monJay"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monJay/{monJayId}/exists": {
      "get": {
        "tags": [
          "monJay"
        ],
        "summary": "Check monJay with provided ID exists",
        "description": "Returns a single monJay",
        "operationId": "checkmonJayExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monJayId",
            "in": "path",
            "description": "ID of monJay",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/monJay/count": {
      "get": {
        "tags": [
          "monJay"
        ],
        "summary": "Get monJay count",
        "operationId": "getmonJayCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monJay/groupby/{columnName}": {
      "get": {
        "tags": [
          "monJay"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "monJayGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monJay"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monJay/distribution/{columnName}": {
      "get": {
        "tags": [
          "monJay"
        ],
        "summary": "",
        "description": "",
        "operationId": "monJayDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monJay/distinct/{columnName}": {
      "get": {
        "tags": [
          "monJay"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monJayDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monJay/aggregate/{columnName}": {
      "get": {
        "tags": [
          "monJay"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monJayAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monJay"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monluknee": {
      "post": {
        "tags": [
          "monluknee"
        ],
        "summary": "Add a new monluknee",
        "description": "",
        "operationId": "addmonluknee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monluknee object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monluknee"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "monluknee"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getmonluknee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monluknee/{monlukneeId}": {
      "get": {
        "tags": [
          "monluknee"
        ],
        "summary": "Find monluknee by ID",
        "description": "Returns a single monluknee",
        "operationId": "getmonlukneeById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monlukneeId",
            "in": "path",
            "description": "ID of monluknee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monluknee"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monluknee not found"
          }
        }
      },
      "put": {
        "tags": [
          "monluknee"
        ],
        "summary": "Updates a monluknee",
        "description": "",
        "operationId": "updatemonluknee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monlukneeId",
            "in": "path",
            "description": "ID of monluknee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "monluknee object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monluknee"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monluknee"
        ],
        "summary": "Deletes a monluknee",
        "description": "",
        "operationId": "deletemonluknee",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monlukneeId",
            "in": "path",
            "description": "ID of monluknee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monluknee not found"
          }
        }
      }
    },
    "/api/v1/monluknee/bulk": {
      "post": {
        "tags": [
          "monluknee"
        ],
        "summary": "Bulk monluknee insert",
        "description": "",
        "operationId": "bulkmonlukneeInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monluknee objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monluknee"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "monluknee"
        ],
        "summary": "Updates a monluknee",
        "description": "",
        "operationId": "updatemonluknee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monluknee objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monluknee"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monluknee"
        ],
        "summary": "Deletes a monluknee",
        "description": "",
        "operationId": "deletemonluknee",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monluknee objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monluknee"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monluknee not found"
          }
        }
      }
    },
    "/api/v1/monluknee/findOne": {
      "get": {
        "tags": [
          "monluknee"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnemonluknee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monluknee"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monluknee/{monlukneeId}/exists": {
      "get": {
        "tags": [
          "monluknee"
        ],
        "summary": "Check monluknee with provided ID exists",
        "description": "Returns a single monluknee",
        "operationId": "checkmonlukneeExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monlukneeId",
            "in": "path",
            "description": "ID of monluknee",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/monluknee/count": {
      "get": {
        "tags": [
          "monluknee"
        ],
        "summary": "Get monluknee count",
        "operationId": "getmonlukneeCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monluknee/groupby/{columnName}": {
      "get": {
        "tags": [
          "monluknee"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "monlukneeGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monluknee"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monluknee/distribution/{columnName}": {
      "get": {
        "tags": [
          "monluknee"
        ],
        "summary": "",
        "description": "",
        "operationId": "monlukneeDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monluknee/distinct/{columnName}": {
      "get": {
        "tags": [
          "monluknee"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monlukneeDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monluknee/aggregate/{columnName}": {
      "get": {
        "tags": [
          "monluknee"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monlukneeAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monluknee"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monpay4": {
      "post": {
        "tags": [
          "monpay4"
        ],
        "summary": "Add a new monpay4",
        "description": "",
        "operationId": "addmonpay4",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monpay4 object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monpay4"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "monpay4"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getmonpay4",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monpay4/{monpay4Id}": {
      "get": {
        "tags": [
          "monpay4"
        ],
        "summary": "Find monpay4 by ID",
        "description": "Returns a single monpay4",
        "operationId": "getmonpay4ById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monpay4Id",
            "in": "path",
            "description": "ID of monpay4 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monpay4"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monpay4 not found"
          }
        }
      },
      "put": {
        "tags": [
          "monpay4"
        ],
        "summary": "Updates a monpay4",
        "description": "",
        "operationId": "updatemonpay4",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monpay4Id",
            "in": "path",
            "description": "ID of monpay4 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "monpay4 object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monpay4"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monpay4"
        ],
        "summary": "Deletes a monpay4",
        "description": "",
        "operationId": "deletemonpay4",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monpay4Id",
            "in": "path",
            "description": "ID of monpay4 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monpay4 not found"
          }
        }
      }
    },
    "/api/v1/monpay4/bulk": {
      "post": {
        "tags": [
          "monpay4"
        ],
        "summary": "Bulk monpay4 insert",
        "description": "",
        "operationId": "bulkmonpay4Insert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monpay4 objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monpay4"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "monpay4"
        ],
        "summary": "Updates a monpay4",
        "description": "",
        "operationId": "updatemonpay4",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monpay4 objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monpay4"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monpay4"
        ],
        "summary": "Deletes a monpay4",
        "description": "",
        "operationId": "deletemonpay4",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monpay4 objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monpay4"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monpay4 not found"
          }
        }
      }
    },
    "/api/v1/monpay4/findOne": {
      "get": {
        "tags": [
          "monpay4"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnemonpay4",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monpay4"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monpay4/{monpay4Id}/exists": {
      "get": {
        "tags": [
          "monpay4"
        ],
        "summary": "Check monpay4 with provided ID exists",
        "description": "Returns a single monpay4",
        "operationId": "checkmonpay4Exists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monpay4Id",
            "in": "path",
            "description": "ID of monpay4",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/monpay4/count": {
      "get": {
        "tags": [
          "monpay4"
        ],
        "summary": "Get monpay4 count",
        "operationId": "getmonpay4Count",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monpay4/groupby/{columnName}": {
      "get": {
        "tags": [
          "monpay4"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "monpay4GroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monpay4"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monpay4/distribution/{columnName}": {
      "get": {
        "tags": [
          "monpay4"
        ],
        "summary": "",
        "description": "",
        "operationId": "monpay4Distribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monpay4/distinct/{columnName}": {
      "get": {
        "tags": [
          "monpay4"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monpay4Distinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monpay4/aggregate/{columnName}": {
      "get": {
        "tags": [
          "monpay4"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monpay4Aggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monpay4"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monRub": {
      "post": {
        "tags": [
          "monRub"
        ],
        "summary": "Add a new monRub",
        "description": "",
        "operationId": "addmonRub",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monRub object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monRub"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "monRub"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getmonRub",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monRub/{monRubId}": {
      "get": {
        "tags": [
          "monRub"
        ],
        "summary": "Find monRub by ID",
        "description": "Returns a single monRub",
        "operationId": "getmonRubById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monRubId",
            "in": "path",
            "description": "ID of monRub to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monRub"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monRub not found"
          }
        }
      },
      "put": {
        "tags": [
          "monRub"
        ],
        "summary": "Updates a monRub",
        "description": "",
        "operationId": "updatemonRub",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monRubId",
            "in": "path",
            "description": "ID of monRub to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "monRub object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monRub"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monRub"
        ],
        "summary": "Deletes a monRub",
        "description": "",
        "operationId": "deletemonRub",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monRubId",
            "in": "path",
            "description": "ID of monRub to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monRub not found"
          }
        }
      }
    },
    "/api/v1/monRub/bulk": {
      "post": {
        "tags": [
          "monRub"
        ],
        "summary": "Bulk monRub insert",
        "description": "",
        "operationId": "bulkmonRubInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monRub objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monRub"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "monRub"
        ],
        "summary": "Updates a monRub",
        "description": "",
        "operationId": "updatemonRub",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monRub objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monRub"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monRub"
        ],
        "summary": "Deletes a monRub",
        "description": "",
        "operationId": "deletemonRub",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monRub objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monRub"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monRub not found"
          }
        }
      }
    },
    "/api/v1/monRub/findOne": {
      "get": {
        "tags": [
          "monRub"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnemonRub",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monRub"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monRub/{monRubId}/exists": {
      "get": {
        "tags": [
          "monRub"
        ],
        "summary": "Check monRub with provided ID exists",
        "description": "Returns a single monRub",
        "operationId": "checkmonRubExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monRubId",
            "in": "path",
            "description": "ID of monRub",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/monRub/count": {
      "get": {
        "tags": [
          "monRub"
        ],
        "summary": "Get monRub count",
        "operationId": "getmonRubCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monRub/groupby/{columnName}": {
      "get": {
        "tags": [
          "monRub"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "monRubGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monRub"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monRub/distribution/{columnName}": {
      "get": {
        "tags": [
          "monRub"
        ],
        "summary": "",
        "description": "",
        "operationId": "monRubDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monRub/distinct/{columnName}": {
      "get": {
        "tags": [
          "monRub"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monRubDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monRub/aggregate/{columnName}": {
      "get": {
        "tags": [
          "monRub"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monRubAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monRub"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monRubJay": {
      "post": {
        "tags": [
          "monRubJay"
        ],
        "summary": "Add a new monRubJay",
        "description": "",
        "operationId": "addmonRubJay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monRubJay object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monRubJay"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "monRubJay"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getmonRubJay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monRubJay/{monRubJayId}": {
      "get": {
        "tags": [
          "monRubJay"
        ],
        "summary": "Find monRubJay by ID",
        "description": "Returns a single monRubJay",
        "operationId": "getmonRubJayById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monRubJayId",
            "in": "path",
            "description": "ID of monRubJay to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monRubJay"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monRubJay not found"
          }
        }
      },
      "put": {
        "tags": [
          "monRubJay"
        ],
        "summary": "Updates a monRubJay",
        "description": "",
        "operationId": "updatemonRubJay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monRubJayId",
            "in": "path",
            "description": "ID of monRubJay to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "monRubJay object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monRubJay"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monRubJay"
        ],
        "summary": "Deletes a monRubJay",
        "description": "",
        "operationId": "deletemonRubJay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monRubJayId",
            "in": "path",
            "description": "ID of monRubJay to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monRubJay not found"
          }
        }
      }
    },
    "/api/v1/monRubJay/bulk": {
      "post": {
        "tags": [
          "monRubJay"
        ],
        "summary": "Bulk monRubJay insert",
        "description": "",
        "operationId": "bulkmonRubJayInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monRubJay objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monRubJay"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "monRubJay"
        ],
        "summary": "Updates a monRubJay",
        "description": "",
        "operationId": "updatemonRubJay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monRubJay objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monRubJay"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monRubJay"
        ],
        "summary": "Deletes a monRubJay",
        "description": "",
        "operationId": "deletemonRubJay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monRubJay objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monRubJay"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monRubJay not found"
          }
        }
      }
    },
    "/api/v1/monRubJay/findOne": {
      "get": {
        "tags": [
          "monRubJay"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnemonRubJay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monRubJay"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monRubJay/{monRubJayId}/exists": {
      "get": {
        "tags": [
          "monRubJay"
        ],
        "summary": "Check monRubJay with provided ID exists",
        "description": "Returns a single monRubJay",
        "operationId": "checkmonRubJayExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monRubJayId",
            "in": "path",
            "description": "ID of monRubJay",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/monRubJay/count": {
      "get": {
        "tags": [
          "monRubJay"
        ],
        "summary": "Get monRubJay count",
        "operationId": "getmonRubJayCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monRubJay/groupby/{columnName}": {
      "get": {
        "tags": [
          "monRubJay"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "monRubJayGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monRubJay"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monRubJay/distribution/{columnName}": {
      "get": {
        "tags": [
          "monRubJay"
        ],
        "summary": "",
        "description": "",
        "operationId": "monRubJayDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monRubJay/distinct/{columnName}": {
      "get": {
        "tags": [
          "monRubJay"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monRubJayDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monRubJay/aggregate/{columnName}": {
      "get": {
        "tags": [
          "monRubJay"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monRubJayAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monRubJay"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monsod_Day": {
      "post": {
        "tags": [
          "monsod_Day"
        ],
        "summary": "Add a new monsod_Day",
        "description": "",
        "operationId": "addmonsod_Day",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monsod_Day object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monsod_Day"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "monsod_Day"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getmonsod_Day",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monsod_Day/{monsod_DayId}": {
      "get": {
        "tags": [
          "monsod_Day"
        ],
        "summary": "Find monsod_Day by ID",
        "description": "Returns a single monsod_Day",
        "operationId": "getmonsod_DayById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monsod_DayId",
            "in": "path",
            "description": "ID of monsod_Day to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monsod_Day"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monsod_Day not found"
          }
        }
      },
      "put": {
        "tags": [
          "monsod_Day"
        ],
        "summary": "Updates a monsod_Day",
        "description": "",
        "operationId": "updatemonsod_Day",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monsod_DayId",
            "in": "path",
            "description": "ID of monsod_Day to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "monsod_Day object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monsod_Day"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monsod_Day"
        ],
        "summary": "Deletes a monsod_Day",
        "description": "",
        "operationId": "deletemonsod_Day",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monsod_DayId",
            "in": "path",
            "description": "ID of monsod_Day to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monsod_Day not found"
          }
        }
      }
    },
    "/api/v1/monsod_Day/bulk": {
      "post": {
        "tags": [
          "monsod_Day"
        ],
        "summary": "Bulk monsod_Day insert",
        "description": "",
        "operationId": "bulkmonsod_DayInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monsod_Day objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monsod_Day"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "monsod_Day"
        ],
        "summary": "Updates a monsod_Day",
        "description": "",
        "operationId": "updatemonsod_Day",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monsod_Day objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monsod_Day"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monsod_Day"
        ],
        "summary": "Deletes a monsod_Day",
        "description": "",
        "operationId": "deletemonsod_Day",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monsod_Day objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monsod_Day"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monsod_Day not found"
          }
        }
      }
    },
    "/api/v1/monsod_Day/findOne": {
      "get": {
        "tags": [
          "monsod_Day"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnemonsod_Day",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monsod_Day"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monsod_Day/{monsod_DayId}/exists": {
      "get": {
        "tags": [
          "monsod_Day"
        ],
        "summary": "Check monsod_Day with provided ID exists",
        "description": "Returns a single monsod_Day",
        "operationId": "checkmonsod_DayExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monsod_DayId",
            "in": "path",
            "description": "ID of monsod_Day",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/monsod_Day/count": {
      "get": {
        "tags": [
          "monsod_Day"
        ],
        "summary": "Get monsod_Day count",
        "operationId": "getmonsod_DayCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monsod_Day/groupby/{columnName}": {
      "get": {
        "tags": [
          "monsod_Day"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "monsod_DayGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monsod_Day"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monsod_Day/distribution/{columnName}": {
      "get": {
        "tags": [
          "monsod_Day"
        ],
        "summary": "",
        "description": "",
        "operationId": "monsod_DayDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monsod_Day/distinct/{columnName}": {
      "get": {
        "tags": [
          "monsod_Day"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monsod_DayDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monsod_Day/aggregate/{columnName}": {
      "get": {
        "tags": [
          "monsod_Day"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monsod_DayAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monsod_Day"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monsod": {
      "post": {
        "tags": [
          "monsod"
        ],
        "summary": "Add a new monsod",
        "description": "",
        "operationId": "addmonsod",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monsod object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monsod"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "monsod"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getmonsod",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monsod/{monsodId}": {
      "get": {
        "tags": [
          "monsod"
        ],
        "summary": "Find monsod by ID",
        "description": "Returns a single monsod",
        "operationId": "getmonsodById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monsodId",
            "in": "path",
            "description": "ID of monsod to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monsod"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monsod not found"
          }
        }
      },
      "put": {
        "tags": [
          "monsod"
        ],
        "summary": "Updates a monsod",
        "description": "",
        "operationId": "updatemonsod",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monsodId",
            "in": "path",
            "description": "ID of monsod to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "monsod object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monsod"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monsod"
        ],
        "summary": "Deletes a monsod",
        "description": "",
        "operationId": "deletemonsod",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monsodId",
            "in": "path",
            "description": "ID of monsod to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monsod not found"
          }
        }
      }
    },
    "/api/v1/monsod/bulk": {
      "post": {
        "tags": [
          "monsod"
        ],
        "summary": "Bulk monsod insert",
        "description": "",
        "operationId": "bulkmonsodInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monsod objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monsod"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "monsod"
        ],
        "summary": "Updates a monsod",
        "description": "",
        "operationId": "updatemonsod",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monsod objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monsod"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "monsod"
        ],
        "summary": "Deletes a monsod",
        "description": "",
        "operationId": "deletemonsod",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "monsod objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/monsod"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "monsod not found"
          }
        }
      }
    },
    "/api/v1/monsod/findOne": {
      "get": {
        "tags": [
          "monsod"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnemonsod",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monsod"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monsod/{monsodId}/exists": {
      "get": {
        "tags": [
          "monsod"
        ],
        "summary": "Check monsod with provided ID exists",
        "description": "Returns a single monsod",
        "operationId": "checkmonsodExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "monsodId",
            "in": "path",
            "description": "ID of monsod",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/monsod/count": {
      "get": {
        "tags": [
          "monsod"
        ],
        "summary": "Get monsod count",
        "operationId": "getmonsodCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monsod/groupby/{columnName}": {
      "get": {
        "tags": [
          "monsod"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "monsodGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monsod"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monsod/distribution/{columnName}": {
      "get": {
        "tags": [
          "monsod"
        ],
        "summary": "",
        "description": "",
        "operationId": "monsodDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monsod/distinct/{columnName}": {
      "get": {
        "tags": [
          "monsod"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monsodDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/monsod/aggregate/{columnName}": {
      "get": {
        "tags": [
          "monsod"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "monsodAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/monsod"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/num_deadcheck": {
      "post": {
        "tags": [
          "num_deadcheck"
        ],
        "summary": "Add a new num_deadcheck",
        "description": "",
        "operationId": "addnum_deadcheck",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "num_deadcheck object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/num_deadcheck"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "num_deadcheck"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getnum_deadcheck",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/num_deadcheck/{num_deadcheckId}": {
      "get": {
        "tags": [
          "num_deadcheck"
        ],
        "summary": "Find num_deadcheck by ID",
        "description": "Returns a single num_deadcheck",
        "operationId": "getnum_deadcheckById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "num_deadcheckId",
            "in": "path",
            "description": "ID of num_deadcheck to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/num_deadcheck"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "num_deadcheck not found"
          }
        }
      },
      "put": {
        "tags": [
          "num_deadcheck"
        ],
        "summary": "Updates a num_deadcheck",
        "description": "",
        "operationId": "updatenum_deadcheck",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "num_deadcheckId",
            "in": "path",
            "description": "ID of num_deadcheck to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "num_deadcheck object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/num_deadcheck"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "num_deadcheck"
        ],
        "summary": "Deletes a num_deadcheck",
        "description": "",
        "operationId": "deletenum_deadcheck",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "num_deadcheckId",
            "in": "path",
            "description": "ID of num_deadcheck to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "num_deadcheck not found"
          }
        }
      }
    },
    "/api/v1/num_deadcheck/bulk": {
      "post": {
        "tags": [
          "num_deadcheck"
        ],
        "summary": "Bulk num_deadcheck insert",
        "description": "",
        "operationId": "bulknum_deadcheckInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "num_deadcheck objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/num_deadcheck"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "num_deadcheck"
        ],
        "summary": "Updates a num_deadcheck",
        "description": "",
        "operationId": "updatenum_deadcheck",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "num_deadcheck objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/num_deadcheck"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "num_deadcheck"
        ],
        "summary": "Deletes a num_deadcheck",
        "description": "",
        "operationId": "deletenum_deadcheck",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "num_deadcheck objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/num_deadcheck"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "num_deadcheck not found"
          }
        }
      }
    },
    "/api/v1/num_deadcheck/findOne": {
      "get": {
        "tags": [
          "num_deadcheck"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnenum_deadcheck",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/num_deadcheck"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/num_deadcheck/{num_deadcheckId}/exists": {
      "get": {
        "tags": [
          "num_deadcheck"
        ],
        "summary": "Check num_deadcheck with provided ID exists",
        "description": "Returns a single num_deadcheck",
        "operationId": "checknum_deadcheckExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "num_deadcheckId",
            "in": "path",
            "description": "ID of num_deadcheck",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/num_deadcheck/count": {
      "get": {
        "tags": [
          "num_deadcheck"
        ],
        "summary": "Get num_deadcheck count",
        "operationId": "getnum_deadcheckCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/num_deadcheck/groupby/{columnName}": {
      "get": {
        "tags": [
          "num_deadcheck"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "num_deadcheckGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/num_deadcheck"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/num_deadcheck/distribution/{columnName}": {
      "get": {
        "tags": [
          "num_deadcheck"
        ],
        "summary": "",
        "description": "",
        "operationId": "num_deadcheckDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/num_deadcheck/distinct/{columnName}": {
      "get": {
        "tags": [
          "num_deadcheck"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "num_deadcheckDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/num_deadcheck/aggregate/{columnName}": {
      "get": {
        "tags": [
          "num_deadcheck"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "num_deadcheckAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/num_deadcheck"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numdead_up": {
      "post": {
        "tags": [
          "numdead_up"
        ],
        "summary": "Add a new numdead_up",
        "description": "",
        "operationId": "addnumdead_up",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numdead_up object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/numdead_up"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "numdead_up"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getnumdead_up",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numdead_up/{numdead_upId}": {
      "get": {
        "tags": [
          "numdead_up"
        ],
        "summary": "Find numdead_up by ID",
        "description": "Returns a single numdead_up",
        "operationId": "getnumdead_upById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numdead_upId",
            "in": "path",
            "description": "ID of numdead_up to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numdead_up"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "numdead_up not found"
          }
        }
      },
      "put": {
        "tags": [
          "numdead_up"
        ],
        "summary": "Updates a numdead_up",
        "description": "",
        "operationId": "updatenumdead_up",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numdead_upId",
            "in": "path",
            "description": "ID of numdead_up to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "numdead_up object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/numdead_up"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "numdead_up"
        ],
        "summary": "Deletes a numdead_up",
        "description": "",
        "operationId": "deletenumdead_up",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numdead_upId",
            "in": "path",
            "description": "ID of numdead_up to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "numdead_up not found"
          }
        }
      }
    },
    "/api/v1/numdead_up/bulk": {
      "post": {
        "tags": [
          "numdead_up"
        ],
        "summary": "Bulk numdead_up insert",
        "description": "",
        "operationId": "bulknumdead_upInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numdead_up objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/numdead_up"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "numdead_up"
        ],
        "summary": "Updates a numdead_up",
        "description": "",
        "operationId": "updatenumdead_up",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numdead_up objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/numdead_up"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "numdead_up"
        ],
        "summary": "Deletes a numdead_up",
        "description": "",
        "operationId": "deletenumdead_up",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numdead_up objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/numdead_up"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "numdead_up not found"
          }
        }
      }
    },
    "/api/v1/numdead_up/findOne": {
      "get": {
        "tags": [
          "numdead_up"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnenumdead_up",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numdead_up"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numdead_up/{numdead_upId}/exists": {
      "get": {
        "tags": [
          "numdead_up"
        ],
        "summary": "Check numdead_up with provided ID exists",
        "description": "Returns a single numdead_up",
        "operationId": "checknumdead_upExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numdead_upId",
            "in": "path",
            "description": "ID of numdead_up",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/numdead_up/count": {
      "get": {
        "tags": [
          "numdead_up"
        ],
        "summary": "Get numdead_up count",
        "operationId": "getnumdead_upCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numdead_up/groupby/{columnName}": {
      "get": {
        "tags": [
          "numdead_up"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "numdead_upGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numdead_up"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numdead_up/distribution/{columnName}": {
      "get": {
        "tags": [
          "numdead_up"
        ],
        "summary": "",
        "description": "",
        "operationId": "numdead_upDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numdead_up/distinct/{columnName}": {
      "get": {
        "tags": [
          "numdead_up"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "numdead_upDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numdead_up/aggregate/{columnName}": {
      "get": {
        "tags": [
          "numdead_up"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "numdead_upAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numdead_up"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numnotpay": {
      "post": {
        "tags": [
          "numnotpay"
        ],
        "summary": "Add a new numnotpay",
        "description": "",
        "operationId": "addnumnotpay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numnotpay object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/numnotpay"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "numnotpay"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getnumnotpay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numnotpay/{numnotpayId}": {
      "get": {
        "tags": [
          "numnotpay"
        ],
        "summary": "Find numnotpay by ID",
        "description": "Returns a single numnotpay",
        "operationId": "getnumnotpayById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numnotpayId",
            "in": "path",
            "description": "ID of numnotpay to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numnotpay"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "numnotpay not found"
          }
        }
      },
      "put": {
        "tags": [
          "numnotpay"
        ],
        "summary": "Updates a numnotpay",
        "description": "",
        "operationId": "updatenumnotpay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numnotpayId",
            "in": "path",
            "description": "ID of numnotpay to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "numnotpay object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/numnotpay"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "numnotpay"
        ],
        "summary": "Deletes a numnotpay",
        "description": "",
        "operationId": "deletenumnotpay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numnotpayId",
            "in": "path",
            "description": "ID of numnotpay to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "numnotpay not found"
          }
        }
      }
    },
    "/api/v1/numnotpay/bulk": {
      "post": {
        "tags": [
          "numnotpay"
        ],
        "summary": "Bulk numnotpay insert",
        "description": "",
        "operationId": "bulknumnotpayInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numnotpay objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/numnotpay"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "numnotpay"
        ],
        "summary": "Updates a numnotpay",
        "description": "",
        "operationId": "updatenumnotpay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numnotpay objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/numnotpay"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "numnotpay"
        ],
        "summary": "Deletes a numnotpay",
        "description": "",
        "operationId": "deletenumnotpay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numnotpay objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/numnotpay"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "numnotpay not found"
          }
        }
      }
    },
    "/api/v1/numnotpay/findOne": {
      "get": {
        "tags": [
          "numnotpay"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnenumnotpay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numnotpay"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numnotpay/{numnotpayId}/exists": {
      "get": {
        "tags": [
          "numnotpay"
        ],
        "summary": "Check numnotpay with provided ID exists",
        "description": "Returns a single numnotpay",
        "operationId": "checknumnotpayExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numnotpayId",
            "in": "path",
            "description": "ID of numnotpay",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/numnotpay/count": {
      "get": {
        "tags": [
          "numnotpay"
        ],
        "summary": "Get numnotpay count",
        "operationId": "getnumnotpayCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numnotpay/groupby/{columnName}": {
      "get": {
        "tags": [
          "numnotpay"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "numnotpayGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numnotpay"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numnotpay/distribution/{columnName}": {
      "get": {
        "tags": [
          "numnotpay"
        ],
        "summary": "",
        "description": "",
        "operationId": "numnotpayDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numnotpay/distinct/{columnName}": {
      "get": {
        "tags": [
          "numnotpay"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "numnotpayDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numnotpay/aggregate/{columnName}": {
      "get": {
        "tags": [
          "numnotpay"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "numnotpayAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numnotpay"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_memnew": {
      "post": {
        "tags": [
          "numpay_memnew"
        ],
        "summary": "Add a new numpay_memnew",
        "description": "",
        "operationId": "addnumpay_memnew",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numpay_memnew object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/numpay_memnew"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "numpay_memnew"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getnumpay_memnew",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_memnew/{numpay_memnewId}": {
      "get": {
        "tags": [
          "numpay_memnew"
        ],
        "summary": "Find numpay_memnew by ID",
        "description": "Returns a single numpay_memnew",
        "operationId": "getnumpay_memnewById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numpay_memnewId",
            "in": "path",
            "description": "ID of numpay_memnew to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numpay_memnew"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "numpay_memnew not found"
          }
        }
      },
      "put": {
        "tags": [
          "numpay_memnew"
        ],
        "summary": "Updates a numpay_memnew",
        "description": "",
        "operationId": "updatenumpay_memnew",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numpay_memnewId",
            "in": "path",
            "description": "ID of numpay_memnew to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "numpay_memnew object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/numpay_memnew"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "numpay_memnew"
        ],
        "summary": "Deletes a numpay_memnew",
        "description": "",
        "operationId": "deletenumpay_memnew",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numpay_memnewId",
            "in": "path",
            "description": "ID of numpay_memnew to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "numpay_memnew not found"
          }
        }
      }
    },
    "/api/v1/numpay_memnew/bulk": {
      "post": {
        "tags": [
          "numpay_memnew"
        ],
        "summary": "Bulk numpay_memnew insert",
        "description": "",
        "operationId": "bulknumpay_memnewInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numpay_memnew objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/numpay_memnew"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "numpay_memnew"
        ],
        "summary": "Updates a numpay_memnew",
        "description": "",
        "operationId": "updatenumpay_memnew",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numpay_memnew objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/numpay_memnew"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "numpay_memnew"
        ],
        "summary": "Deletes a numpay_memnew",
        "description": "",
        "operationId": "deletenumpay_memnew",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numpay_memnew objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/numpay_memnew"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "numpay_memnew not found"
          }
        }
      }
    },
    "/api/v1/numpay_memnew/findOne": {
      "get": {
        "tags": [
          "numpay_memnew"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnenumpay_memnew",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numpay_memnew"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_memnew/{numpay_memnewId}/exists": {
      "get": {
        "tags": [
          "numpay_memnew"
        ],
        "summary": "Check numpay_memnew with provided ID exists",
        "description": "Returns a single numpay_memnew",
        "operationId": "checknumpay_memnewExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numpay_memnewId",
            "in": "path",
            "description": "ID of numpay_memnew",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/numpay_memnew/count": {
      "get": {
        "tags": [
          "numpay_memnew"
        ],
        "summary": "Get numpay_memnew count",
        "operationId": "getnumpay_memnewCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_memnew/groupby/{columnName}": {
      "get": {
        "tags": [
          "numpay_memnew"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "numpay_memnewGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numpay_memnew"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_memnew/distribution/{columnName}": {
      "get": {
        "tags": [
          "numpay_memnew"
        ],
        "summary": "",
        "description": "",
        "operationId": "numpay_memnewDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_memnew/distinct/{columnName}": {
      "get": {
        "tags": [
          "numpay_memnew"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "numpay_memnewDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_memnew/aggregate/{columnName}": {
      "get": {
        "tags": [
          "numpay_memnew"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "numpay_memnewAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numpay_memnew"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_month": {
      "post": {
        "tags": [
          "numpay_month"
        ],
        "summary": "Add a new numpay_month",
        "description": "",
        "operationId": "addnumpay_month",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numpay_month object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/numpay_month"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "numpay_month"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getnumpay_month",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_month/{numpay_monthId}": {
      "get": {
        "tags": [
          "numpay_month"
        ],
        "summary": "Find numpay_month by ID",
        "description": "Returns a single numpay_month",
        "operationId": "getnumpay_monthById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numpay_monthId",
            "in": "path",
            "description": "ID of numpay_month to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numpay_month"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "numpay_month not found"
          }
        }
      },
      "put": {
        "tags": [
          "numpay_month"
        ],
        "summary": "Updates a numpay_month",
        "description": "",
        "operationId": "updatenumpay_month",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numpay_monthId",
            "in": "path",
            "description": "ID of numpay_month to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "numpay_month object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/numpay_month"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "numpay_month"
        ],
        "summary": "Deletes a numpay_month",
        "description": "",
        "operationId": "deletenumpay_month",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numpay_monthId",
            "in": "path",
            "description": "ID of numpay_month to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "numpay_month not found"
          }
        }
      }
    },
    "/api/v1/numpay_month/bulk": {
      "post": {
        "tags": [
          "numpay_month"
        ],
        "summary": "Bulk numpay_month insert",
        "description": "",
        "operationId": "bulknumpay_monthInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numpay_month objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/numpay_month"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "numpay_month"
        ],
        "summary": "Updates a numpay_month",
        "description": "",
        "operationId": "updatenumpay_month",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numpay_month objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/numpay_month"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "numpay_month"
        ],
        "summary": "Deletes a numpay_month",
        "description": "",
        "operationId": "deletenumpay_month",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numpay_month objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/numpay_month"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "numpay_month not found"
          }
        }
      }
    },
    "/api/v1/numpay_month/findOne": {
      "get": {
        "tags": [
          "numpay_month"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnenumpay_month",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numpay_month"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_month/{numpay_monthId}/exists": {
      "get": {
        "tags": [
          "numpay_month"
        ],
        "summary": "Check numpay_month with provided ID exists",
        "description": "Returns a single numpay_month",
        "operationId": "checknumpay_monthExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numpay_monthId",
            "in": "path",
            "description": "ID of numpay_month",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/numpay_month/count": {
      "get": {
        "tags": [
          "numpay_month"
        ],
        "summary": "Get numpay_month count",
        "operationId": "getnumpay_monthCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_month/groupby/{columnName}": {
      "get": {
        "tags": [
          "numpay_month"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "numpay_monthGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numpay_month"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_month/distribution/{columnName}": {
      "get": {
        "tags": [
          "numpay_month"
        ],
        "summary": "",
        "description": "",
        "operationId": "numpay_monthDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_month/distinct/{columnName}": {
      "get": {
        "tags": [
          "numpay_month"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "numpay_monthDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_month/aggregate/{columnName}": {
      "get": {
        "tags": [
          "numpay_month"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "numpay_monthAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numpay_month"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_years_02": {
      "post": {
        "tags": [
          "numpay_years_02"
        ],
        "summary": "Add a new numpay_years_02",
        "description": "",
        "operationId": "addnumpay_years_02",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numpay_years_02 object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/numpay_years_02"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "numpay_years_02"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getnumpay_years_02",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_years_02/{numpay_years_02Id}": {
      "get": {
        "tags": [
          "numpay_years_02"
        ],
        "summary": "Find numpay_years_02 by ID",
        "description": "Returns a single numpay_years_02",
        "operationId": "getnumpay_years_02ById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numpay_years_02Id",
            "in": "path",
            "description": "ID of numpay_years_02 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numpay_years_02"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "numpay_years_02 not found"
          }
        }
      },
      "put": {
        "tags": [
          "numpay_years_02"
        ],
        "summary": "Updates a numpay_years_02",
        "description": "",
        "operationId": "updatenumpay_years_02",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numpay_years_02Id",
            "in": "path",
            "description": "ID of numpay_years_02 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "numpay_years_02 object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/numpay_years_02"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "numpay_years_02"
        ],
        "summary": "Deletes a numpay_years_02",
        "description": "",
        "operationId": "deletenumpay_years_02",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numpay_years_02Id",
            "in": "path",
            "description": "ID of numpay_years_02 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "numpay_years_02 not found"
          }
        }
      }
    },
    "/api/v1/numpay_years_02/bulk": {
      "post": {
        "tags": [
          "numpay_years_02"
        ],
        "summary": "Bulk numpay_years_02 insert",
        "description": "",
        "operationId": "bulknumpay_years_02Insert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numpay_years_02 objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/numpay_years_02"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "numpay_years_02"
        ],
        "summary": "Updates a numpay_years_02",
        "description": "",
        "operationId": "updatenumpay_years_02",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numpay_years_02 objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/numpay_years_02"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "numpay_years_02"
        ],
        "summary": "Deletes a numpay_years_02",
        "description": "",
        "operationId": "deletenumpay_years_02",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numpay_years_02 objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/numpay_years_02"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "numpay_years_02 not found"
          }
        }
      }
    },
    "/api/v1/numpay_years_02/findOne": {
      "get": {
        "tags": [
          "numpay_years_02"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnenumpay_years_02",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numpay_years_02"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_years_02/{numpay_years_02Id}/exists": {
      "get": {
        "tags": [
          "numpay_years_02"
        ],
        "summary": "Check numpay_years_02 with provided ID exists",
        "description": "Returns a single numpay_years_02",
        "operationId": "checknumpay_years_02Exists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numpay_years_02Id",
            "in": "path",
            "description": "ID of numpay_years_02",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/numpay_years_02/count": {
      "get": {
        "tags": [
          "numpay_years_02"
        ],
        "summary": "Get numpay_years_02 count",
        "operationId": "getnumpay_years_02Count",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_years_02/groupby/{columnName}": {
      "get": {
        "tags": [
          "numpay_years_02"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "numpay_years_02GroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numpay_years_02"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_years_02/distribution/{columnName}": {
      "get": {
        "tags": [
          "numpay_years_02"
        ],
        "summary": "",
        "description": "",
        "operationId": "numpay_years_02Distribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_years_02/distinct/{columnName}": {
      "get": {
        "tags": [
          "numpay_years_02"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "numpay_years_02Distinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_years_02/aggregate/{columnName}": {
      "get": {
        "tags": [
          "numpay_years_02"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "numpay_years_02Aggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numpay_years_02"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_years": {
      "post": {
        "tags": [
          "numpay_years"
        ],
        "summary": "Add a new numpay_years",
        "description": "",
        "operationId": "addnumpay_years",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numpay_years object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/numpay_years"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "numpay_years"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getnumpay_years",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_years/{numpay_yearsId}": {
      "get": {
        "tags": [
          "numpay_years"
        ],
        "summary": "Find numpay_years by ID",
        "description": "Returns a single numpay_years",
        "operationId": "getnumpay_yearsById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numpay_yearsId",
            "in": "path",
            "description": "ID of numpay_years to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numpay_years"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "numpay_years not found"
          }
        }
      },
      "put": {
        "tags": [
          "numpay_years"
        ],
        "summary": "Updates a numpay_years",
        "description": "",
        "operationId": "updatenumpay_years",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numpay_yearsId",
            "in": "path",
            "description": "ID of numpay_years to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "numpay_years object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/numpay_years"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "numpay_years"
        ],
        "summary": "Deletes a numpay_years",
        "description": "",
        "operationId": "deletenumpay_years",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numpay_yearsId",
            "in": "path",
            "description": "ID of numpay_years to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "numpay_years not found"
          }
        }
      }
    },
    "/api/v1/numpay_years/bulk": {
      "post": {
        "tags": [
          "numpay_years"
        ],
        "summary": "Bulk numpay_years insert",
        "description": "",
        "operationId": "bulknumpay_yearsInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numpay_years objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/numpay_years"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "numpay_years"
        ],
        "summary": "Updates a numpay_years",
        "description": "",
        "operationId": "updatenumpay_years",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numpay_years objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/numpay_years"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "numpay_years"
        ],
        "summary": "Deletes a numpay_years",
        "description": "",
        "operationId": "deletenumpay_years",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numpay_years objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/numpay_years"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "numpay_years not found"
          }
        }
      }
    },
    "/api/v1/numpay_years/findOne": {
      "get": {
        "tags": [
          "numpay_years"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnenumpay_years",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numpay_years"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_years/{numpay_yearsId}/exists": {
      "get": {
        "tags": [
          "numpay_years"
        ],
        "summary": "Check numpay_years with provided ID exists",
        "description": "Returns a single numpay_years",
        "operationId": "checknumpay_yearsExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numpay_yearsId",
            "in": "path",
            "description": "ID of numpay_years",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/numpay_years/count": {
      "get": {
        "tags": [
          "numpay_years"
        ],
        "summary": "Get numpay_years count",
        "operationId": "getnumpay_yearsCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_years/groupby/{columnName}": {
      "get": {
        "tags": [
          "numpay_years"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "numpay_yearsGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numpay_years"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_years/distribution/{columnName}": {
      "get": {
        "tags": [
          "numpay_years"
        ],
        "summary": "",
        "description": "",
        "operationId": "numpay_yearsDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_years/distinct/{columnName}": {
      "get": {
        "tags": [
          "numpay_years"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "numpay_yearsDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay_years/aggregate/{columnName}": {
      "get": {
        "tags": [
          "numpay_years"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "numpay_yearsAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numpay_years"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay": {
      "post": {
        "tags": [
          "numpay"
        ],
        "summary": "Add a new numpay",
        "description": "",
        "operationId": "addnumpay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numpay object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/numpay"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "numpay"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getnumpay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay/{numpayId}": {
      "get": {
        "tags": [
          "numpay"
        ],
        "summary": "Find numpay by ID",
        "description": "Returns a single numpay",
        "operationId": "getnumpayById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numpayId",
            "in": "path",
            "description": "ID of numpay to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numpay"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "numpay not found"
          }
        }
      },
      "put": {
        "tags": [
          "numpay"
        ],
        "summary": "Updates a numpay",
        "description": "",
        "operationId": "updatenumpay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numpayId",
            "in": "path",
            "description": "ID of numpay to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "numpay object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/numpay"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "numpay"
        ],
        "summary": "Deletes a numpay",
        "description": "",
        "operationId": "deletenumpay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numpayId",
            "in": "path",
            "description": "ID of numpay to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "numpay not found"
          }
        }
      }
    },
    "/api/v1/numpay/bulk": {
      "post": {
        "tags": [
          "numpay"
        ],
        "summary": "Bulk numpay insert",
        "description": "",
        "operationId": "bulknumpayInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numpay objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/numpay"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "numpay"
        ],
        "summary": "Updates a numpay",
        "description": "",
        "operationId": "updatenumpay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numpay objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/numpay"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "numpay"
        ],
        "summary": "Deletes a numpay",
        "description": "",
        "operationId": "deletenumpay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "numpay objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/numpay"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "numpay not found"
          }
        }
      }
    },
    "/api/v1/numpay/findOne": {
      "get": {
        "tags": [
          "numpay"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnenumpay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numpay"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay/{numpayId}/exists": {
      "get": {
        "tags": [
          "numpay"
        ],
        "summary": "Check numpay with provided ID exists",
        "description": "Returns a single numpay",
        "operationId": "checknumpayExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numpayId",
            "in": "path",
            "description": "ID of numpay",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/numpay/count": {
      "get": {
        "tags": [
          "numpay"
        ],
        "summary": "Get numpay count",
        "operationId": "getnumpayCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay/groupby/{columnName}": {
      "get": {
        "tags": [
          "numpay"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "numpayGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numpay"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay/distribution/{columnName}": {
      "get": {
        "tags": [
          "numpay"
        ],
        "summary": "",
        "description": "",
        "operationId": "numpayDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay/distinct/{columnName}": {
      "get": {
        "tags": [
          "numpay"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "numpayDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/numpay/aggregate/{columnName}": {
      "get": {
        "tags": [
          "numpay"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "numpayAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/numpay"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/pay_other": {
      "post": {
        "tags": [
          "pay_other"
        ],
        "summary": "Add a new pay_other",
        "description": "",
        "operationId": "addpay_other",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "pay_other object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pay_other"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "pay_other"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getpay_other",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/pay_other/{pay_otherId}": {
      "get": {
        "tags": [
          "pay_other"
        ],
        "summary": "Find pay_other by ID",
        "description": "Returns a single pay_other",
        "operationId": "getpay_otherById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pay_otherId",
            "in": "path",
            "description": "ID of pay_other to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/pay_other"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "pay_other not found"
          }
        }
      },
      "put": {
        "tags": [
          "pay_other"
        ],
        "summary": "Updates a pay_other",
        "description": "",
        "operationId": "updatepay_other",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pay_otherId",
            "in": "path",
            "description": "ID of pay_other to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "pay_other object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pay_other"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "pay_other"
        ],
        "summary": "Deletes a pay_other",
        "description": "",
        "operationId": "deletepay_other",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pay_otherId",
            "in": "path",
            "description": "ID of pay_other to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "pay_other not found"
          }
        }
      }
    },
    "/api/v1/pay_other/bulk": {
      "post": {
        "tags": [
          "pay_other"
        ],
        "summary": "Bulk pay_other insert",
        "description": "",
        "operationId": "bulkpay_otherInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "pay_other objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pay_other"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "pay_other"
        ],
        "summary": "Updates a pay_other",
        "description": "",
        "operationId": "updatepay_other",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "pay_other objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pay_other"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "pay_other"
        ],
        "summary": "Deletes a pay_other",
        "description": "",
        "operationId": "deletepay_other",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "pay_other objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pay_other"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "pay_other not found"
          }
        }
      }
    },
    "/api/v1/pay_other/findOne": {
      "get": {
        "tags": [
          "pay_other"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnepay_other",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/pay_other"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/pay_other/{pay_otherId}/exists": {
      "get": {
        "tags": [
          "pay_other"
        ],
        "summary": "Check pay_other with provided ID exists",
        "description": "Returns a single pay_other",
        "operationId": "checkpay_otherExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pay_otherId",
            "in": "path",
            "description": "ID of pay_other",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/pay_other/count": {
      "get": {
        "tags": [
          "pay_other"
        ],
        "summary": "Get pay_other count",
        "operationId": "getpay_otherCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/pay_other/groupby/{columnName}": {
      "get": {
        "tags": [
          "pay_other"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "pay_otherGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/pay_other"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/pay_other/distribution/{columnName}": {
      "get": {
        "tags": [
          "pay_other"
        ],
        "summary": "",
        "description": "",
        "operationId": "pay_otherDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/pay_other/distinct/{columnName}": {
      "get": {
        "tags": [
          "pay_other"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "pay_otherDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/pay_other/aggregate/{columnName}": {
      "get": {
        "tags": [
          "pay_other"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "pay_otherAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/pay_other"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/pay": {
      "post": {
        "tags": [
          "pay"
        ],
        "summary": "Add a new pay",
        "description": "",
        "operationId": "addpay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "pay object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pay"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "pay"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getpay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/pay/{payId}": {
      "get": {
        "tags": [
          "pay"
        ],
        "summary": "Find pay by ID",
        "description": "Returns a single pay",
        "operationId": "getpayById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "payId",
            "in": "path",
            "description": "ID of pay to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/pay"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "pay not found"
          }
        }
      },
      "put": {
        "tags": [
          "pay"
        ],
        "summary": "Updates a pay",
        "description": "",
        "operationId": "updatepay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "payId",
            "in": "path",
            "description": "ID of pay to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "pay object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pay"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "pay"
        ],
        "summary": "Deletes a pay",
        "description": "",
        "operationId": "deletepay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "payId",
            "in": "path",
            "description": "ID of pay to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "pay not found"
          }
        }
      }
    },
    "/api/v1/pay/bulk": {
      "post": {
        "tags": [
          "pay"
        ],
        "summary": "Bulk pay insert",
        "description": "",
        "operationId": "bulkpayInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "pay objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pay"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "pay"
        ],
        "summary": "Updates a pay",
        "description": "",
        "operationId": "updatepay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "pay objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pay"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "pay"
        ],
        "summary": "Deletes a pay",
        "description": "",
        "operationId": "deletepay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "pay objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pay"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "pay not found"
          }
        }
      }
    },
    "/api/v1/pay/findOne": {
      "get": {
        "tags": [
          "pay"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnepay",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/pay"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/pay/{payId}/exists": {
      "get": {
        "tags": [
          "pay"
        ],
        "summary": "Check pay with provided ID exists",
        "description": "Returns a single pay",
        "operationId": "checkpayExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "payId",
            "in": "path",
            "description": "ID of pay",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/pay/count": {
      "get": {
        "tags": [
          "pay"
        ],
        "summary": "Get pay count",
        "operationId": "getpayCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/pay/groupby/{columnName}": {
      "get": {
        "tags": [
          "pay"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "payGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/pay"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/pay/distribution/{columnName}": {
      "get": {
        "tags": [
          "pay"
        ],
        "summary": "",
        "description": "",
        "operationId": "payDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/pay/distinct/{columnName}": {
      "get": {
        "tags": [
          "pay"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "payDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/pay/aggregate/{columnName}": {
      "get": {
        "tags": [
          "pay"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "payAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/pay"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/province": {
      "post": {
        "tags": [
          "province"
        ],
        "summary": "Add a new province",
        "description": "",
        "operationId": "addprovince",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "province object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/province"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "province"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getprovince",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/province/{provinceId}": {
      "get": {
        "tags": [
          "province"
        ],
        "summary": "Find province by ID",
        "description": "Returns a single province",
        "operationId": "getprovinceById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "provinceId",
            "in": "path",
            "description": "ID of province to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/province"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "province not found"
          }
        }
      },
      "put": {
        "tags": [
          "province"
        ],
        "summary": "Updates a province",
        "description": "",
        "operationId": "updateprovince",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "provinceId",
            "in": "path",
            "description": "ID of province to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "province object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/province"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "province"
        ],
        "summary": "Deletes a province",
        "description": "",
        "operationId": "deleteprovince",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "provinceId",
            "in": "path",
            "description": "ID of province to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "province not found"
          }
        }
      }
    },
    "/api/v1/province/bulk": {
      "post": {
        "tags": [
          "province"
        ],
        "summary": "Bulk province insert",
        "description": "",
        "operationId": "bulkprovinceInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "province objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/province"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "province"
        ],
        "summary": "Updates a province",
        "description": "",
        "operationId": "updateprovince",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "province objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/province"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "province"
        ],
        "summary": "Deletes a province",
        "description": "",
        "operationId": "deleteprovince",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "province objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/province"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "province not found"
          }
        }
      }
    },
    "/api/v1/province/findOne": {
      "get": {
        "tags": [
          "province"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneprovince",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/province"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/province/{provinceId}/exists": {
      "get": {
        "tags": [
          "province"
        ],
        "summary": "Check province with provided ID exists",
        "description": "Returns a single province",
        "operationId": "checkprovinceExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "provinceId",
            "in": "path",
            "description": "ID of province",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/province/count": {
      "get": {
        "tags": [
          "province"
        ],
        "summary": "Get province count",
        "operationId": "getprovinceCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/province/groupby/{columnName}": {
      "get": {
        "tags": [
          "province"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "provinceGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/province"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/province/distribution/{columnName}": {
      "get": {
        "tags": [
          "province"
        ],
        "summary": "",
        "description": "",
        "operationId": "provinceDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/province/distinct/{columnName}": {
      "get": {
        "tags": [
          "province"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "provinceDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/province/aggregate/{columnName}": {
      "get": {
        "tags": [
          "province"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "provinceAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/province"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rang": {
      "post": {
        "tags": [
          "rang"
        ],
        "summary": "Add a new rang",
        "description": "",
        "operationId": "addrang",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "rang object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rang"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "rang"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getrang",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rang/{rangId}": {
      "get": {
        "tags": [
          "rang"
        ],
        "summary": "Find rang by ID",
        "description": "Returns a single rang",
        "operationId": "getrangById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rangId",
            "in": "path",
            "description": "ID of rang to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/rang"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "rang not found"
          }
        }
      },
      "put": {
        "tags": [
          "rang"
        ],
        "summary": "Updates a rang",
        "description": "",
        "operationId": "updaterang",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rangId",
            "in": "path",
            "description": "ID of rang to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "rang object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rang"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "rang"
        ],
        "summary": "Deletes a rang",
        "description": "",
        "operationId": "deleterang",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rangId",
            "in": "path",
            "description": "ID of rang to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "rang not found"
          }
        }
      }
    },
    "/api/v1/rang/bulk": {
      "post": {
        "tags": [
          "rang"
        ],
        "summary": "Bulk rang insert",
        "description": "",
        "operationId": "bulkrangInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "rang objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/rang"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "rang"
        ],
        "summary": "Updates a rang",
        "description": "",
        "operationId": "updaterang",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "rang objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/rang"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "rang"
        ],
        "summary": "Deletes a rang",
        "description": "",
        "operationId": "deleterang",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "rang objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/rang"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "rang not found"
          }
        }
      }
    },
    "/api/v1/rang/findOne": {
      "get": {
        "tags": [
          "rang"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnerang",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/rang"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rang/{rangId}/exists": {
      "get": {
        "tags": [
          "rang"
        ],
        "summary": "Check rang with provided ID exists",
        "description": "Returns a single rang",
        "operationId": "checkrangExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rangId",
            "in": "path",
            "description": "ID of rang",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/rang/count": {
      "get": {
        "tags": [
          "rang"
        ],
        "summary": "Get rang count",
        "operationId": "getrangCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rang/groupby/{columnName}": {
      "get": {
        "tags": [
          "rang"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "rangGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/rang"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rang/distribution/{columnName}": {
      "get": {
        "tags": [
          "rang"
        ],
        "summary": "",
        "description": "",
        "operationId": "rangDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rang/distinct/{columnName}": {
      "get": {
        "tags": [
          "rang"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "rangDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rang/aggregate/{columnName}": {
      "get": {
        "tags": [
          "rang"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "rangAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/rang"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rub_other": {
      "post": {
        "tags": [
          "rub_other"
        ],
        "summary": "Add a new rub_other",
        "description": "",
        "operationId": "addrub_other",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "rub_other object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rub_other"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "rub_other"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getrub_other",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rub_other/{rub_otherId}": {
      "get": {
        "tags": [
          "rub_other"
        ],
        "summary": "Find rub_other by ID",
        "description": "Returns a single rub_other",
        "operationId": "getrub_otherById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rub_otherId",
            "in": "path",
            "description": "ID of rub_other to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/rub_other"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "rub_other not found"
          }
        }
      },
      "put": {
        "tags": [
          "rub_other"
        ],
        "summary": "Updates a rub_other",
        "description": "",
        "operationId": "updaterub_other",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rub_otherId",
            "in": "path",
            "description": "ID of rub_other to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "rub_other object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rub_other"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "rub_other"
        ],
        "summary": "Deletes a rub_other",
        "description": "",
        "operationId": "deleterub_other",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rub_otherId",
            "in": "path",
            "description": "ID of rub_other to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "rub_other not found"
          }
        }
      }
    },
    "/api/v1/rub_other/bulk": {
      "post": {
        "tags": [
          "rub_other"
        ],
        "summary": "Bulk rub_other insert",
        "description": "",
        "operationId": "bulkrub_otherInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "rub_other objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/rub_other"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "rub_other"
        ],
        "summary": "Updates a rub_other",
        "description": "",
        "operationId": "updaterub_other",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "rub_other objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/rub_other"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "rub_other"
        ],
        "summary": "Deletes a rub_other",
        "description": "",
        "operationId": "deleterub_other",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "rub_other objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/rub_other"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "rub_other not found"
          }
        }
      }
    },
    "/api/v1/rub_other/findOne": {
      "get": {
        "tags": [
          "rub_other"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnerub_other",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/rub_other"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rub_other/{rub_otherId}/exists": {
      "get": {
        "tags": [
          "rub_other"
        ],
        "summary": "Check rub_other with provided ID exists",
        "description": "Returns a single rub_other",
        "operationId": "checkrub_otherExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rub_otherId",
            "in": "path",
            "description": "ID of rub_other",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/rub_other/count": {
      "get": {
        "tags": [
          "rub_other"
        ],
        "summary": "Get rub_other count",
        "operationId": "getrub_otherCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rub_other/groupby/{columnName}": {
      "get": {
        "tags": [
          "rub_other"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "rub_otherGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/rub_other"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rub_other/distribution/{columnName}": {
      "get": {
        "tags": [
          "rub_other"
        ],
        "summary": "",
        "description": "",
        "operationId": "rub_otherDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rub_other/distinct/{columnName}": {
      "get": {
        "tags": [
          "rub_other"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "rub_otherDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rub_other/aggregate/{columnName}": {
      "get": {
        "tags": [
          "rub_other"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "rub_otherAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/rub_other"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rub": {
      "post": {
        "tags": [
          "rub"
        ],
        "summary": "Add a new rub",
        "description": "",
        "operationId": "addrub",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "rub object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rub"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "rub"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getrub",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rub/{rubId}": {
      "get": {
        "tags": [
          "rub"
        ],
        "summary": "Find rub by ID",
        "description": "Returns a single rub",
        "operationId": "getrubById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rubId",
            "in": "path",
            "description": "ID of rub to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/rub"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "rub not found"
          }
        }
      },
      "put": {
        "tags": [
          "rub"
        ],
        "summary": "Updates a rub",
        "description": "",
        "operationId": "updaterub",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rubId",
            "in": "path",
            "description": "ID of rub to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "rub object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rub"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "rub"
        ],
        "summary": "Deletes a rub",
        "description": "",
        "operationId": "deleterub",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rubId",
            "in": "path",
            "description": "ID of rub to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "rub not found"
          }
        }
      }
    },
    "/api/v1/rub/bulk": {
      "post": {
        "tags": [
          "rub"
        ],
        "summary": "Bulk rub insert",
        "description": "",
        "operationId": "bulkrubInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "rub objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/rub"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "rub"
        ],
        "summary": "Updates a rub",
        "description": "",
        "operationId": "updaterub",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "rub objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/rub"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "rub"
        ],
        "summary": "Deletes a rub",
        "description": "",
        "operationId": "deleterub",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "rub objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/rub"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "rub not found"
          }
        }
      }
    },
    "/api/v1/rub/findOne": {
      "get": {
        "tags": [
          "rub"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnerub",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/rub"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rub/{rubId}/exists": {
      "get": {
        "tags": [
          "rub"
        ],
        "summary": "Check rub with provided ID exists",
        "description": "Returns a single rub",
        "operationId": "checkrubExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rubId",
            "in": "path",
            "description": "ID of rub",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/rub/count": {
      "get": {
        "tags": [
          "rub"
        ],
        "summary": "Get rub count",
        "operationId": "getrubCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rub/groupby/{columnName}": {
      "get": {
        "tags": [
          "rub"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "rubGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/rub"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rub/distribution/{columnName}": {
      "get": {
        "tags": [
          "rub"
        ],
        "summary": "",
        "description": "",
        "operationId": "rubDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rub/distinct/{columnName}": {
      "get": {
        "tags": [
          "rub"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "rubDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rub/aggregate/{columnName}": {
      "get": {
        "tags": [
          "rub"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "rubAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/rub"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/setup_money": {
      "post": {
        "tags": [
          "setup_money"
        ],
        "summary": "Add a new setup_money",
        "description": "",
        "operationId": "addsetup_money",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "setup_money object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/setup_money"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "setup_money"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getsetup_money",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/setup_money/{setup_moneyId}": {
      "get": {
        "tags": [
          "setup_money"
        ],
        "summary": "Find setup_money by ID",
        "description": "Returns a single setup_money",
        "operationId": "getsetup_moneyById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "setup_moneyId",
            "in": "path",
            "description": "ID of setup_money to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/setup_money"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "setup_money not found"
          }
        }
      },
      "put": {
        "tags": [
          "setup_money"
        ],
        "summary": "Updates a setup_money",
        "description": "",
        "operationId": "updatesetup_money",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "setup_moneyId",
            "in": "path",
            "description": "ID of setup_money to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "setup_money object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/setup_money"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "setup_money"
        ],
        "summary": "Deletes a setup_money",
        "description": "",
        "operationId": "deletesetup_money",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "setup_moneyId",
            "in": "path",
            "description": "ID of setup_money to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "setup_money not found"
          }
        }
      }
    },
    "/api/v1/setup_money/bulk": {
      "post": {
        "tags": [
          "setup_money"
        ],
        "summary": "Bulk setup_money insert",
        "description": "",
        "operationId": "bulksetup_moneyInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "setup_money objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/setup_money"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "setup_money"
        ],
        "summary": "Updates a setup_money",
        "description": "",
        "operationId": "updatesetup_money",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "setup_money objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/setup_money"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "setup_money"
        ],
        "summary": "Deletes a setup_money",
        "description": "",
        "operationId": "deletesetup_money",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "setup_money objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/setup_money"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "setup_money not found"
          }
        }
      }
    },
    "/api/v1/setup_money/findOne": {
      "get": {
        "tags": [
          "setup_money"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnesetup_money",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/setup_money"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/setup_money/{setup_moneyId}/exists": {
      "get": {
        "tags": [
          "setup_money"
        ],
        "summary": "Check setup_money with provided ID exists",
        "description": "Returns a single setup_money",
        "operationId": "checksetup_moneyExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "setup_moneyId",
            "in": "path",
            "description": "ID of setup_money",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/setup_money/count": {
      "get": {
        "tags": [
          "setup_money"
        ],
        "summary": "Get setup_money count",
        "operationId": "getsetup_moneyCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/setup_money/groupby/{columnName}": {
      "get": {
        "tags": [
          "setup_money"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "setup_moneyGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/setup_money"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/setup_money/distribution/{columnName}": {
      "get": {
        "tags": [
          "setup_money"
        ],
        "summary": "",
        "description": "",
        "operationId": "setup_moneyDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/setup_money/distinct/{columnName}": {
      "get": {
        "tags": [
          "setup_money"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "setup_moneyDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/setup_money/aggregate/{columnName}": {
      "get": {
        "tags": [
          "setup_money"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "setup_moneyAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/setup_money"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/sinpeemem": {
      "post": {
        "tags": [
          "sinpeemem"
        ],
        "summary": "Add a new sinpeemem",
        "description": "",
        "operationId": "addsinpeemem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "sinpeemem object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sinpeemem"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "sinpeemem"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getsinpeemem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/sinpeemem/{sinpeememId}": {
      "get": {
        "tags": [
          "sinpeemem"
        ],
        "summary": "Find sinpeemem by ID",
        "description": "Returns a single sinpeemem",
        "operationId": "getsinpeememById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sinpeememId",
            "in": "path",
            "description": "ID of sinpeemem to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/sinpeemem"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "sinpeemem not found"
          }
        }
      },
      "put": {
        "tags": [
          "sinpeemem"
        ],
        "summary": "Updates a sinpeemem",
        "description": "",
        "operationId": "updatesinpeemem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sinpeememId",
            "in": "path",
            "description": "ID of sinpeemem to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "sinpeemem object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sinpeemem"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "sinpeemem"
        ],
        "summary": "Deletes a sinpeemem",
        "description": "",
        "operationId": "deletesinpeemem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sinpeememId",
            "in": "path",
            "description": "ID of sinpeemem to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "sinpeemem not found"
          }
        }
      }
    },
    "/api/v1/sinpeemem/bulk": {
      "post": {
        "tags": [
          "sinpeemem"
        ],
        "summary": "Bulk sinpeemem insert",
        "description": "",
        "operationId": "bulksinpeememInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "sinpeemem objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/sinpeemem"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "sinpeemem"
        ],
        "summary": "Updates a sinpeemem",
        "description": "",
        "operationId": "updatesinpeemem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "sinpeemem objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/sinpeemem"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "sinpeemem"
        ],
        "summary": "Deletes a sinpeemem",
        "description": "",
        "operationId": "deletesinpeemem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "sinpeemem objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/sinpeemem"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "sinpeemem not found"
          }
        }
      }
    },
    "/api/v1/sinpeemem/findOne": {
      "get": {
        "tags": [
          "sinpeemem"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnesinpeemem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/sinpeemem"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/sinpeemem/{sinpeememId}/exists": {
      "get": {
        "tags": [
          "sinpeemem"
        ],
        "summary": "Check sinpeemem with provided ID exists",
        "description": "Returns a single sinpeemem",
        "operationId": "checksinpeememExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sinpeememId",
            "in": "path",
            "description": "ID of sinpeemem",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/sinpeemem/count": {
      "get": {
        "tags": [
          "sinpeemem"
        ],
        "summary": "Get sinpeemem count",
        "operationId": "getsinpeememCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/sinpeemem/groupby/{columnName}": {
      "get": {
        "tags": [
          "sinpeemem"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "sinpeememGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/sinpeemem"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/sinpeemem/distribution/{columnName}": {
      "get": {
        "tags": [
          "sinpeemem"
        ],
        "summary": "",
        "description": "",
        "operationId": "sinpeememDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/sinpeemem/distinct/{columnName}": {
      "get": {
        "tags": [
          "sinpeemem"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "sinpeememDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/sinpeemem/aggregate/{columnName}": {
      "get": {
        "tags": [
          "sinpeemem"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "sinpeememAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/sinpeemem"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/status": {
      "post": {
        "tags": [
          "status"
        ],
        "summary": "Add a new status",
        "description": "",
        "operationId": "addstatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "status object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/status"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getstatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/status/{statusId}": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Find status by ID",
        "description": "Returns a single status",
        "operationId": "getstatusById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "statusId",
            "in": "path",
            "description": "ID of status to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "status not found"
          }
        }
      },
      "put": {
        "tags": [
          "status"
        ],
        "summary": "Updates a status",
        "description": "",
        "operationId": "updatestatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "statusId",
            "in": "path",
            "description": "ID of status to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "status object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/status"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "status"
        ],
        "summary": "Deletes a status",
        "description": "",
        "operationId": "deletestatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "statusId",
            "in": "path",
            "description": "ID of status to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "status not found"
          }
        }
      }
    },
    "/api/v1/status/bulk": {
      "post": {
        "tags": [
          "status"
        ],
        "summary": "Bulk status insert",
        "description": "",
        "operationId": "bulkstatusInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "status objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/status"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "status"
        ],
        "summary": "Updates a status",
        "description": "",
        "operationId": "updatestatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "status objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/status"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "status"
        ],
        "summary": "Deletes a status",
        "description": "",
        "operationId": "deletestatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "status objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/status"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "status not found"
          }
        }
      }
    },
    "/api/v1/status/findOne": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnestatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/status/{statusId}/exists": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Check status with provided ID exists",
        "description": "Returns a single status",
        "operationId": "checkstatusExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "statusId",
            "in": "path",
            "description": "ID of status",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/status/count": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Get status count",
        "operationId": "getstatusCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/status/groupby/{columnName}": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "statusGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/status/distribution/{columnName}": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "",
        "description": "",
        "operationId": "statusDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/status/distinct/{columnName}": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "statusDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/status/aggregate/{columnName}": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "statusAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/sysdiagrams": {
      "post": {
        "tags": [
          "sysdiagrams"
        ],
        "summary": "Add a new sysdiagrams",
        "description": "",
        "operationId": "addsysdiagrams",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "sysdiagrams object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sysdiagrams"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "sysdiagrams"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getsysdiagrams",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/sysdiagrams/{sysdiagramsId}": {
      "get": {
        "tags": [
          "sysdiagrams"
        ],
        "summary": "Find sysdiagrams by ID",
        "description": "Returns a single sysdiagrams",
        "operationId": "getsysdiagramsById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sysdiagramsId",
            "in": "path",
            "description": "ID of sysdiagrams to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/sysdiagrams"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "sysdiagrams not found"
          }
        }
      },
      "put": {
        "tags": [
          "sysdiagrams"
        ],
        "summary": "Updates a sysdiagrams",
        "description": "",
        "operationId": "updatesysdiagrams",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sysdiagramsId",
            "in": "path",
            "description": "ID of sysdiagrams to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "sysdiagrams object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sysdiagrams"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "sysdiagrams"
        ],
        "summary": "Deletes a sysdiagrams",
        "description": "",
        "operationId": "deletesysdiagrams",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sysdiagramsId",
            "in": "path",
            "description": "ID of sysdiagrams to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "sysdiagrams not found"
          }
        }
      }
    },
    "/api/v1/sysdiagrams/bulk": {
      "post": {
        "tags": [
          "sysdiagrams"
        ],
        "summary": "Bulk sysdiagrams insert",
        "description": "",
        "operationId": "bulksysdiagramsInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "sysdiagrams objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/sysdiagrams"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "sysdiagrams"
        ],
        "summary": "Updates a sysdiagrams",
        "description": "",
        "operationId": "updatesysdiagrams",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "sysdiagrams objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/sysdiagrams"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "sysdiagrams"
        ],
        "summary": "Deletes a sysdiagrams",
        "description": "",
        "operationId": "deletesysdiagrams",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "sysdiagrams objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/sysdiagrams"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "sysdiagrams not found"
          }
        }
      }
    },
    "/api/v1/sysdiagrams/findOne": {
      "get": {
        "tags": [
          "sysdiagrams"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnesysdiagrams",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/sysdiagrams"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/sysdiagrams/{sysdiagramsId}/exists": {
      "get": {
        "tags": [
          "sysdiagrams"
        ],
        "summary": "Check sysdiagrams with provided ID exists",
        "description": "Returns a single sysdiagrams",
        "operationId": "checksysdiagramsExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sysdiagramsId",
            "in": "path",
            "description": "ID of sysdiagrams",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/sysdiagrams/count": {
      "get": {
        "tags": [
          "sysdiagrams"
        ],
        "summary": "Get sysdiagrams count",
        "operationId": "getsysdiagramsCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/sysdiagrams/groupby/{columnName}": {
      "get": {
        "tags": [
          "sysdiagrams"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "sysdiagramsGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/sysdiagrams"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/sysdiagrams/distribution/{columnName}": {
      "get": {
        "tags": [
          "sysdiagrams"
        ],
        "summary": "",
        "description": "",
        "operationId": "sysdiagramsDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/sysdiagrams/distinct/{columnName}": {
      "get": {
        "tags": [
          "sysdiagrams"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "sysdiagramsDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/sysdiagrams/aggregate/{columnName}": {
      "get": {
        "tags": [
          "sysdiagrams"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "sysdiagramsAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/sysdiagrams"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/total_money": {
      "post": {
        "tags": [
          "total_money"
        ],
        "summary": "Add a new total_money",
        "description": "",
        "operationId": "addtotal_money",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "total_money object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/total_money"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "total_money"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "gettotal_money",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/total_money/{total_moneyId}": {
      "get": {
        "tags": [
          "total_money"
        ],
        "summary": "Find total_money by ID",
        "description": "Returns a single total_money",
        "operationId": "gettotal_moneyById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "total_moneyId",
            "in": "path",
            "description": "ID of total_money to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/total_money"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "total_money not found"
          }
        }
      },
      "put": {
        "tags": [
          "total_money"
        ],
        "summary": "Updates a total_money",
        "description": "",
        "operationId": "updatetotal_money",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "total_moneyId",
            "in": "path",
            "description": "ID of total_money to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "total_money object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/total_money"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "total_money"
        ],
        "summary": "Deletes a total_money",
        "description": "",
        "operationId": "deletetotal_money",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "total_moneyId",
            "in": "path",
            "description": "ID of total_money to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "total_money not found"
          }
        }
      }
    },
    "/api/v1/total_money/bulk": {
      "post": {
        "tags": [
          "total_money"
        ],
        "summary": "Bulk total_money insert",
        "description": "",
        "operationId": "bulktotal_moneyInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "total_money objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/total_money"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "total_money"
        ],
        "summary": "Updates a total_money",
        "description": "",
        "operationId": "updatetotal_money",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "total_money objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/total_money"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "total_money"
        ],
        "summary": "Deletes a total_money",
        "description": "",
        "operationId": "deletetotal_money",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "total_money objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/total_money"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "total_money not found"
          }
        }
      }
    },
    "/api/v1/total_money/findOne": {
      "get": {
        "tags": [
          "total_money"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnetotal_money",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/total_money"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/total_money/{total_moneyId}/exists": {
      "get": {
        "tags": [
          "total_money"
        ],
        "summary": "Check total_money with provided ID exists",
        "description": "Returns a single total_money",
        "operationId": "checktotal_moneyExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "total_moneyId",
            "in": "path",
            "description": "ID of total_money",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/total_money/count": {
      "get": {
        "tags": [
          "total_money"
        ],
        "summary": "Get total_money count",
        "operationId": "gettotal_moneyCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/total_money/groupby/{columnName}": {
      "get": {
        "tags": [
          "total_money"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "total_moneyGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/total_money"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/total_money/distribution/{columnName}": {
      "get": {
        "tags": [
          "total_money"
        ],
        "summary": "",
        "description": "",
        "operationId": "total_moneyDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/total_money/distinct/{columnName}": {
      "get": {
        "tags": [
          "total_money"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "total_moneyDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/total_money/aggregate/{columnName}": {
      "get": {
        "tags": [
          "total_money"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "total_moneyAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/total_money"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tumbon_authoall": {
      "post": {
        "tags": [
          "tumbon_authoall"
        ],
        "summary": "Add a new tumbon_authoall",
        "description": "",
        "operationId": "addtumbon_authoall",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tumbon_authoall object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tumbon_authoall"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "tumbon_authoall"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "gettumbon_authoall",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tumbon_authoall/{tumbon_authoallId}": {
      "get": {
        "tags": [
          "tumbon_authoall"
        ],
        "summary": "Find tumbon_authoall by ID",
        "description": "Returns a single tumbon_authoall",
        "operationId": "gettumbon_authoallById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tumbon_authoallId",
            "in": "path",
            "description": "ID of tumbon_authoall to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tumbon_authoall"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "tumbon_authoall not found"
          }
        }
      },
      "put": {
        "tags": [
          "tumbon_authoall"
        ],
        "summary": "Updates a tumbon_authoall",
        "description": "",
        "operationId": "updatetumbon_authoall",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tumbon_authoallId",
            "in": "path",
            "description": "ID of tumbon_authoall to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "tumbon_authoall object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tumbon_authoall"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "tumbon_authoall"
        ],
        "summary": "Deletes a tumbon_authoall",
        "description": "",
        "operationId": "deletetumbon_authoall",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tumbon_authoallId",
            "in": "path",
            "description": "ID of tumbon_authoall to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "tumbon_authoall not found"
          }
        }
      }
    },
    "/api/v1/tumbon_authoall/bulk": {
      "post": {
        "tags": [
          "tumbon_authoall"
        ],
        "summary": "Bulk tumbon_authoall insert",
        "description": "",
        "operationId": "bulktumbon_authoallInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tumbon_authoall objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tumbon_authoall"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "tumbon_authoall"
        ],
        "summary": "Updates a tumbon_authoall",
        "description": "",
        "operationId": "updatetumbon_authoall",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tumbon_authoall objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tumbon_authoall"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "tumbon_authoall"
        ],
        "summary": "Deletes a tumbon_authoall",
        "description": "",
        "operationId": "deletetumbon_authoall",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tumbon_authoall objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tumbon_authoall"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "tumbon_authoall not found"
          }
        }
      }
    },
    "/api/v1/tumbon_authoall/findOne": {
      "get": {
        "tags": [
          "tumbon_authoall"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnetumbon_authoall",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tumbon_authoall"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tumbon_authoall/{tumbon_authoallId}/exists": {
      "get": {
        "tags": [
          "tumbon_authoall"
        ],
        "summary": "Check tumbon_authoall with provided ID exists",
        "description": "Returns a single tumbon_authoall",
        "operationId": "checktumbon_authoallExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tumbon_authoallId",
            "in": "path",
            "description": "ID of tumbon_authoall",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/tumbon_authoall/count": {
      "get": {
        "tags": [
          "tumbon_authoall"
        ],
        "summary": "Get tumbon_authoall count",
        "operationId": "gettumbon_authoallCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tumbon_authoall/groupby/{columnName}": {
      "get": {
        "tags": [
          "tumbon_authoall"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "tumbon_authoallGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tumbon_authoall"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tumbon_authoall/distribution/{columnName}": {
      "get": {
        "tags": [
          "tumbon_authoall"
        ],
        "summary": "",
        "description": "",
        "operationId": "tumbon_authoallDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tumbon_authoall/distinct/{columnName}": {
      "get": {
        "tags": [
          "tumbon_authoall"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "tumbon_authoallDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tumbon_authoall/aggregate/{columnName}": {
      "get": {
        "tags": [
          "tumbon_authoall"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "tumbon_authoallAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tumbon_authoall"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tumbon_chang": {
      "post": {
        "tags": [
          "tumbon_chang"
        ],
        "summary": "Add a new tumbon_chang",
        "description": "",
        "operationId": "addtumbon_chang",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tumbon_chang object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tumbon_chang"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "tumbon_chang"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "gettumbon_chang",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tumbon_chang/{tumbon_changId}": {
      "get": {
        "tags": [
          "tumbon_chang"
        ],
        "summary": "Find tumbon_chang by ID",
        "description": "Returns a single tumbon_chang",
        "operationId": "gettumbon_changById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tumbon_changId",
            "in": "path",
            "description": "ID of tumbon_chang to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tumbon_chang"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "tumbon_chang not found"
          }
        }
      },
      "put": {
        "tags": [
          "tumbon_chang"
        ],
        "summary": "Updates a tumbon_chang",
        "description": "",
        "operationId": "updatetumbon_chang",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tumbon_changId",
            "in": "path",
            "description": "ID of tumbon_chang to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "tumbon_chang object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tumbon_chang"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "tumbon_chang"
        ],
        "summary": "Deletes a tumbon_chang",
        "description": "",
        "operationId": "deletetumbon_chang",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tumbon_changId",
            "in": "path",
            "description": "ID of tumbon_chang to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "tumbon_chang not found"
          }
        }
      }
    },
    "/api/v1/tumbon_chang/bulk": {
      "post": {
        "tags": [
          "tumbon_chang"
        ],
        "summary": "Bulk tumbon_chang insert",
        "description": "",
        "operationId": "bulktumbon_changInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tumbon_chang objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tumbon_chang"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "tumbon_chang"
        ],
        "summary": "Updates a tumbon_chang",
        "description": "",
        "operationId": "updatetumbon_chang",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tumbon_chang objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tumbon_chang"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "tumbon_chang"
        ],
        "summary": "Deletes a tumbon_chang",
        "description": "",
        "operationId": "deletetumbon_chang",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tumbon_chang objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tumbon_chang"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "tumbon_chang not found"
          }
        }
      }
    },
    "/api/v1/tumbon_chang/findOne": {
      "get": {
        "tags": [
          "tumbon_chang"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnetumbon_chang",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tumbon_chang"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tumbon_chang/{tumbon_changId}/exists": {
      "get": {
        "tags": [
          "tumbon_chang"
        ],
        "summary": "Check tumbon_chang with provided ID exists",
        "description": "Returns a single tumbon_chang",
        "operationId": "checktumbon_changExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tumbon_changId",
            "in": "path",
            "description": "ID of tumbon_chang",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/tumbon_chang/count": {
      "get": {
        "tags": [
          "tumbon_chang"
        ],
        "summary": "Get tumbon_chang count",
        "operationId": "gettumbon_changCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tumbon_chang/groupby/{columnName}": {
      "get": {
        "tags": [
          "tumbon_chang"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "tumbon_changGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tumbon_chang"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tumbon_chang/distribution/{columnName}": {
      "get": {
        "tags": [
          "tumbon_chang"
        ],
        "summary": "",
        "description": "",
        "operationId": "tumbon_changDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tumbon_chang/distinct/{columnName}": {
      "get": {
        "tags": [
          "tumbon_chang"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "tumbon_changDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tumbon_chang/aggregate/{columnName}": {
      "get": {
        "tags": [
          "tumbon_chang"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "tumbon_changAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tumbon_chang"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tumbon": {
      "post": {
        "tags": [
          "tumbon"
        ],
        "summary": "Add a new tumbon",
        "description": "",
        "operationId": "addtumbon",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tumbon object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tumbon"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "tumbon"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "gettumbon",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tumbon/{tumbonId}": {
      "get": {
        "tags": [
          "tumbon"
        ],
        "summary": "Find tumbon by ID",
        "description": "Returns a single tumbon",
        "operationId": "gettumbonById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tumbonId",
            "in": "path",
            "description": "ID of tumbon to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tumbon"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "tumbon not found"
          }
        }
      },
      "put": {
        "tags": [
          "tumbon"
        ],
        "summary": "Updates a tumbon",
        "description": "",
        "operationId": "updatetumbon",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tumbonId",
            "in": "path",
            "description": "ID of tumbon to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "tumbon object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tumbon"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "tumbon"
        ],
        "summary": "Deletes a tumbon",
        "description": "",
        "operationId": "deletetumbon",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tumbonId",
            "in": "path",
            "description": "ID of tumbon to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "tumbon not found"
          }
        }
      }
    },
    "/api/v1/tumbon/bulk": {
      "post": {
        "tags": [
          "tumbon"
        ],
        "summary": "Bulk tumbon insert",
        "description": "",
        "operationId": "bulktumbonInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tumbon objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tumbon"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "tumbon"
        ],
        "summary": "Updates a tumbon",
        "description": "",
        "operationId": "updatetumbon",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tumbon objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tumbon"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "tumbon"
        ],
        "summary": "Deletes a tumbon",
        "description": "",
        "operationId": "deletetumbon",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tumbon objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tumbon"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "tumbon not found"
          }
        }
      }
    },
    "/api/v1/tumbon/findOne": {
      "get": {
        "tags": [
          "tumbon"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnetumbon",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tumbon"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tumbon/{tumbonId}/exists": {
      "get": {
        "tags": [
          "tumbon"
        ],
        "summary": "Check tumbon with provided ID exists",
        "description": "Returns a single tumbon",
        "operationId": "checktumbonExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tumbonId",
            "in": "path",
            "description": "ID of tumbon",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/tumbon/count": {
      "get": {
        "tags": [
          "tumbon"
        ],
        "summary": "Get tumbon count",
        "operationId": "gettumbonCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tumbon/groupby/{columnName}": {
      "get": {
        "tags": [
          "tumbon"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "tumbonGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tumbon"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tumbon/distribution/{columnName}": {
      "get": {
        "tags": [
          "tumbon"
        ],
        "summary": "",
        "description": "",
        "operationId": "tumbonDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tumbon/distinct/{columnName}": {
      "get": {
        "tags": [
          "tumbon"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "tumbonDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/tumbon/aggregate/{columnName}": {
      "get": {
        "tags": [
          "tumbon"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "tumbonAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/tumbon"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/type_name_2": {
      "post": {
        "tags": [
          "type_name_2"
        ],
        "summary": "Add a new type_name_2",
        "description": "",
        "operationId": "addtype_name_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "type_name_2 object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/type_name_2"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "type_name_2"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "gettype_name_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/type_name_2/{type_name_2Id}": {
      "get": {
        "tags": [
          "type_name_2"
        ],
        "summary": "Find type_name_2 by ID",
        "description": "Returns a single type_name_2",
        "operationId": "gettype_name_2ById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type_name_2Id",
            "in": "path",
            "description": "ID of type_name_2 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/type_name_2"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "type_name_2 not found"
          }
        }
      },
      "put": {
        "tags": [
          "type_name_2"
        ],
        "summary": "Updates a type_name_2",
        "description": "",
        "operationId": "updatetype_name_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type_name_2Id",
            "in": "path",
            "description": "ID of type_name_2 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "type_name_2 object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/type_name_2"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "type_name_2"
        ],
        "summary": "Deletes a type_name_2",
        "description": "",
        "operationId": "deletetype_name_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type_name_2Id",
            "in": "path",
            "description": "ID of type_name_2 to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "type_name_2 not found"
          }
        }
      }
    },
    "/api/v1/type_name_2/bulk": {
      "post": {
        "tags": [
          "type_name_2"
        ],
        "summary": "Bulk type_name_2 insert",
        "description": "",
        "operationId": "bulktype_name_2Insert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "type_name_2 objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/type_name_2"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "type_name_2"
        ],
        "summary": "Updates a type_name_2",
        "description": "",
        "operationId": "updatetype_name_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "type_name_2 objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/type_name_2"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "type_name_2"
        ],
        "summary": "Deletes a type_name_2",
        "description": "",
        "operationId": "deletetype_name_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "type_name_2 objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/type_name_2"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "type_name_2 not found"
          }
        }
      }
    },
    "/api/v1/type_name_2/findOne": {
      "get": {
        "tags": [
          "type_name_2"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnetype_name_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/type_name_2"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/type_name_2/{type_name_2Id}/exists": {
      "get": {
        "tags": [
          "type_name_2"
        ],
        "summary": "Check type_name_2 with provided ID exists",
        "description": "Returns a single type_name_2",
        "operationId": "checktype_name_2Exists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type_name_2Id",
            "in": "path",
            "description": "ID of type_name_2",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/type_name_2/count": {
      "get": {
        "tags": [
          "type_name_2"
        ],
        "summary": "Get type_name_2 count",
        "operationId": "gettype_name_2Count",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/type_name_2/groupby/{columnName}": {
      "get": {
        "tags": [
          "type_name_2"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "type_name_2GroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/type_name_2"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/type_name_2/distribution/{columnName}": {
      "get": {
        "tags": [
          "type_name_2"
        ],
        "summary": "",
        "description": "",
        "operationId": "type_name_2Distribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/type_name_2/distinct/{columnName}": {
      "get": {
        "tags": [
          "type_name_2"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "type_name_2Distinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/type_name_2/aggregate/{columnName}": {
      "get": {
        "tags": [
          "type_name_2"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "type_name_2Aggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/type_name_2"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/type_name": {
      "post": {
        "tags": [
          "type_name"
        ],
        "summary": "Add a new type_name",
        "description": "",
        "operationId": "addtype_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "type_name object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/type_name"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "type_name"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "gettype_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/type_name/{type_nameId}": {
      "get": {
        "tags": [
          "type_name"
        ],
        "summary": "Find type_name by ID",
        "description": "Returns a single type_name",
        "operationId": "gettype_nameById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type_nameId",
            "in": "path",
            "description": "ID of type_name to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/type_name"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "type_name not found"
          }
        }
      },
      "put": {
        "tags": [
          "type_name"
        ],
        "summary": "Updates a type_name",
        "description": "",
        "operationId": "updatetype_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type_nameId",
            "in": "path",
            "description": "ID of type_name to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "type_name object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/type_name"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "type_name"
        ],
        "summary": "Deletes a type_name",
        "description": "",
        "operationId": "deletetype_name",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type_nameId",
            "in": "path",
            "description": "ID of type_name to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "type_name not found"
          }
        }
      }
    },
    "/api/v1/type_name/bulk": {
      "post": {
        "tags": [
          "type_name"
        ],
        "summary": "Bulk type_name insert",
        "description": "",
        "operationId": "bulktype_nameInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "type_name objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/type_name"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "type_name"
        ],
        "summary": "Updates a type_name",
        "description": "",
        "operationId": "updatetype_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "type_name objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/type_name"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "type_name"
        ],
        "summary": "Deletes a type_name",
        "description": "",
        "operationId": "deletetype_name",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "type_name objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/type_name"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "type_name not found"
          }
        }
      }
    },
    "/api/v1/type_name/findOne": {
      "get": {
        "tags": [
          "type_name"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnetype_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/type_name"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/type_name/{type_nameId}/exists": {
      "get": {
        "tags": [
          "type_name"
        ],
        "summary": "Check type_name with provided ID exists",
        "description": "Returns a single type_name",
        "operationId": "checktype_nameExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type_nameId",
            "in": "path",
            "description": "ID of type_name",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/type_name/count": {
      "get": {
        "tags": [
          "type_name"
        ],
        "summary": "Get type_name count",
        "operationId": "gettype_nameCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/type_name/groupby/{columnName}": {
      "get": {
        "tags": [
          "type_name"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "type_nameGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/type_name"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/type_name/distribution/{columnName}": {
      "get": {
        "tags": [
          "type_name"
        ],
        "summary": "",
        "description": "",
        "operationId": "type_nameDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/type_name/distinct/{columnName}": {
      "get": {
        "tags": [
          "type_name"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "type_nameDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/type_name/aggregate/{columnName}": {
      "get": {
        "tags": [
          "type_name"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "type_nameAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/type_name"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/useradmin": {
      "post": {
        "tags": [
          "useradmin"
        ],
        "summary": "Add a new useradmin",
        "description": "",
        "operationId": "adduseradmin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "useradmin object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/useradmin"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "useradmin"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getuseradmin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/useradmin/{useradminId}": {
      "get": {
        "tags": [
          "useradmin"
        ],
        "summary": "Find useradmin by ID",
        "description": "Returns a single useradmin",
        "operationId": "getuseradminById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "useradminId",
            "in": "path",
            "description": "ID of useradmin to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/useradmin"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "useradmin not found"
          }
        }
      },
      "put": {
        "tags": [
          "useradmin"
        ],
        "summary": "Updates a useradmin",
        "description": "",
        "operationId": "updateuseradmin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "useradminId",
            "in": "path",
            "description": "ID of useradmin to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "useradmin object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/useradmin"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "useradmin"
        ],
        "summary": "Deletes a useradmin",
        "description": "",
        "operationId": "deleteuseradmin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "useradminId",
            "in": "path",
            "description": "ID of useradmin to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "useradmin not found"
          }
        }
      }
    },
    "/api/v1/useradmin/bulk": {
      "post": {
        "tags": [
          "useradmin"
        ],
        "summary": "Bulk useradmin insert",
        "description": "",
        "operationId": "bulkuseradminInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "useradmin objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/useradmin"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "useradmin"
        ],
        "summary": "Updates a useradmin",
        "description": "",
        "operationId": "updateuseradmin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "useradmin objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/useradmin"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "useradmin"
        ],
        "summary": "Deletes a useradmin",
        "description": "",
        "operationId": "deleteuseradmin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "useradmin objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/useradmin"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "useradmin not found"
          }
        }
      }
    },
    "/api/v1/useradmin/findOne": {
      "get": {
        "tags": [
          "useradmin"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneuseradmin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/useradmin"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/useradmin/{useradminId}/exists": {
      "get": {
        "tags": [
          "useradmin"
        ],
        "summary": "Check useradmin with provided ID exists",
        "description": "Returns a single useradmin",
        "operationId": "checkuseradminExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "useradminId",
            "in": "path",
            "description": "ID of useradmin",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/useradmin/count": {
      "get": {
        "tags": [
          "useradmin"
        ],
        "summary": "Get useradmin count",
        "operationId": "getuseradminCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/useradmin/groupby/{columnName}": {
      "get": {
        "tags": [
          "useradmin"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "useradminGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/useradmin"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/useradmin/distribution/{columnName}": {
      "get": {
        "tags": [
          "useradmin"
        ],
        "summary": "",
        "description": "",
        "operationId": "useradminDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/useradmin/distinct/{columnName}": {
      "get": {
        "tags": [
          "useradmin"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "useradminDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/useradmin/aggregate/{columnName}": {
      "get": {
        "tags": [
          "useradmin"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "useradminAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/useradmin"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/userlog_all": {
      "post": {
        "tags": [
          "userlog_all"
        ],
        "summary": "Add a new userlog_all",
        "description": "",
        "operationId": "adduserlog_all",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "userlog_all object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userlog_all"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "userlog_all"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getuserlog_all",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/userlog_all/{userlog_allId}": {
      "get": {
        "tags": [
          "userlog_all"
        ],
        "summary": "Find userlog_all by ID",
        "description": "Returns a single userlog_all",
        "operationId": "getuserlog_allById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userlog_allId",
            "in": "path",
            "description": "ID of userlog_all to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/userlog_all"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "userlog_all not found"
          }
        }
      },
      "put": {
        "tags": [
          "userlog_all"
        ],
        "summary": "Updates a userlog_all",
        "description": "",
        "operationId": "updateuserlog_all",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userlog_allId",
            "in": "path",
            "description": "ID of userlog_all to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "userlog_all object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userlog_all"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "userlog_all"
        ],
        "summary": "Deletes a userlog_all",
        "description": "",
        "operationId": "deleteuserlog_all",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userlog_allId",
            "in": "path",
            "description": "ID of userlog_all to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "userlog_all not found"
          }
        }
      }
    },
    "/api/v1/userlog_all/bulk": {
      "post": {
        "tags": [
          "userlog_all"
        ],
        "summary": "Bulk userlog_all insert",
        "description": "",
        "operationId": "bulkuserlog_allInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "userlog_all objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/userlog_all"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "userlog_all"
        ],
        "summary": "Updates a userlog_all",
        "description": "",
        "operationId": "updateuserlog_all",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "userlog_all objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/userlog_all"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "userlog_all"
        ],
        "summary": "Deletes a userlog_all",
        "description": "",
        "operationId": "deleteuserlog_all",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "userlog_all objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/userlog_all"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "userlog_all not found"
          }
        }
      }
    },
    "/api/v1/userlog_all/findOne": {
      "get": {
        "tags": [
          "userlog_all"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneuserlog_all",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/userlog_all"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/userlog_all/{userlog_allId}/exists": {
      "get": {
        "tags": [
          "userlog_all"
        ],
        "summary": "Check userlog_all with provided ID exists",
        "description": "Returns a single userlog_all",
        "operationId": "checkuserlog_allExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userlog_allId",
            "in": "path",
            "description": "ID of userlog_all",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/userlog_all/count": {
      "get": {
        "tags": [
          "userlog_all"
        ],
        "summary": "Get userlog_all count",
        "operationId": "getuserlog_allCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/userlog_all/groupby/{columnName}": {
      "get": {
        "tags": [
          "userlog_all"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "userlog_allGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/userlog_all"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/userlog_all/distribution/{columnName}": {
      "get": {
        "tags": [
          "userlog_all"
        ],
        "summary": "",
        "description": "",
        "operationId": "userlog_allDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/userlog_all/distinct/{columnName}": {
      "get": {
        "tags": [
          "userlog_all"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "userlog_allDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/userlog_all/aggregate/{columnName}": {
      "get": {
        "tags": [
          "userlog_all"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "userlog_allAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/userlog_all"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/village": {
      "post": {
        "tags": [
          "village"
        ],
        "summary": "Add a new village",
        "description": "",
        "operationId": "addvillage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "village object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/village"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "village"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getvillage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/village/{villageId}": {
      "get": {
        "tags": [
          "village"
        ],
        "summary": "Find village by ID",
        "description": "Returns a single village",
        "operationId": "getvillageById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "villageId",
            "in": "path",
            "description": "ID of village to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/village"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "village not found"
          }
        }
      },
      "put": {
        "tags": [
          "village"
        ],
        "summary": "Updates a village",
        "description": "",
        "operationId": "updatevillage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "villageId",
            "in": "path",
            "description": "ID of village to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "village object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/village"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "village"
        ],
        "summary": "Deletes a village",
        "description": "",
        "operationId": "deletevillage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "villageId",
            "in": "path",
            "description": "ID of village to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "village not found"
          }
        }
      }
    },
    "/api/v1/village/bulk": {
      "post": {
        "tags": [
          "village"
        ],
        "summary": "Bulk village insert",
        "description": "",
        "operationId": "bulkvillageInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "village objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/village"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "village"
        ],
        "summary": "Updates a village",
        "description": "",
        "operationId": "updatevillage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "village objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/village"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "village"
        ],
        "summary": "Deletes a village",
        "description": "",
        "operationId": "deletevillage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "village objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/village"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "village not found"
          }
        }
      }
    },
    "/api/v1/village/findOne": {
      "get": {
        "tags": [
          "village"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnevillage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/village"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/village/{villageId}/exists": {
      "get": {
        "tags": [
          "village"
        ],
        "summary": "Check village with provided ID exists",
        "description": "Returns a single village",
        "operationId": "checkvillageExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "villageId",
            "in": "path",
            "description": "ID of village",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/village/count": {
      "get": {
        "tags": [
          "village"
        ],
        "summary": "Get village count",
        "operationId": "getvillageCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/village/groupby/{columnName}": {
      "get": {
        "tags": [
          "village"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "villageGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/village"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/village/distribution/{columnName}": {
      "get": {
        "tags": [
          "village"
        ],
        "summary": "",
        "description": "",
        "operationId": "villageDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/village/distinct/{columnName}": {
      "get": {
        "tags": [
          "village"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "villageDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/village/aggregate/{columnName}": {
      "get": {
        "tags": [
          "village"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "villageAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/village"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/yearsrecord": {
      "post": {
        "tags": [
          "yearsrecord"
        ],
        "summary": "Add a new yearsrecord",
        "description": "",
        "operationId": "addyearsrecord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "yearsrecord object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/yearsrecord"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "yearsrecord"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getyearsrecord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/yearsrecord/{yearsrecordId}": {
      "get": {
        "tags": [
          "yearsrecord"
        ],
        "summary": "Find yearsrecord by ID",
        "description": "Returns a single yearsrecord",
        "operationId": "getyearsrecordById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "yearsrecordId",
            "in": "path",
            "description": "ID of yearsrecord to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/yearsrecord"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "yearsrecord not found"
          }
        }
      },
      "put": {
        "tags": [
          "yearsrecord"
        ],
        "summary": "Updates a yearsrecord",
        "description": "",
        "operationId": "updateyearsrecord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "yearsrecordId",
            "in": "path",
            "description": "ID of yearsrecord to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "yearsrecord object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/yearsrecord"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "yearsrecord"
        ],
        "summary": "Deletes a yearsrecord",
        "description": "",
        "operationId": "deleteyearsrecord",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "yearsrecordId",
            "in": "path",
            "description": "ID of yearsrecord to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "yearsrecord not found"
          }
        }
      }
    },
    "/api/v1/yearsrecord/bulk": {
      "post": {
        "tags": [
          "yearsrecord"
        ],
        "summary": "Bulk yearsrecord insert",
        "description": "",
        "operationId": "bulkyearsrecordInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "yearsrecord objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/yearsrecord"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "yearsrecord"
        ],
        "summary": "Updates a yearsrecord",
        "description": "",
        "operationId": "updateyearsrecord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "yearsrecord objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/yearsrecord"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "yearsrecord"
        ],
        "summary": "Deletes a yearsrecord",
        "description": "",
        "operationId": "deleteyearsrecord",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "yearsrecord objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/yearsrecord"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "yearsrecord not found"
          }
        }
      }
    },
    "/api/v1/yearsrecord/findOne": {
      "get": {
        "tags": [
          "yearsrecord"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneyearsrecord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/yearsrecord"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/yearsrecord/{yearsrecordId}/exists": {
      "get": {
        "tags": [
          "yearsrecord"
        ],
        "summary": "Check yearsrecord with provided ID exists",
        "description": "Returns a single yearsrecord",
        "operationId": "checkyearsrecordExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "yearsrecordId",
            "in": "path",
            "description": "ID of yearsrecord",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/yearsrecord/count": {
      "get": {
        "tags": [
          "yearsrecord"
        ],
        "summary": "Get yearsrecord count",
        "operationId": "getyearsrecordCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/yearsrecord/groupby/{columnName}": {
      "get": {
        "tags": [
          "yearsrecord"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "yearsrecordGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/yearsrecord"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/yearsrecord/distribution/{columnName}": {
      "get": {
        "tags": [
          "yearsrecord"
        ],
        "summary": "",
        "description": "",
        "operationId": "yearsrecordDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/yearsrecord/distinct/{columnName}": {
      "get": {
        "tags": [
          "yearsrecord"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "yearsrecordDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/yearsrecord/aggregate/{columnName}": {
      "get": {
        "tags": [
          "yearsrecord"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "yearsrecordAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/yearsrecord"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/zipcode": {
      "post": {
        "tags": [
          "zipcode"
        ],
        "summary": "Add a new zipcode",
        "description": "",
        "operationId": "addzipcode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "zipcode object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zipcode"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "zipcode"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getzipcode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/zipcode/{zipcodeId}": {
      "get": {
        "tags": [
          "zipcode"
        ],
        "summary": "Find zipcode by ID",
        "description": "Returns a single zipcode",
        "operationId": "getzipcodeById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zipcodeId",
            "in": "path",
            "description": "ID of zipcode to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/zipcode"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "zipcode not found"
          }
        }
      },
      "put": {
        "tags": [
          "zipcode"
        ],
        "summary": "Updates a zipcode",
        "description": "",
        "operationId": "updatezipcode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zipcodeId",
            "in": "path",
            "description": "ID of zipcode to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "zipcode object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zipcode"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "zipcode"
        ],
        "summary": "Deletes a zipcode",
        "description": "",
        "operationId": "deletezipcode",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zipcodeId",
            "in": "path",
            "description": "ID of zipcode to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "zipcode not found"
          }
        }
      }
    },
    "/api/v1/zipcode/bulk": {
      "post": {
        "tags": [
          "zipcode"
        ],
        "summary": "Bulk zipcode insert",
        "description": "",
        "operationId": "bulkzipcodeInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "zipcode objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/zipcode"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "zipcode"
        ],
        "summary": "Updates a zipcode",
        "description": "",
        "operationId": "updatezipcode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "zipcode objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/zipcode"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "zipcode"
        ],
        "summary": "Deletes a zipcode",
        "description": "",
        "operationId": "deletezipcode",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "zipcode objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/zipcode"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "zipcode not found"
          }
        }
      }
    },
    "/api/v1/zipcode/findOne": {
      "get": {
        "tags": [
          "zipcode"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnezipcode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/zipcode"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/zipcode/{zipcodeId}/exists": {
      "get": {
        "tags": [
          "zipcode"
        ],
        "summary": "Check zipcode with provided ID exists",
        "description": "Returns a single zipcode",
        "operationId": "checkzipcodeExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zipcodeId",
            "in": "path",
            "description": "ID of zipcode",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/zipcode/count": {
      "get": {
        "tags": [
          "zipcode"
        ],
        "summary": "Get zipcode count",
        "operationId": "getzipcodeCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/zipcode/groupby/{columnName}": {
      "get": {
        "tags": [
          "zipcode"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "zipcodeGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/zipcode"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/zipcode/distribution/{columnName}": {
      "get": {
        "tags": [
          "zipcode"
        ],
        "summary": "",
        "description": "",
        "operationId": "zipcodeDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/zipcode/distinct/{columnName}": {
      "get": {
        "tags": [
          "zipcode"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "zipcodeDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/zipcode/aggregate/{columnName}": {
      "get": {
        "tags": [
          "zipcode"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "zipcodeAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/zipcode"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    }
  },
  "definitions": {
    "userAuth": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "nullable": false,
          "example": "test@xgenecloud.com"
        },
        "password": {
          "type": "string",
          "format": "password",
          "nullable": false,
          "example": "password"
        }
      }
    },
    "user": {
      "allOf": [
        {
          "$ref": "#/definitions/userAuth"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "nullable": false,
              "readOnly": true
            },
            "firstname": {
              "type": "string",
              "nullable": false,
              "example": "FirstName"
            },
            "lastname": {
              "type": "string",
              "nullable": false,
              "example": "LastName"
            },
            "roles": {
              "type": "object",
              "readOnly": true
            },
            "created_at": {
              "type": "string",
              "readOnly": true
            },
            "updated_at": {
              "type": "string",
              "readOnly": true
            },
            "email_verified": {
              "type": "boolean",
              "readOnly": true
            }
          }
        }
      ]
    },
    "account": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "ID_Acc_Check": {
          "type": "string"
        },
        "acc_id": {
          "type": "string"
        },
        "bank_acc": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type_name": {
          "type": "string"
        },
        "date_open": {
          "type": "string"
        },
        "balance": {
          "type": "number",
          "format": "float"
        },
        "remark": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        }
      }
    },
    "accountdetail": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "ID_Acc_Check": {
          "type": "string"
        },
        "a_id": {
          "type": "integer"
        },
        "accout_id": {
          "type": "string"
        },
        "detail": {
          "type": "string"
        },
        "pay": {
          "type": "number",
          "format": "float"
        },
        "recive": {
          "type": "number",
          "format": "float"
        },
        "dog": {
          "type": "number",
          "format": "float"
        },
        "balance": {
          "type": "number",
          "format": "float"
        },
        "date_rec": {
          "type": "string"
        },
        "Ddate_rec": {
          "type": "integer"
        },
        "Mdate_rec": {
          "type": "string"
        },
        "Ydate_rec": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        }
      }
    },
    "accountdetailNee": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "ID_Acc_Check": {
          "type": "string"
        },
        "a_id": {
          "type": "integer"
        },
        "accout_id": {
          "type": "string"
        },
        "detail": {
          "type": "string"
        },
        "pay": {
          "type": "number",
          "format": "float"
        },
        "recive": {
          "type": "number",
          "format": "float"
        },
        "dog": {
          "type": "number",
          "format": "float"
        },
        "balance": {
          "type": "number",
          "format": "float"
        },
        "date_rec": {
          "type": "string"
        },
        "Ddate_rec": {
          "type": "integer"
        },
        "Mdate_rec": {
          "type": "string"
        },
        "Ydate_rec": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        }
      }
    },
    "accountNee": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "ID_Acc_Check": {
          "type": "string"
        },
        "acc_id": {
          "type": "string"
        },
        "bank_acc": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type_name": {
          "type": "string"
        },
        "date_open": {
          "type": "string"
        },
        "balance": {
          "type": "number",
          "format": "float"
        },
        "remark": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        }
      }
    },
    "accountrec": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "id_acc": {
          "type": "integer"
        },
        "years": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "balance": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "adminlog": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "admin_name": {
          "type": "string"
        },
        "computer_name": {
          "type": "string"
        },
        "sIPAddress": {
          "type": "string"
        },
        "timelog": {
          "type": "string"
        },
        "Dlog": {
          "type": "integer"
        },
        "Mlog": {
          "type": "integer"
        },
        "Ylog": {
          "type": "integer"
        },
        "time1": {
          "type": "string"
        },
        "sumrecord": {
          "type": "integer"
        },
        "menu_id": {
          "type": "string"
        },
        "menu_name": {
          "type": "string"
        }
      }
    },
    "amphur": {
      "type": "object",
      "properties": {
        "AMPHUR_ID": {
          "type": "integer"
        },
        "AMPHUR_CODE": {
          "type": "string"
        },
        "AMPHUR_NAME": {
          "type": "string"
        },
        "GEO_ID": {
          "type": "integer"
        },
        "PROVINCE_ID": {
          "type": "integer"
        }
      }
    },
    "ban": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "ban_id": {
          "type": "integer"
        },
        "ban_name": {
          "type": "string"
        },
        "ban_tumbon_id": {
          "type": "integer"
        }
      }
    },
    "bank_name": {
      "type": "object",
      "properties": {
        "bank_id": {
          "type": "integer"
        },
        "bank_name": {
          "type": "string"
        },
        "bank": {
          "type": "string"
        }
      }
    },
    "bill_Group": {
      "type": "object",
      "properties": {
        "bill_G_ID": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "sesion_unit": {
          "type": "integer"
        },
        "add_mu": {
          "type": "number",
          "format": "float"
        },
        "tumbon_id": {
          "type": "integer"
        },
        "years": {
          "type": "string"
        },
        "pay_number": {
          "type": "integer"
        },
        "pay_number2": {
          "type": "integer"
        },
        "date_to_pay": {
          "type": "string"
        },
        "DPay": {
          "type": "integer"
        },
        "MPay": {
          "type": "string"
        },
        "YPay": {
          "type": "string"
        },
        "notbill": {
          "type": "string"
        },
        "mon2": {
          "type": "integer"
        },
        "mon4": {
          "type": "integer"
        },
        "nummem": {
          "type": "integer"
        },
        "pay_type": {
          "type": "integer"
        },
        "status_bill": {
          "type": "integer"
        },
        "bill_new_ym": {
          "type": "integer"
        },
        "file_pdf": {
          "type": "string"
        },
        "type_pay_mem": {
          "type": "integer"
        },
        "remark": {
          "type": "string"
        }
      }
    },
    "bill_update": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "bill_update": {
          "type": "number",
          "format": "float"
        },
        "bill_id": {
          "type": "integer"
        }
      }
    },
    "cause": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "cause_id": {
          "type": "integer"
        },
        "cause_name": {
          "type": "string"
        }
      }
    },
    "cause1": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "cause_id": {
          "type": "integer"
        },
        "cause_name": {
          "type": "string"
        }
      }
    },
    "chang_name": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "member_id": {
          "type": "integer"
        },
        "id_chang": {
          "type": "integer"
        },
        "name_new": {
          "type": "string"
        },
        "name_old": {
          "type": "string"
        },
        "date_chang": {
          "type": "string"
        },
        "DD": {
          "type": "integer"
        },
        "MM": {
          "type": "integer"
        },
        "YY": {
          "type": "integer"
        },
        "adminname": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        }
      }
    },
    "date_present": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "date_present": {
          "type": "string"
        }
      }
    },
    "detail_name": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "detail_name_id": {
          "type": "string"
        },
        "detail_name": {
          "type": "string"
        }
      }
    },
    "detail_pay": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "detail_id": {
          "type": "integer"
        },
        "member_id": {
          "type": "integer"
        },
        "detail_pay": {
          "type": "string"
        },
        "number_money_pay": {
          "type": "string"
        },
        "number_pay": {
          "type": "integer"
        },
        "date_pay": {
          "type": "string"
        }
      }
    },
    "district": {
      "type": "object",
      "properties": {
        "DISTRICT_ID": {
          "type": "integer"
        },
        "DISTRICT_CODE": {
          "type": "string"
        },
        "DISTRICT_NAME": {
          "type": "string"
        },
        "AMPHUR_ID": {
          "type": "integer"
        },
        "PROVINCE_ID": {
          "type": "integer"
        },
        "GEO_ID": {
          "type": "integer"
        },
        "ZIPCODE": {
          "type": "string"
        }
      }
    },
    "geography": {
      "type": "object",
      "properties": {
        "GEO_ID": {
          "type": "integer"
        },
        "GEO_NAME": {
          "type": "string"
        }
      }
    },
    "mem1": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "mem_id": {
          "type": "integer"
        },
        "mon_mem": {
          "type": "number",
          "format": "float"
        },
        "datefirst_pay": {
          "type": "string"
        },
        "yearsfirst_pay": {
          "type": "string"
        },
        "years_pay": {
          "type": "string"
        }
      }
    },
    "mem2": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "mem_id": {
          "type": "integer"
        },
        "mon_mem": {
          "type": "number",
          "format": "float"
        },
        "datefirst_pay": {
          "type": "string"
        },
        "yearsfirst_pay": {
          "type": "string"
        },
        "years_pay": {
          "type": "string"
        }
      }
    },
    "mem3": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "mem_id": {
          "type": "integer"
        },
        "mon_mem": {
          "type": "number",
          "format": "float"
        },
        "datefirst_pay": {
          "type": "string"
        },
        "yearsfirst_pay": {
          "type": "string"
        },
        "years_pay": {
          "type": "string"
        }
      }
    },
    "member_pay_2": {
      "type": "object",
      "properties": {
        "bill_id": {
          "type": "integer"
        },
        "sesion_unit": {
          "type": "integer"
        },
        "bill_Up_id": {
          "type": "number",
          "format": "float"
        },
        "bill_G_id": {
          "type": "integer"
        },
        "member_id": {
          "type": "integer"
        },
        "money_pay1": {
          "type": "integer"
        },
        "money_pay2": {
          "type": "integer"
        },
        "years": {
          "type": "string"
        },
        "money_pay3": {
          "type": "number",
          "format": "float"
        },
        "dead_number": {
          "type": "string"
        },
        "dead_pay1": {
          "type": "integer"
        },
        "dead_pay2": {
          "type": "integer"
        },
        "pay_number": {
          "type": "integer"
        },
        "pay_number2": {
          "type": "integer"
        },
        "member_pay_number": {
          "type": "integer"
        },
        "member_pay_number2": {
          "type": "integer"
        },
        "money_pay4": {
          "type": "integer"
        },
        "money_pay5": {
          "type": "integer"
        },
        "money_pay6": {
          "type": "integer"
        },
        "money_pay44": {
          "type": "integer"
        },
        "money_pay_detail": {
          "type": "string"
        },
        "date_to_pay": {
          "type": "string"
        },
        "DPay": {
          "type": "integer"
        },
        "MPay": {
          "type": "string"
        },
        "YPay": {
          "type": "string"
        },
        "date_to_pay_2": {
          "type": "string"
        },
        "DPay_2": {
          "type": "integer"
        },
        "MPay_2": {
          "type": "string"
        },
        "YPay_2": {
          "type": "string"
        },
        "name_pay": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        },
        "notbill": {
          "type": "string"
        },
        "printpassbook": {
          "type": "integer"
        },
        "pay_type": {
          "type": "integer"
        },
        "status_bill_mem": {
          "type": "integer"
        },
        "tumbon_id_save": {
          "type": "integer"
        }
      }
    },
    "member_pay": {
      "type": "object",
      "properties": {
        "bill_id": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "sesion_unit": {
          "type": "integer"
        },
        "bill_Up_id": {
          "type": "number",
          "format": "float"
        },
        "bill_G_id": {
          "type": "integer"
        },
        "member_id": {
          "type": "integer"
        },
        "money_pay1": {
          "type": "number",
          "format": "float"
        },
        "money_pay2": {
          "type": "number",
          "format": "float"
        },
        "years": {
          "type": "string"
        },
        "money_pay3": {
          "type": "number",
          "format": "float"
        },
        "dead_number": {
          "type": "string"
        },
        "dead_number1": {
          "type": "string"
        },
        "dead_number2": {
          "type": "string"
        },
        "pay_number": {
          "type": "integer"
        },
        "pay_number2": {
          "type": "integer"
        },
        "member_pay_number": {
          "type": "integer"
        },
        "member_pay_number2": {
          "type": "integer"
        },
        "money_pay4": {
          "type": "number",
          "format": "float"
        },
        "money_pay5": {
          "type": "number",
          "format": "float"
        },
        "money_pay6": {
          "type": "number",
          "format": "float"
        },
        "money_pay44": {
          "type": "number",
          "format": "float"
        },
        "money_pay_detail": {
          "type": "string"
        },
        "date_to_pay": {
          "type": "string"
        },
        "DPay": {
          "type": "integer"
        },
        "MPay": {
          "type": "string"
        },
        "YPay": {
          "type": "string"
        },
        "date_to_pay_2": {
          "type": "string"
        },
        "DPay_2": {
          "type": "integer"
        },
        "MPay_2": {
          "type": "string"
        },
        "YPay_2": {
          "type": "string"
        },
        "name_pay": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        },
        "notbill": {
          "type": "string"
        },
        "printpassbook": {
          "type": "integer"
        },
        "pay_type": {
          "type": "integer"
        },
        "status_bill_mem": {
          "type": "integer"
        },
        "tumbon_id_save": {
          "type": "integer"
        }
      }
    },
    "member": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "member_id": {
          "type": "integer"
        },
        "rang_id": {
          "type": "integer"
        },
        "rang_name": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "name_old": {
          "type": "string"
        },
        "member_up": {
          "type": "integer"
        },
        "name_up_re": {
          "type": "string"
        },
        "pass_id": {
          "type": "string"
        },
        "group_id": {
          "type": "integer"
        },
        "id_13": {
          "type": "string"
        },
        "type_name_id": {
          "type": "integer"
        },
        "type_name222": {
          "type": "string"
        },
        "position": {
          "type": "string"
        },
        "kotobo": {
          "type": "integer"
        },
        "type_name_id_2": {
          "type": "integer"
        },
        "relation": {
          "type": "string"
        },
        "numdead_start": {
          "type": "string"
        },
        "bill_id_start": {
          "type": "integer"
        },
        "pay_check": {
          "type": "string"
        },
        "cause_not_id": {
          "type": "string"
        },
        "cause_out_id": {
          "type": "string"
        },
        "cause_out": {
          "type": "string"
        },
        "birth": {
          "type": "string"
        },
        "age": {
          "type": "string"
        },
        "tel": {
          "type": "string"
        },
        "add_num": {
          "type": "string"
        },
        "add_mu": {
          "type": "integer"
        },
        "ban": {
          "type": "string"
        },
        "road": {
          "type": "string"
        },
        "soi": {
          "type": "string"
        },
        "tumbon_id": {
          "type": "integer"
        },
        "tumbon_nameout": {
          "type": "string"
        },
        "ampher": {
          "type": "string"
        },
        "province": {
          "type": "string"
        },
        "post": {
          "type": "string"
        },
        "hus_wife": {
          "type": "string"
        },
        "child": {
          "type": "string"
        },
        "date_first": {
          "type": "string"
        },
        "Ddate_first": {
          "type": "integer"
        },
        "Mdate_first": {
          "type": "integer"
        },
        "Ydate_first": {
          "type": "integer"
        },
        "date_first1": {
          "type": "string"
        },
        "Ddate_first1": {
          "type": "integer"
        },
        "Mdate_first1": {
          "type": "integer"
        },
        "Ydate_first1": {
          "type": "integer"
        },
        "date_first2": {
          "type": "string"
        },
        "Ddate_first2": {
          "type": "integer"
        },
        "Mdate_first2": {
          "type": "integer"
        },
        "Ydate_first2": {
          "type": "integer"
        },
        "date_continue": {
          "type": "string"
        },
        "monney_fee": {
          "type": "integer"
        },
        "money_det": {
          "type": "integer"
        },
        "number_pay": {
          "type": "integer"
        },
        "money_before": {
          "type": "number",
          "format": "float"
        },
        "date_money_before": {
          "type": "string"
        },
        "money_before_dead": {
          "type": "number",
          "format": "float"
        },
        "numdead_update": {
          "type": "integer"
        },
        "dead_number1up": {
          "type": "string"
        },
        "dead_number2up": {
          "type": "string"
        },
        "pay_number_update": {
          "type": "string"
        },
        "years_up": {
          "type": "integer"
        },
        "remark1": {
          "type": "string"
        },
        "status_id": {
          "type": "integer"
        },
        "how_to_pay": {
          "type": "string"
        },
        "date_dead": {
          "type": "string"
        },
        "Ddate_dead": {
          "type": "integer"
        },
        "Mdate_dead": {
          "type": "integer"
        },
        "Ydate_dead": {
          "type": "integer"
        },
        "date_dead_inform": {
          "type": "string"
        },
        "num_dead": {
          "type": "integer"
        },
        "num_dead_month": {
          "type": "integer"
        },
        "cause": {
          "type": "integer"
        },
        "cause_dead": {
          "type": "string"
        },
        "pay_dead": {
          "type": "integer"
        },
        "pay_dead2": {
          "type": "number",
          "format": "float"
        },
        "pay_dead3": {
          "type": "number",
          "format": "float"
        },
        "pay_dead_center": {
          "type": "integer"
        },
        "pay_percen": {
          "type": "integer"
        },
        "pay_percen2": {
          "type": "number",
          "format": "float"
        },
        "pay_percen3": {
          "type": "number",
          "format": "float"
        },
        "pay_mark": {
          "type": "string"
        },
        "name_dead1": {
          "type": "string"
        },
        "name_dead1_id13": {
          "type": "string"
        },
        "add_name_dead1": {
          "type": "string"
        },
        "name_dead11": {
          "type": "string"
        },
        "name_dead2": {
          "type": "string"
        },
        "add_name_dead2": {
          "type": "string"
        },
        "name_dead2_id13": {
          "type": "string"
        },
        "name_dead22": {
          "type": "string"
        },
        "name_dead3": {
          "type": "string"
        },
        "name_dead3_id13": {
          "type": "string"
        },
        "add_name_dead3": {
          "type": "string"
        },
        "name_dead33": {
          "type": "string"
        },
        "name_dead4": {
          "type": "string"
        },
        "name_dead4_id13": {
          "type": "string"
        },
        "add_name_dead4": {
          "type": "string"
        },
        "name_dead44": {
          "type": "string"
        },
        "name_dead5": {
          "type": "string"
        },
        "name_dead5_id13": {
          "type": "string"
        },
        "add_name_dead5": {
          "type": "string"
        },
        "name_dead55": {
          "type": "string"
        },
        "name_manag": {
          "type": "string"
        },
        "date_pay": {
          "type": "string"
        },
        "Ddate_pay": {
          "type": "integer"
        },
        "Mdate_pay": {
          "type": "string"
        },
        "Ydate_pay": {
          "type": "string"
        },
        "date_pay2": {
          "type": "string"
        },
        "Ddate_pay2": {
          "type": "integer"
        },
        "Mdate_pay2": {
          "type": "string"
        },
        "Ydate_pay2": {
          "type": "string"
        },
        "date_pay3": {
          "type": "string"
        },
        "Ddate_pay3": {
          "type": "integer"
        },
        "Mdate_pay3": {
          "type": "string"
        },
        "Ydate_pay3": {
          "type": "string"
        },
        "remark2": {
          "type": "string"
        },
        "remark3": {
          "type": "string"
        },
        "file_pic": {
          "type": "string"
        },
        "file_pdf": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        },
        "timesend": {
          "type": "string"
        },
        "datesend": {
          "type": "string"
        },
        "reson_recive": {
          "type": "string"
        },
        "nation": {
          "type": "string"
        },
        "occu": {
          "type": "string"
        },
        "line": {
          "type": "integer"
        },
        "yokyod": {
          "type": "integer"
        },
        "dateKang52": {
          "type": "string"
        },
        "numD": {
          "type": "integer"
        },
        "yearsD": {
          "type": "string"
        },
        "line3": {
          "type": "integer"
        },
        "type_reg": {
          "type": "string"
        },
        "dead_pay1": {
          "type": "integer"
        },
        "dead_pay2": {
          "type": "integer"
        },
        "telhome": {
          "type": "string"
        },
        "re1": {
          "type": "string"
        },
        "re2": {
          "type": "string"
        },
        "re3": {
          "type": "string"
        },
        "re4": {
          "type": "string"
        },
        "re5": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "lineid": {
          "type": "string"
        },
        "status_marid": {
          "type": "string"
        },
        "per_1": {
          "type": "integer"
        },
        "per_2": {
          "type": "integer"
        },
        "per_3": {
          "type": "integer"
        },
        "per_4": {
          "type": "integer"
        },
        "per_5": {
          "type": "integer"
        },
        "Nbank_0": {
          "type": "string"
        },
        "Nbank_1": {
          "type": "string"
        },
        "Nbank_2": {
          "type": "string"
        },
        "Nbank_3": {
          "type": "string"
        },
        "Nbank_4": {
          "type": "string"
        },
        "Nbank_5": {
          "type": "string"
        },
        "bank_id_0": {
          "type": "string"
        },
        "brance_0": {
          "type": "string"
        },
        "bank_id_1": {
          "type": "string"
        },
        "bank_id_2": {
          "type": "string"
        },
        "bank_id_3": {
          "type": "string"
        },
        "bank_id_4": {
          "type": "string"
        },
        "bank_id_5": {
          "type": "string"
        },
        "number_bank_0": {
          "type": "string"
        },
        "number_bank_1": {
          "type": "string"
        },
        "number_bank_2": {
          "type": "string"
        },
        "number_bank_3": {
          "type": "string"
        },
        "number_bank_4": {
          "type": "string"
        },
        "number_bank_5": {
          "type": "string"
        },
        "Ydate_first_Num": {
          "type": "string"
        },
        "monkang01": {
          "type": "integer"
        },
        "monkang02": {
          "type": "integer"
        },
        "monkang03": {
          "type": "integer"
        },
        "monkang": {
          "type": "integer"
        },
        "datefirst_pay": {
          "type": "string"
        },
        "yearsfirst_pay": {
          "type": "string"
        },
        "meeting_01": {
          "type": "string"
        },
        "meeting_year": {
          "type": "string"
        },
        "tel2": {
          "type": "string"
        },
        "name_dead6": {
          "type": "string"
        },
        "name_dead_id136": {
          "type": "string"
        },
        "add_name_dead6": {
          "type": "string"
        },
        "re6": {
          "type": "string"
        },
        "name_dead7": {
          "type": "string"
        },
        "name_dead_id137": {
          "type": "string"
        },
        "add_name_dead7": {
          "type": "string"
        },
        "re7": {
          "type": "string"
        },
        "name_dead8": {
          "type": "string"
        },
        "name_dead_id138": {
          "type": "string"
        },
        "add_name_dead8": {
          "type": "string"
        },
        "re8": {
          "type": "string"
        },
        "name_dead9": {
          "type": "string"
        },
        "name_dead_id139": {
          "type": "string"
        },
        "add_name_dead9": {
          "type": "string"
        },
        "re9": {
          "type": "string"
        },
        "name_dead10": {
          "type": "string"
        },
        "name_dead_id1310": {
          "type": "string"
        },
        "add_name_dead10": {
          "type": "string"
        },
        "re10": {
          "type": "string"
        },
        "add01": {
          "type": "string"
        },
        "add_num2": {
          "type": "string"
        },
        "tumbon_nameout2": {
          "type": "string"
        },
        "ampher2": {
          "type": "string"
        },
        "province2": {
          "type": "string"
        },
        "post2": {
          "type": "string"
        }
      }
    },
    "memnew_id_update": {
      "type": "object",
      "properties": {
        "mem_id": {
          "type": "integer"
        },
        "memnew_id_update": {
          "type": "integer"
        }
      }
    },
    "mon_before_start": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "member_id": {
          "type": "integer"
        },
        "mon_before": {
          "type": "integer"
        },
        "mon_years": {
          "type": "string"
        }
      }
    },
    "mon": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "mon_id": {
          "type": "integer"
        },
        "mon_name": {
          "type": "string"
        }
      }
    },
    "monBank1": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "book_id": {
          "type": "string"
        },
        "mon": {
          "type": "integer"
        },
        "years": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "balance": {
          "type": "number",
          "format": "float"
        },
        "balance2": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall": {
          "type": "number",
          "format": "float"
        },
        "date_rec": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        }
      }
    },
    "monBank2": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "book_id": {
          "type": "string"
        },
        "mon": {
          "type": "integer"
        },
        "years": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "balance": {
          "type": "number",
          "format": "float"
        },
        "balance2": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall": {
          "type": "number",
          "format": "float"
        },
        "date_rec": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        }
      }
    },
    "monBank3": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "book_id": {
          "type": "string"
        },
        "mon": {
          "type": "integer"
        },
        "years": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "balance": {
          "type": "number",
          "format": "float"
        },
        "balance2": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall": {
          "type": "number",
          "format": "float"
        },
        "date_rec": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        }
      }
    },
    "monBank4": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "book_id": {
          "type": "string"
        },
        "mon": {
          "type": "integer"
        },
        "years": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "balance": {
          "type": "number",
          "format": "float"
        },
        "balance2": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall": {
          "type": "number",
          "format": "float"
        },
        "date_rec": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        }
      }
    },
    "monhug": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "mem_id": {
          "type": "integer"
        },
        "dead1": {
          "type": "integer"
        },
        "dead122": {
          "type": "integer"
        },
        "mon1": {
          "type": "integer"
        },
        "mon122": {
          "type": "integer"
        }
      }
    },
    "monJay": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "mon": {
          "type": "integer"
        },
        "years": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "balance_MJ501": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ501": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ501": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ502": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ502": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ502": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ503": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ503": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ503": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ504": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ504": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ504": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ505": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ505": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ505": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ506": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ506": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ506": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ507": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ507": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ507": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ508": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ508": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ508": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ509": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ509": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ509": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ510": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ510": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ510": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ511": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ511": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ511": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ512": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ512": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ512": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ513": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ513": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ513": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ514": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ514": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ514": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ515": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ515": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ515": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ516": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ516": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ516": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ517": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ517": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ517": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ518": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ518": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ518": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ519": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ519": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ519": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ520": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ520": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ520": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ521": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ521": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ521": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ522": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ522": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ522": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ523": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ523": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ523": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ524": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ524": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ524": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ525": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ525": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ525": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ526": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ526": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ526": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ527": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ527": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ527": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ528": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ528": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ528": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ529": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ529": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ529": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ530": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ530": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ530": {
          "type": "number",
          "format": "float"
        },
        "balance_MJ531": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MJ531": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MJ531": {
          "type": "number",
          "format": "float"
        },
        "date_rec": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        }
      }
    },
    "monluknee": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "book_id": {
          "type": "string"
        },
        "mon": {
          "type": "integer"
        },
        "years": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "balance": {
          "type": "number",
          "format": "float"
        },
        "balance2": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall": {
          "type": "number",
          "format": "float"
        },
        "date_rec": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        }
      }
    },
    "monpay4": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "mon": {
          "type": "integer"
        },
        "years": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "balance": {
          "type": "number",
          "format": "float"
        },
        "balance2": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall": {
          "type": "number",
          "format": "float"
        },
        "balancePay": {
          "type": "number",
          "format": "float"
        },
        "sum_debitallPay": {
          "type": "number",
          "format": "float"
        },
        "sum_keditallPay": {
          "type": "number",
          "format": "float"
        },
        "balancePayRe": {
          "type": "number",
          "format": "float"
        },
        "sum_debitallPayRe": {
          "type": "number",
          "format": "float"
        },
        "sum_keditallPayRe": {
          "type": "number",
          "format": "float"
        },
        "date_rec": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        }
      }
    },
    "monRub": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "mon": {
          "type": "integer"
        },
        "years": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "balance_MR1": {
          "type": "number",
          "format": "float"
        },
        "balance2": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MR1": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MR1": {
          "type": "number",
          "format": "float"
        },
        "balance_MR2": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MR2": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MR2": {
          "type": "number",
          "format": "float"
        },
        "balance_MR3": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MR3": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MR3": {
          "type": "number",
          "format": "float"
        },
        "balance_MR4": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MR4": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MR4": {
          "type": "number",
          "format": "float"
        },
        "balance_MR5": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MR5": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MR5": {
          "type": "number",
          "format": "float"
        },
        "balance_MR6": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MR6": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MR6": {
          "type": "number",
          "format": "float"
        },
        "balance_MR407": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MR407": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MR407": {
          "type": "number",
          "format": "float"
        },
        "balance_MR408": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MR408": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MR408": {
          "type": "number",
          "format": "float"
        },
        "balance_MR409": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MR409": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MR409": {
          "type": "number",
          "format": "float"
        },
        "balance_MR410": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MR410": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MR410": {
          "type": "number",
          "format": "float"
        },
        "balance_MR411": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MR411": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MR411": {
          "type": "number",
          "format": "float"
        },
        "balance_MR412": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_MR412": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_MR412": {
          "type": "number",
          "format": "float"
        },
        "date_rec": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        }
      }
    },
    "monRubJay": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "mon": {
          "type": "integer"
        },
        "years": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "balance_RJ": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall_RJ": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall_RJ": {
          "type": "number",
          "format": "float"
        },
        "date_rec": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        }
      }
    },
    "monsod_Day": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "Day1": {
          "type": "integer"
        },
        "mon": {
          "type": "integer"
        },
        "years": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "balance": {
          "type": "number",
          "format": "float"
        },
        "balance2": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall": {
          "type": "number",
          "format": "float"
        },
        "date_rec": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        }
      }
    },
    "monsod": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "mon": {
          "type": "integer"
        },
        "years": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "balance": {
          "type": "number",
          "format": "float"
        },
        "balance2": {
          "type": "number",
          "format": "float"
        },
        "sum_debitall": {
          "type": "number",
          "format": "float"
        },
        "sum_keditall": {
          "type": "number",
          "format": "float"
        },
        "date_rec": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        }
      }
    },
    "num_deadcheck": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "dead_pay1": {
          "type": "integer"
        },
        "dead_pay2": {
          "type": "integer"
        },
        "member_id": {
          "type": "integer"
        },
        "member_id1": {
          "type": "integer"
        },
        "member_id2": {
          "type": "integer"
        },
        "num_dead": {
          "type": "integer"
        },
        "num_dead2": {
          "type": "integer"
        },
        "num_dead_last": {
          "type": "integer"
        },
        "pay_dead_one": {
          "type": "number",
          "format": "float"
        },
        "percen": {
          "type": "integer"
        },
        "num_all": {
          "type": "integer"
        },
        "num_d": {
          "type": "integer"
        },
        "num_out1": {
          "type": "integer"
        },
        "num_out2": {
          "type": "integer"
        },
        "num_live": {
          "type": "integer"
        },
        "num_live7": {
          "type": "integer"
        },
        "num_live_pay": {
          "type": "integer"
        },
        "num_live_notpay": {
          "type": "integer"
        },
        "num_live2_new": {
          "type": "integer"
        },
        "num_live3_new": {
          "type": "integer"
        },
        "num_live4_new": {
          "type": "integer"
        },
        "date_rec": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        },
        "mon_approve": {
          "type": "number",
          "format": "float"
        },
        "member_id_last": {
          "type": "integer"
        }
      }
    },
    "numdead_up": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "numdead_up": {
          "type": "integer"
        },
        "numdead_up2": {
          "type": "integer"
        },
        "numD_up": {
          "type": "integer"
        },
        "yearsD_up": {
          "type": "string"
        }
      }
    },
    "numnotpay": {
      "type": "object",
      "properties": {
        "id_checkpay": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "num_dead": {
          "type": "integer"
        },
        "member_id": {
          "type": "integer"
        },
        "money_before": {
          "type": "integer"
        },
        "dead_pay1": {
          "type": "integer"
        },
        "dead_pay2": {
          "type": "integer"
        }
      }
    },
    "numpay_memnew": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "dead_pay1": {
          "type": "integer"
        },
        "dead_pay2": {
          "type": "integer"
        },
        "num_pay": {
          "type": "integer"
        },
        "pay": {
          "type": "integer"
        },
        "pay_4": {
          "type": "number",
          "format": "float"
        },
        "remark": {
          "type": "string"
        },
        "deadnum1": {
          "type": "integer"
        },
        "deadnum2": {
          "type": "integer"
        },
        "monney_before_center": {
          "type": "integer"
        },
        "money_pay1": {
          "type": "integer"
        },
        "money_pay2": {
          "type": "integer"
        },
        "money_pay4": {
          "type": "integer"
        },
        "date_first01": {
          "type": "string"
        },
        "date_first02": {
          "type": "string"
        },
        "date_first03": {
          "type": "string"
        },
        "yearsbirth": {
          "type": "string"
        }
      }
    },
    "numpay_month": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "dead_pay1": {
          "type": "integer"
        },
        "dead_pay2": {
          "type": "integer"
        },
        "num_pay": {
          "type": "number",
          "format": "float"
        },
        "pay": {
          "type": "number",
          "format": "float"
        },
        "payallmonth": {
          "type": "number",
          "format": "float"
        },
        "pay_4": {
          "type": "number",
          "format": "float"
        },
        "remark": {
          "type": "string"
        },
        "deadnum1": {
          "type": "integer"
        },
        "deadnum2": {
          "type": "integer"
        },
        "monney_before_center": {
          "type": "integer"
        },
        "mon_approve": {
          "type": "number",
          "format": "float"
        },
        "datefirst_pay_set": {
          "type": "string"
        },
        "yearsfirst_pay_set": {
          "type": "string"
        },
        "member_id_last": {
          "type": "integer"
        }
      }
    },
    "numpay_years_02": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "datefirst_pay": {
          "type": "integer"
        },
        "yearsfirst_pay": {
          "type": "integer"
        },
        "years_pay_num": {
          "type": "integer"
        },
        "years_pay": {
          "type": "integer"
        },
        "mon2_years": {
          "type": "number",
          "format": "float"
        },
        "mon4_years": {
          "type": "number",
          "format": "float"
        },
        "remark": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        },
        "type_save": {
          "type": "string"
        }
      }
    },
    "numpay_years": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "datefirst_pay": {
          "type": "integer"
        },
        "yearsfirst_pay": {
          "type": "integer"
        },
        "years_pay_num": {
          "type": "integer"
        },
        "years_pay": {
          "type": "integer"
        },
        "mon2_years": {
          "type": "number",
          "format": "float"
        },
        "mon4_years": {
          "type": "number",
          "format": "float"
        },
        "remark": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        },
        "type_save": {
          "type": "string"
        }
      }
    },
    "numpay": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "dead_pay1": {
          "type": "integer"
        },
        "dead_pay2": {
          "type": "integer"
        },
        "num_pay": {
          "type": "integer"
        },
        "pay": {
          "type": "integer"
        },
        "pay_4": {
          "type": "number",
          "format": "float"
        },
        "remark": {
          "type": "string"
        },
        "deadnum1": {
          "type": "integer"
        },
        "deadnum2": {
          "type": "integer"
        },
        "monney_before_center": {
          "type": "integer"
        },
        "timestamp": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        },
        "type_save": {
          "type": "string"
        },
        "datefirst_pay_numpay": {
          "type": "string"
        },
        "yearsfirst_pay_numpay": {
          "type": "string"
        }
      }
    },
    "pay_other": {
      "type": "object",
      "properties": {
        "id_pay": {
          "type": "integer",
          "nullable": false
        },
        "pay_id": {
          "type": "integer"
        },
        "money_detail": {
          "type": "string"
        },
        "money_pay": {
          "type": "number",
          "format": "float"
        },
        "bill_no": {
          "type": "string"
        },
        "date_to_pay": {
          "type": "string"
        },
        "DpayP": {
          "type": "integer"
        },
        "MpayP": {
          "type": "string"
        },
        "YpayP": {
          "type": "string"
        },
        "name_pay": {
          "type": "string"
        },
        "date_mem": {
          "type": "string"
        },
        "remark": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        }
      }
    },
    "pay": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "pay_id": {
          "type": "integer"
        },
        "pay_name": {
          "type": "string"
        },
        "acc": {
          "type": "string"
        }
      }
    },
    "province": {
      "type": "object",
      "properties": {
        "PROVINCE_ID": {
          "type": "integer"
        },
        "PROVINCE_CODE": {
          "type": "string"
        },
        "PROVINCE_NAME": {
          "type": "string"
        },
        "GEO_ID": {
          "type": "integer"
        }
      }
    },
    "rang": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "rang_id": {
          "type": "integer"
        },
        "rang_name": {
          "type": "string"
        },
        "rang_name_short": {
          "type": "string"
        },
        "corps": {
          "type": "string"
        }
      }
    },
    "rub_other": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "nullable": false
        },
        "rub_id": {
          "type": "integer"
        },
        "money_detail": {
          "type": "string"
        },
        "money_pay": {
          "type": "number",
          "format": "float"
        },
        "bill_no": {
          "type": "string"
        },
        "date_to_pay": {
          "type": "string"
        },
        "Drub": {
          "type": "integer"
        },
        "Mrub": {
          "type": "string"
        },
        "Yrub": {
          "type": "string"
        },
        "name_pay": {
          "type": "string"
        },
        "date_mem": {
          "type": "string"
        },
        "remark": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        }
      }
    },
    "rub": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "rub_id": {
          "type": "integer"
        },
        "rub_name": {
          "type": "string"
        },
        "acc": {
          "type": "string"
        }
      }
    },
    "setup_money": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "setup_id": {
          "type": "integer"
        },
        "pay_dead": {
          "type": "integer"
        },
        "pay_dead_one": {
          "type": "number",
          "format": "float"
        },
        "percen": {
          "type": "integer"
        },
        "money_less": {
          "type": "integer"
        },
        "reportMem": {
          "type": "string"
        },
        "money_pay1": {
          "type": "integer"
        },
        "money_pay2": {
          "type": "integer"
        },
        "money_pay4": {
          "type": "integer"
        }
      }
    },
    "sinpeemem": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "member_id": {
          "type": "integer"
        },
        "money_before": {
          "type": "integer"
        },
        "year_rec": {
          "type": "string"
        }
      }
    },
    "status": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "status_id": {
          "type": "integer"
        },
        "status_name": {
          "type": "string"
        }
      }
    },
    "sysdiagrams": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": false
        },
        "principal_id": {
          "type": "integer",
          "nullable": false
        },
        "diagram_id": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "version": {
          "type": "integer"
        },
        "definition": {
          "type": "string"
        }
      }
    },
    "total_money": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "sum_money": {
          "type": "integer"
        },
        "subtrac_money": {
          "type": "integer"
        },
        "total_money": {
          "type": "integer"
        },
        "total_money_center": {
          "type": "integer"
        }
      }
    },
    "tumbon_authoall": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "tumbon_id": {
          "type": "integer"
        },
        "menu_01": {
          "type": "string"
        },
        "menu_02": {
          "type": "string"
        },
        "menu_03": {
          "type": "string"
        },
        "menu_04": {
          "type": "string"
        }
      }
    },
    "tumbon_chang": {
      "type": "object",
      "properties": {
        "id_auto": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "member_id": {
          "type": "integer"
        },
        "tumbon_id": {
          "type": "integer"
        },
        "tumbon_idO": {
          "type": "integer"
        },
        "date_chang": {
          "type": "string"
        },
        "dc": {
          "type": "integer"
        },
        "mc": {
          "type": "integer"
        },
        "yc": {
          "type": "integer"
        },
        "timpstamp": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        }
      }
    },
    "tumbon": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "tumbon_id": {
          "type": "integer"
        },
        "tumbon_id_text": {
          "type": "string"
        },
        "tumbon_name": {
          "type": "string"
        },
        "tumbon_name2": {
          "type": "string"
        },
        "tumbon_pro_id": {
          "type": "integer"
        },
        "group_id": {
          "type": "integer"
        },
        "ampher_id": {
          "type": "integer"
        },
        "ampher": {
          "type": "string"
        },
        "province": {
          "type": "string"
        },
        "post": {
          "type": "string"
        },
        "tumbon_add": {
          "type": "string"
        },
        "tumbon_tel": {
          "type": "string"
        },
        "tumbon_position": {
          "type": "string"
        },
        "respon_area": {
          "type": "string"
        },
        "respon_area_id": {
          "type": "integer"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "menu_01": {
          "type": "string"
        },
        "menu_02": {
          "type": "string"
        },
        "menu_03": {
          "type": "string"
        },
        "menu_04": {
          "type": "string"
        },
        "bill_unit_update": {
          "type": "integer"
        }
      }
    },
    "type_name_2": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "type_name_id_2": {
          "type": "integer"
        },
        "type_name_2": {
          "type": "string"
        }
      }
    },
    "type_name": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "type_name_id": {
          "type": "integer"
        },
        "type_name": {
          "type": "string"
        },
        "type_name2": {
          "type": "string"
        },
        "front": {
          "type": "string"
        },
        "type_num": {
          "type": "string"
        }
      }
    },
    "useradmin": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "fullname": {
          "type": "string"
        },
        "authenid": {
          "type": "string"
        },
        "menu_01": {
          "type": "string"
        },
        "menu_02": {
          "type": "string"
        },
        "menu_03": {
          "type": "string"
        },
        "menu_04": {
          "type": "string"
        },
        "menu_05": {
          "type": "string"
        },
        "menu_06": {
          "type": "string"
        }
      }
    },
    "userlog_all": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "user_name": {
          "type": "string"
        },
        "computer_name": {
          "type": "string"
        },
        "sIPAddress": {
          "type": "string"
        },
        "timelog": {
          "type": "string"
        },
        "Dlog": {
          "type": "integer"
        },
        "Mlog": {
          "type": "integer"
        },
        "Ylog": {
          "type": "integer"
        },
        "time1": {
          "type": "string"
        },
        "sumrecord": {
          "type": "integer"
        },
        "menu_id": {
          "type": "string"
        },
        "menu_name": {
          "type": "string"
        }
      }
    },
    "village": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "tumbon_id": {
          "type": "integer"
        },
        "village_id": {
          "type": "integer"
        },
        "village_name": {
          "type": "string"
        }
      }
    },
    "yearsrecord": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "nullable": false
        },
        "years": {
          "type": "string"
        },
        "money_pay4years": {
          "type": "number",
          "format": "float"
        },
        "money_rubyears": {
          "type": "number",
          "format": "float"
        },
        "money_rubyearsnew": {
          "type": "number",
          "format": "float"
        },
        "money_rubyearsOldPlus": {
          "type": "number",
          "format": "float"
        },
        "money_rubyearsOld": {
          "type": "number",
          "format": "float"
        },
        "nee": {
          "type": "number",
          "format": "float"
        },
        "mon": {
          "type": "number",
          "format": "float"
        },
        "Bank1": {
          "type": "number",
          "format": "float"
        },
        "Bank2": {
          "type": "number",
          "format": "float"
        },
        "Bank3": {
          "type": "number",
          "format": "float"
        },
        "Bank4": {
          "type": "number",
          "format": "float"
        },
        "office1": {
          "type": "number",
          "format": "float"
        },
        "office": {
          "type": "number",
          "format": "float"
        },
        "building": {
          "type": "number",
          "format": "float"
        },
        "land": {
          "type": "number",
          "format": "float"
        },
        "luknee": {
          "type": "number",
          "format": "float"
        },
        "sitti": {
          "type": "number",
          "format": "float"
        },
        "sasom": {
          "type": "number",
          "format": "float"
        },
        "prakun": {
          "type": "number",
          "format": "float"
        },
        "remark": {
          "type": "string"
        },
        "adminname": {
          "type": "string"
        }
      }
    },
    "zipcode": {
      "type": "object",
      "properties": {
        "ZIPCODE_ID": {
          "type": "integer",
          "nullable": false
        },
        "DISTRICT_CODE": {
          "type": "string",
          "nullable": false
        },
        "PROVINCE_ID": {
          "type": "string",
          "nullable": false
        },
        "AMPHUR_ID": {
          "type": "string",
          "nullable": false
        },
        "DISTRICT_ID": {
          "type": "string",
          "nullable": false
        },
        "ZIPCODE": {
          "type": "string",
          "nullable": false
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about XgeneCloud",
    "url": "http://xgenecloud.com"
  }
}